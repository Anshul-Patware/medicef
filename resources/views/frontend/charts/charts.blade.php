{{--Intial Deviation --}}
{{-- <h4>Documents Analytics</h4> --}}

<style>
  .sub-head {
    color: #eca035;
    border-bottom: 2px solid #eca035;
    padding-bottom: 5px;
    margin-bottom: 20px;
    font-weight: bold;
    font-size: 1.2rem;
  }
  .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center{
    /* top: 0px!important; */
  }
  .apexcharts-text tspan {
    font-size: 10px;
  }
</style>

<script>
  // Initial change control
  fetch('/api/get-change-control-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('changeControlChart').getContext('2d');
      const deviationChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Change Control',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'], 
            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],   
            borderWidth: 1,
            barThickness: 25 
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));


  // Initial global change control 
  fetch('/api/get-global-change-control-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('globalChangeControlChart').getContext('2d');
      const deviationChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Change Control',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'], // Updated colors
            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],   // Matching border colors
            borderWidth: 1,
            barThickness: 25 // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));

  // Initial Action Item 
  fetch('/api/get-action-item-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('initialActionItemChart').getContext('2d');
      const deviationChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'ction Item',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'], // Updated colors
            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],   // Matching border colors
            borderWidth: 1,
            barThickness: 25 // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));
</script>

<script>
  // Post categorization deviation
  fetch('/api/get-deviation-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('deviationChart').getContext('2d');
      const deviationChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Deviation',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'], // Updated colors
            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],   // Matching border colors
            borderWidth: 1,
            barThickness: 25 // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));
</script>


<script>
  // Post Categorization Change Control
  fetch('/api/get-change-control-categorization-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('changeControlpostChart').getContext('2d');
      const deviationpostChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Change Control',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'], // Updated colors
            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],   // Matching border colors
            borderWidth: 1,
            barThickness: 25  // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));


  // Post Categorization Global Change Control 
  fetch('/api/get-global-change-control-categorization-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('globalChangeControlpostChart').getContext('2d');
      const deviationpostChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Global Change Control',
            data: counts,
            backgroundColor: ['#ff8c00', '#ff8c00', '#ff8c00'], 
            borderColor: ['#ff8c00', '#ff8c00', '#ff8c00'], 
            borderWidth: 1,
            barThickness: 25  // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));



  // Post Categorization Action Item
  fetch('/api/get-action-item-categorization-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('actionItempostChart').getContext('2d');
      const deviationpostChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Action Item',
            data: counts,
            backgroundColor: ['#ff6600', '#ff6600', '#ff6600'], // Updated colors
            borderColor: ['#0000', '#0000', '#0000'],   // Matching border colors
            borderWidth: 1,
            barThickness: 25  // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));
</script>


<script>
  // Fetch data from Laravel API
  fetch('/api/get-categorization-data')
    .then(response => response.json())
    .then(data => {
      // Prepare data for the chart
      const categories = Object.keys(data);  // Major, Minor, Critical
      const counts = Object.values(data);  // Corresponding counts

      // Create the chart
      const ctx = document.getElementById('deviationpostChart').getContext('2d');
      const deviationpostChart = new Chart(ctx, {
        type: 'bar',  // Bar chart type
        data: {
          labels: categories,
          datasets: [{
            label: 'Deviation',
            data: counts,
            backgroundColor: ['#666699', '#666699', '#666699'], // Updated colors
            borderColor: ['#666699', '#666699', '#666699'],   // Matching border colors
            borderWidth: 1,
            barThickness: 25  // Set the thickness of the bars
          }]
        },
        options: {
          responsive: true,
          indexAxis: 'x', // Vertical Bar Chart
          scales: {
            y: {
              beginAtZero: true, // Ensure the y-axis starts from zero
              title: {
                display: true,
                text: 'Count', // Label for the y-axis
                font: {
                  size: 14,
                  weight: 'bold'
                }
              }
            },
            // x: {
            //     title: {
            //         display: true,
            //         text: 'Deviation Type', // Label for the x-axis
            //         font: {
            //             size: 14,
            //             weight: 'bold'
            //         }
            //     }
            // }
          },
          plugins: {
            legend: {
              position: 'top',  // Position of legend
            }
          },
          maintainAspectRatio: false  // Disable aspect ratio to fit chart in the container
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));
</script>

<div style="text-align: center; margin-bottom: 20px;">
  <h3>Site Wise Record Distribution</h3>
</div>

<!-- Chart Container with Overlay Loader -->
<div class="card border-0 position-relative">
  <div class="card-body">
    <h5 class="card-title">Process Counts Analysis</h5>
    <!-- Chart Type Icons -->
<div style="text-align: center; margin-bottom: 20px;">
  <button class="btn btn-primary" onclick="updateChartType('bar')">
    <i class="fas fa-chart-bar"></i>
  </button>
  <button class="btn btn-primary" onclick="updateChartType('pie')">
    <i class="fas fa-chart-pie"></i>
  </button>
  <button class="btn btn-primary" onclick="updateChartType('line')">
    <i class="fas fa-chart-line"></i>
  </button>
  <button class="btn btn-primary" onclick="updateChartType('scatter')">
    <i class="bi bi-cloud"></i>
  </button>
</div>
    <div id="processCountsChart" style="width: 100%; height: 450px;"></div>
    <!-- Loader Overlay -->
    <div id="chartLoaderContainer" class="position-absolute top-50 start-50 translate-middle">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>




<script>
  let chart;

function renderChart(data, chartType) {
  if (chart) {
    chart.destroy();
  }

  let series = [];
  let categories = data[0].processCounts.map(process => process.process);

  if (chartType === 'pie') {
    // Pie chart uses aggregated data (sum of counts for each division)
    series = data.map(divisionData => {
      return divisionData.processCounts.reduce((sum, pc) => sum + pc.count, 0);
    });
  } else {
    // Other charts use individual series
    data.forEach(divisionData => {
      series.push({
        name: divisionData.division,
        data: divisionData.processCounts.map(pc => pc.count)
      });
    });
  }

  let options = {
    series: chartType === 'pie' ? series : series,
    chart: {
      type: chartType,
      height: 350
    },
    xaxis: chartType !== 'pie' ? { categories: categories } : undefined,
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '50%',
        endingShape: 'rounded'
      },
      pie: {
        donut: {
          size: '70%'
        }
      },
      scatter: {
        markers: {
          size: 8
        }
      }
    },
    tooltip: {
      y: {
        formatter: function (val) {
          return val + " records";
        }
      }
    }
  };

  chart = new ApexCharts(document.querySelector("#processCountsChart"), options);
  chart.render();
}

function updateChartType(chartType) {
  // Show loader when the data is being fetched
  document.getElementById('chartLoaderContainer').style.display = 'block';
  
  fetch('/api/division-wise-process')
    .then(response => response.json())
    .then(data => {
      // Hide loader once data is loaded
      document.getElementById('chartLoaderContainer').style.display = 'none';
      
      renderChart(data.body, chartType);
    })
    .catch(error => {
      console.error('Error fetching data:', error);
      // Hide loader if there is an error
      document.getElementById('chartLoaderContainer').style.display = 'none';
    });
}

// Initial chart render
updateChartType('bar');

</script>


<div class="col-lg-12">

  <!-- Tabs for Bar, Pie, Line, and Scatter -->
  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#overdueRecordDistributionBar" type="button" role="tab" aria-controls="home" aria-selected="true">
        <i class="fa fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#overdueRecordDistributionPie" type="button" role="tab" aria-controls="profile" aria-selected="false">
        <i class="fa fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#overdueRecordDistributionLine" type="button" role="tab" aria-controls="line" aria-selected="false">
        <i class="fa fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#overdueRecordDistributionScatter" type="button" role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent">
    <!-- Bar chart content -->
    <div class="tab-pane fade show active" id="overdueRecordDistributionBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Overdue Record Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="overdueRecordDistributionChartBar">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Pie chart content -->
    <div class="tab-pane fade" id="overdueRecordDistributionPie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Overdue Record Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="overdueRecordDistributionChartPie"></div>

        </div>
      </div>
    </div>
    
    <!-- Line chart content -->
    <div class="tab-pane fade" id="overdueRecordDistributionLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Overdue Record Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="overdueRecordDistributionChartLine"></div>

        </div>
      </div>
    </div>
    
    <!-- Scatter chart content -->
    <div class="tab-pane fade" id="overdueRecordDistributionScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Overdue Record Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="overdueRecordDistributionChartScatter"></div>

        </div>
      </div>
    </div>
  </div>
</div>
{{-- DOCUMENT BY STATUS END --}}


<!-- <div id="chartContainer"></div> -->

<div class="col-lg-12">
  <!-- Tabs for Bar, Pie, Line, and Scatter -->
  <ul class="nav nav-tabs" id="chartTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#chartBar" type="button" role="tab" aria-controls="bar" aria-selected="true">
        <i class="fa fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#chartPie" type="button" role="tab" aria-controls="pie" aria-selected="false">
        <i class="fa fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#chartLine" type="button" role="tab" aria-controls="line" aria-selected="false">
        <i class="fa fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#chartScatter" type="button" role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="chartTabContent">
    <!-- Bar chart content -->
    <div class="tab-pane fade show active" id="chartBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Process Counts</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="chartBarContainer">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Pie chart content -->
    <div class="tab-pane fade" id="chartPie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Process Counts</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="chartPieContainer"></div>
        </div>
      </div>
    </div>
    
    <!-- Line chart content -->
    <div class="tab-pane fade" id="chartLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Process Counts</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="chartLineContainer"></div>
        </div>
      </div>
    </div>
    
    <!-- Scatter chart content -->
    <div class="tab-pane fade" id="chartScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Process Counts</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="chartScatterContainer"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script> -->



<script>
  async function fetchFlowCounts() {
    try {
      const url = "/api/flow-counts";
      const res = await axios.get(url);

      if (res.data.status === "ok") {
        const bodyData = res.data.body;
        const labels = bodyData.map((item) => item.name);
        const series = bodyData.map((item) => item.count);

        // Call render function after fetching the data
        renderFlowCharts(labels, series);

        // Handle tab switching to re-render charts based on the active tab
        document.querySelectorAll(".nav-link").forEach((tab) => {
          tab.addEventListener("click", () => {
            setTimeout(() => {
              renderFlowCharts(labels, series);
            }, 100); // Allow time for the tab switch animation
          });
        });
      } else {
        console.error("Error fetching data:", res.data.message);
      }
    } catch (err) {
      console.error("Error:", err.message);
    }
  }

  function renderFlowCharts(labels, series) {
    // Clear existing charts to avoid overlapping
    const containers = [
      "#chartBarContainer",
      "#chartPieContainer",
      "#chartLineContainer",
      "#chartScatterContainer",
    ];
    containers.forEach((selector) => {
      document.querySelector(selector).innerHTML = "";
    });

    // Chart options
    const chartOptions = {
      bar: {
        chart: { type: "bar", height: 350 },
        series: [{ name: "Process Counts", data: series }],
        xaxis: { categories: labels, title: { text: "Process" } },
        yaxis: { title: { text: "Count" } },
        // title: { text: "Flow Counts", align: "center" },
      },
      pie: {
        chart: { type: "pie", width: 450 },
        series: series,
        labels: labels,
        responsive: [
          {
            breakpoint: 480,
            options: { chart: { width: 200 }, legend: { position: "bottom" } },
          },
        ],
      },
      line: {
        chart: { type: "line", height: 350 },
        series: [{ name: "Process Counts", data: series }],
        stroke: { width: 4 },
        xaxis: { categories: labels },
        yaxis: { title: { text: "Count" } },
        tooltip: { y: { formatter: (val) => `${val} counts` } },
        // title: { text: "Flow Counts", align: "center" },
      },
      scatter: {
        chart: { type: "scatter", height: 350 },
        series: [{ name: "Process Counts", data: series }],
        xaxis: { categories: labels },
        yaxis: { title: { text: "Count" } },
        tooltip: { y: { formatter: (val) => `${val} counts` } },
        // title: { text: "Flow Counts", align: "center" },
      },
    };

    // Render each chart in its respective container
    new ApexCharts(document.querySelector("#chartBarContainer"), chartOptions.bar).render();
    new ApexCharts(document.querySelector("#chartPieContainer"), chartOptions.pie).render();
    new ApexCharts(document.querySelector("#chartLineContainer"), chartOptions.line).render();
    new ApexCharts(document.querySelector("#chartScatterContainer"), chartOptions.scatter).render();
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Set default active tab
    document.getElementById("bar-tab").classList.add("active");
    document.getElementById("chartBar").classList.add("show", "active");

    fetchFlowCounts();
  });
</script>







<!-- 
 <div class="my-4 row">
  <div class="col-sm-6">
    <div class="card border-0" style="">
      <div class="card-body">
        <h5 class="card-title">Processes</h5>

        <div class="card-text d-flex justify-content-center d-flex justify-content-center align-items-center h-100"
          id="processChart">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<hr> -->

<div class="my-4 row">
  <div class="col-sm-6">
    <ul class="nav nav-tabs" id="myTab4" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#hodAnalysisBar"
          type="button" role="tab" aria-controls="bar" aria-selected="true">
          <i class="fas fa-chart-bar"></i> 
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#hodAnalysisPie" type="button"
          role="tab" aria-controls="pie" aria-selected="false">
          <i class="fas fa-chart-pie"></i> 
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#hodAnalysisLine" type="button"
          role="tab" aria-controls="line" aria-selected="false">
          <i class="fas fa-chart-line"></i>
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#hodAnalysisScatter" type="button"
          role="tab" aria-controls="scatter" aria-selected="false">
          <i class="bi bi-cloud"></i>
        </button>
      </li>
    </ul>

    <div class="tab-content" id="myTabContent2">
      <div class="tab-pane fade show active" id="hodAnalysisBar" role="tabpanel" aria-labelledby="bar-tab">
        <div class="card border-0">
          <div class="card-body">
            <h5 class="card-title">Pending HOD Analysis</h5>
            <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingHODAnalysis">
              <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="tab-pane fade" id="hodAnalysisPie" role="tabpanel" aria-labelledby="pie-tab">
        <div class="card border-0">
          <div class="card-body">
            <h5 class="card-title">Pending HOD Analysis</h5>
            <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingHODAnalysisPie">
            </div>
          </div>
        </div>
      </div>
      <div class="tab-pane fade" id="hodAnalysisLine" role="tabpanel" aria-labelledby="line-tab">
        <div class="card border-0">
          <div class="card-body">
            <h5 class="card-title">Pending HOD Analysis</h5>
            <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingHODAnalysisLine">
            </div>
          </div>
        </div>
      </div>
      <div class="tab-pane fade" id="hodAnalysisScatter" role="tabpanel" aria-labelledby="scatter-tab">
        <div class="card border-0">
          <div class="card-body">
            <h5 class="card-title">Pending HOD Analysis</h5>
            <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingHODAnalysisScatter">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


 <div class="col-sm-6">
  <ul class="nav nav-tabs" id="myTab1" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#pendingTrainingBar"
        type="button" role="tab" aria-controls="bar" aria-selected="true">
        <i class="fas fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#pendingTrainingPie"
        type="button" role="tab" aria-controls="pie" aria-selected="false">
        <i class="fas fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#pendingTrainingLine"
        type="button" role="tab" aria-controls="line" aria-selected="false">
        <i class="fas fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#pendingTrainingScatter"
        type="button" role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent3">
    <!-- Bar Chart -->
    <div class="tab-pane fade show active" id="pendingTrainingBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Training Analysis</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingTrainingAnalysis">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Pie Chart -->
    <div class="tab-pane fade" id="pendingTrainingPie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Training Analysis</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingTrainingAnalysisPie">
          </div>
        </div>
      </div>
    </div>

    <!-- Line Chart -->
    <div class="tab-pane fade" id="pendingTrainingLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Training Analysis</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="pendingTrainingAnalysisLine">
          </div>
        </div>
      </div>
    </div>

    <!-- Scatter Chart -->
    <div class="tab-pane fade" id="pendingTrainingScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Training Analysis</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100"
            id="pendingTrainingAnalysisScatter">
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

</div>

<div class="my-4 row">
<div class="col-sm-6">
  <ul class="nav nav-tabs" id="chartTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#pendingReviewBar" type="button">
        <i class="fas fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" data-bs-toggle="tab" data-bs-target="#pendingReviewPie" type="button">
        <i class="fas fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" data-bs-toggle="tab" data-bs-target="#pendingReviewLine" type="button">
        <i class="fas fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" data-bs-toggle="tab" data-bs-target="#pendingReviewScatter" type="button">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="chartTabContent">
    <div class="tab-pane fade show active" id="pendingReviewBar" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Review Analysis</h5>
          <div id="pendingReviewAnalysis" class="d-flex justify-content-center align-items-center h-100">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pendingReviewPie" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Review Analysis</h5>
          <div id="pendingReviewAnalysisPie" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pendingReviewLine" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Review Analysis</h5>
          <div id="pendingReviewAnalysisLine" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pendingReviewScatter" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Review Analysis</h5>
          <div id="pendingReviewAnalysisScatter" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>
  </div>
</div>


  {{-- PENDING APPROVAL ANALYSIS START --}}
 <div class="col-sm-6">
  <ul class="nav nav-tabs" id="chartTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#pendingApprovalBar" type="button">
        <i class="fas fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" data-bs-toggle="tab" data-bs-target="#pendingApprovalPie" type="button">
        <i class="fas fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" data-bs-toggle="tab" data-bs-target="#pendingApprovalLine" type="button">
        <i class="fas fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" data-bs-toggle="tab" data-bs-target="#pendingApprovalScatter" type="button">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="chartTabContent">
    <div class="tab-pane fade show active" id="pendingApprovalBar" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Approval Analysis</h5>
          <div id="pendingApproveAnalysis" class="d-flex justify-content-center align-items-center h-100">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pendingApprovalPie" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Approval Analysis</h5>
          <div id="pendingApproveAnalysisPie" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pendingApprovalLine" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Approval Analysis</h5>
          <div id="pendingApproveAnalysisLine" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="pendingApprovalScatter" role="tabpanel">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Pending Approval Analysis</h5>
          <div id="pendingApproveAnalysisScatter" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>
  </div>
</div>

  {{-- PENDING APPROVAL ANALYSIS END --}}

</div>

<div class="my-4 row">
<div class="col-sm-6">
  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#docTypeBar" type="button"
        role="tab" aria-controls="bar" aria-selected="true">
        <i class="fas fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#docTypePie" type="button"
        role="tab" aria-controls="pie" aria-selected="false">
        <i class="fas fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#docTypeLine" type="button"
        role="tab" aria-controls="line" aria-selected="false">
        <i class="fas fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#docTypeScatter" type="button"
        role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i> 
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="docTypeBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Document Type Distribution</h5>
          <div id="documentTypeBar" class="d-flex justify-content-center align-items-center h-100">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="docTypePie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Document Type Distribution</h5>
          <div id="documentTypePie" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="docTypeLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Document Type Distribution</h5>
          <div id="documentTypeLine" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="docTypeScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Document Type Distribution</h5>
          <div id="documentTypeScatter" class="d-flex justify-content-center align-items-center h-100"></div>
        </div>
      </div>
    </div>
  </div>
</div>


  {{-- REVIEW NEXT 6 MONTH START --}}
  <div class="col-sm-6">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#reviewSixBar" type="button" role="tab" aria-controls="bar" aria-selected="true">
                <i class="fas fa-chart-bar"></i>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#reviewSixPie" type="button" role="tab" aria-controls="pie" aria-selected="false">
                <i class="fas fa-chart-pie"></i>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#reviewSixLine" type="button" role="tab" aria-controls="line" aria-selected="false">
                <i class="fas fa-chart-line"></i>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#reviewSixScatter" type="button" role="tab" aria-controls="scatter" aria-selected="false">
                <i class="bi bi-cloud"></i>
            </button>
        </li>
    </ul>

    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="reviewSixBar" role="tabpanel" aria-labelledby="bar-tab">
            <div class="card border-0">
                <div class="card-body">
                    <h5 class="card-title">Review in Next 6 Months</h5>
                    <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewSixBar">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="reviewSixPie" role="tabpanel" aria-labelledby="pie-tab">
            <div class="card border-0">
                <div class="card-body">
                    <h5 class="card-title">Review in Next 6 Month</h5>
                    <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewSixPie"></div>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="reviewSixLine" role="tabpanel" aria-labelledby="line-tab">
            <div class="card border-0">
                <div class="card-body">
                    <h5 class="card-title">Review in Next 6 Months</h5>
                    <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewSixLine"></div>
                </div>
            </div>
        </div>

        <div class="tab-pane fade" id="reviewSixScatter" role="tabpanel" aria-labelledby="scatter-tab">
            <div class="card border-0">
                <div class="card-body">
                    <h5 class="card-title">Review in Next 6 Months </h5>
                    <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewSixScatter"></div>
                </div>
            </div>
        </div>
    </div>
</div>

  {{-- REVIEW NEXT 6 MONTH END --}}


</div>

<div class="my-4 row">

  {{-- REVIEW NEXT 1 YEAR START --}}
  <div class="col-sm-6">
  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#reviewOneBar" type="button" role="tab" aria-controls="bar" aria-selected="true">
        <i class="fas fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#reviewOnePie" type="button" role="tab" aria-controls="pie" aria-selected="false">
        <i class="fas fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#reviewOneLine" type="button" role="tab" aria-controls="line" aria-selected="false">
        <i class="fas fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#reviewOneScatter" type="button" role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="reviewOneBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 1 Year</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewOneBar">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="reviewOnePie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 1 Year</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewOnePie"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="reviewOneLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 1 Year</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewOneLine"></div>
        </div>
      </div>
    </div>

    <div class="tab-pane fade" id="reviewOneScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 1 Year</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewOneScatter"></div>
        </div>
      </div>
    </div>
  </div>
</div>
 {{-- REVIEW NEXT 1 YEAR END --}}

  {{-- REVIEW NEXT 2 YEAR START --}}
<div class="col-sm-6">
  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#reviewTwoBar" type="button"
        role="tab" aria-controls="reviewTwoBar" aria-selected="true">
        <i class="fas fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#reviewTwoPie" type="button"
        role="tab" aria-controls="reviewTwoPie" aria-selected="false">
        <i class="fas fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#reviewTwoLine" type="button"
        role="tab" aria-controls="reviewTwoLine" aria-selected="false">
        <i class="fas fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#reviewTwoScatter" type="button"
        role="tab" aria-controls="reviewTwoScatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="reviewTwoBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 2 Years</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewTwoBar">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="reviewTwoPie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 2 Years</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewTwoPie"></div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="reviewTwoLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 2 Years</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewTwoLine"></div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="reviewTwoScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Review in Next 2 Years</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentReviewTwoScatter"></div>
        </div>
      </div>
    </div>
  </div>
</div>

  {{-- REVIEW NEXT 2 YEAR END --}}
</div>

<div class="my-4 row">

  {{-- ORIGINATOR DISTRIBUTION START --}}
<div class="col-sm-6">
  <!-- Tab buttons for Bar, Pie, Line, and Scatter charts -->
  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#originatorDistBar" type="button" role="tab" aria-controls="home" aria-selected="true">
        <i class="fa fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#originatorDistPie" type="button" role="tab" aria-controls="profile" aria-selected="false">
        <i class="fa fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#originatorDistLine" type="button" role="tab" aria-controls="line" aria-selected="false">
        <i class="fa fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#originatorDistScatter" type="button" role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="originatorDistBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Originator Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentOriginatorDistributionBar">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="originatorDistPie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Originator Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentOriginatorDistributionPie"></div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="originatorDistLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Originator Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentOriginatorDistributionLine"></div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="originatorDistScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Originator Distribution</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentOriginatorDistributionScatter"></div>
        </div>
      </div>
    </div>
  </div>
</div>


  {{-- ORIGINATOR DISTRIBUTION END --}}


  {{-- DOCUMENT BY STATUS START --}}
  <div class="col-sm-6">
  <!-- Tab buttons for Bar, Pie, Line, and Scatter charts -->
  <ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="bar-tab" data-bs-toggle="tab" data-bs-target="#documentStatusBar" type="button" role="tab" aria-controls="home" aria-selected="true">
        <i class="fa fa-chart-bar"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="pie-tab" data-bs-toggle="tab" data-bs-target="#documentStatusPie" type="button" role="tab" aria-controls="profile" aria-selected="false">
        <i class="fa fa-chart-pie"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="line-tab" data-bs-toggle="tab" data-bs-target="#documentStatusLine" type="button" role="tab" aria-controls="line" aria-selected="false">
        <i class="fa fa-chart-line"></i>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="scatter-tab" data-bs-toggle="tab" data-bs-target="#documentStatusScatter" type="button" role="tab" aria-controls="scatter" aria-selected="false">
        <i class="bi bi-cloud"></i>
      </button>
    </li>
  </ul>

  <div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="documentStatusBar" role="tabpanel" aria-labelledby="bar-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Documents by Status</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentCategoryChartBar">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="documentStatusPie" role="tabpanel" aria-labelledby="pie-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Documents by Status</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentCategoryChartPie"></div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="documentStatusLine" role="tabpanel" aria-labelledby="line-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Documents by Status</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentCategoryChartLine"></div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="documentStatusScatter" role="tabpanel" aria-labelledby="scatter-tab">
      <div class="card border-0">
        <div class="card-body">
          <h5 class="card-title">Documents by Status</h5>
          <div class="card-text d-flex justify-content-center align-items-center h-100" id="documentCategoryChartScatter"></div>
        </div>
      </div>
    </div>
  </div>
</div>

  {{-- DOCUMENT BY STATUS END --}}

</div>


<!-- Container for the chart -->
{{-- ==========================Deviations================================ --}}
{{-- ==========================Change Control================================ --}}
{{-- ==========================Global Change Control================================ --}}
{{-- ==========================Action Item================================ --}}
{{-- ================================================Extension================================================ --}}










<!-- Change Control Graph Starts -->

<!-- <div style="display: flex; justify-content: space-between; width: 100%; padding: 20px;">

  <div id="change-control" 
       class="sub-head" 
       style="cursor: pointer;" 
       onclick="toggleChangeControlGraphs()">Change Control</div>

  <div id="all-records" 
       class="sub-head" 
       style="cursor: pointer; 
              background-color: #eca035; 
              color: #000; 
              padding: 10px 20px; 
              font-size: 16px; 
              font-weight: bold; 
              text-align: center; 
              border-radius: 50px; 
              width: auto; 
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
              transition: transform 0.2s, background-color 0.3s;"
       onclick="toggleTable()" 
       onmouseover="this.style.backgroundColor='#388e3c'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px;">📋</span>
    Change Control Table
  </div>

</div> -->

<div style="display: flex; justify-content: space-between; align-items: center; padding: 20px; width: 100%; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Change Control Section -->
  <div id="change-control" 
     style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
     onclick="toggleChangeControlGraphs()" 
     onmouseover="this.style.color='#000';" 
     onmouseout="this.style.color='#eca035';">
     <i class="fas fa-sync-alt" style="margin-right: 8px;"></i>  <!-- Icon Added -->
    Change Control
</div>


  <!-- Change Control Table Button -->
  <div id="all-records" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;"
       onclick="toggleTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
    <span style="margin-right: 8px; font-size: 20px;">📋</span> Change Control Table
  </div>

</div>
<br>


<!-- Container for the Buttons (Initially Hidden) -->

  <!-- Chart Buttons -->
   <div>
   <div id="chartButtonscc" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barButtoncc" class="btn btn-primary" onclick="showccBarChart()">
      <i class="fas fa-chart-bar"></i>
    </button>
    <button id="pieButtoncc" class="btn btn-primary" onclick="showccPieChart()">
      <i class="fas fa-chart-pie"></i>
    </button>
    <button id="lineButtoncc" class="btn btn-primary" onclick="showLineccChart()">
      <i class="fas fa-chart-line"></i>
    </button>
    <button id="scatterButtoncc" class="btn btn-primary" onclick="showScatterccChart()">
      <i class="bi bi-cloud"></i>
    </button>
    <div>
    <a class="btn" href="{{ url('rcms/action-items-create') }}">
      <button class="btn btn-success" style="background-color: #eca035; color: rgb(14, 8, 8); border: none; border-radius: 5px; padding: 10px 20px; font-size: 16px; cursor: pointer; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);"
      >Launch Action Item</button>
    </a>
  </div>
  </div>
   <!-- Launch Action Item -->

   </div>






<div id="ChangeControlCC" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization of Change Control</h4>
      <div class="spinner-container" id="loaderChangeControlInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Change Control</h4>
      <div class="spinner-container" id="loaderChangeControlPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeChangeControl" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeChangeControl" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Site</h4>
      <div class="spinner-container" id="loaderChangeControlSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelChangeControl" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelChangeControl" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Status</h4>
      <div class="spinner-container" id="loaderChangeControlStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>


<div id="ChangeControlPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderChangeControlInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Change Control</h4>
      <div class="spinner-container" id="loaderChangeControlPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeChangeControlPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeChangeControlPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Site</h4>
      <div class="spinner-container" id="loaderChangeControlSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlSiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelChangeControlPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelChangeControlPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Status</h4>
      <div class="spinner-container" id="loaderChangeControlStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ChangeControlLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderChangeControlInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Change Control</h4>
      <div class="spinner-container" id="loaderChangeControlPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeChangeControlLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeChangeControlLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Site</h4>
      <div class="spinner-container" id="loaderChangeControlSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelChangeControlLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelChangeControlLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Status</h4>
      <div class="spinner-container" id="loaderChangeControlStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>


<div id="ChangeControlScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderChangeControlInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Change Control</h4>
      <div class="spinner-container" id="loaderChangeControlPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeChangeControlScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeChangeControlScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Site</h4>
      <div class="spinner-container" id="loaderChangeControlSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlSiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelChangeControlScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelChangeControlScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Change Control by Status</h4>
      <div class="spinner-container" id="loaderChangeControlStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ChangeControlStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>

<script>
let chartsChangeControl = false;

function toggleChangeControlGraphs() {
  const graphContainers = [
    document.getElementById('ChangeControlCC'),
    document.getElementById('ChangeControlPie'),
    document.getElementById('ChangeControlLine'),
    document.getElementById('ChangeControlScatter'),
    
  ];
  const chartButtonscc = document.getElementById('chartButtonscc');

  // Check if any of the graph containers are currently displayed
  const isVisible = graphContainers.some(container => container.style.display === 'block');

  if (isVisible) {
    // Hide all the graph containers and the buttons
    graphContainers.forEach(container => container.style.display = 'none');
    chartButtonscc.style.display = 'none'; // Hide the buttons when graphs are hidden
  } else {
    // Show the first graph container and the buttons
    graphContainers[0].style.display = 'block'; // Default to ChangeControlCC
    chartButtonscc.style.display = 'block'; // Show the buttons when charts are visible
    
    // Initialize charts if not already initialized
    if (!chartsChangeControl) {
      initializeChangeControlCharts();
      chartsChangeControl = true;
    }
  }
}


  // Function to show Bar Chart
function showccBarChart() {
  const barChartContainer = document.getElementById('ChangeControlCC');
  const pieChartContainer = document.getElementById('ChangeControlPie');
  const lineChartContainer = document.getElementById('ChangeControlLine');  
  const scatterChartContainer = document.getElementById('ChangeControlScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barButtoncc').classList.add('btn-active');
  document.getElementById('pieButtoncc').classList.remove('btn-active');
  document.getElementById('lineButtoncc').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtoncc').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showccPieChart() {
  const barChartContainer = document.getElementById('ChangeControlCC');
  const pieChartContainer = document.getElementById('ChangeControlPie');
  const lineChartContainer = document.getElementById('ChangeControlLine');  
  const scatterChartContainer = document.getElementById('ChangeControlScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieButtoncc').classList.add('btn-active');
  document.getElementById('barButtoncc').classList.remove('btn-active');
  document.getElementById('lineButtoncc').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtoncc').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showLineccChart() {
  const barChartContainer = document.getElementById('ChangeControlCC');
  const pieChartContainer = document.getElementById('ChangeControlPie');
  const lineChartContainer = document.getElementById('ChangeControlLine');  
  const scatterChartContainer = document.getElementById('ChangeControlScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('lineButtoncc').classList.add('btn-active');
  document.getElementById('barButtoncc').classList.remove('btn-active');
  document.getElementById('pieButtoncc').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('scatterButtoncc').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showScatterccChart() {
  const scatterChartContainer = document.getElementById('ChangeControlScatter');  
  const barChartContainer = document.getElementById('ChangeControlCC');
  const pieChartContainer = document.getElementById('ChangeControlPie');
  const lineChartContainer = document.getElementById('ChangeControlLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterButtoncc').classList.add('btn-active');
  document.getElementById('barButtoncc').classList.remove('btn-active');
  document.getElementById('pieButtoncc').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('lineButtoncc').classList.remove('btn-active'); // Deactivate line button
}


  function initializeChangeControlCharts() {
    // Initial Categorization
    fetch('/api/change-control-initial-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

                // Hide loader and show the chart
        document.getElementById('loaderChangeControlInitialCategorization').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlInitialCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Change Control',
              data: counts,
              backgroundColor: ['#003366', '#003366', '#003366'],
              borderColor: ['#0000', '#0000', '#0000'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Post Categorization
    fetch('/api/change-control-post-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

                // Hide loader and show the chart
                document.getElementById('loaderChangeControlPostCategorization').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlPostCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Change Control',
              data: counts,
              backgroundColor: ['#ff6347', '#ff6347', '#ff6347'], // Changed background colors (Blue, Tomato, Green)
              borderColor: ['#ff6347', '#ff6347', '#ff6347'],    // Changed border colors (Tomato, OrangeRed, Green)
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Delayed and On Time
    fetch('/api/change-control-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {

                // Hide loader and show the chart
                document.getElementById('loaderDelayedOntimeChangeControl').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeChangeControl');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'Change Control',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#1e23cb', '#1e23cb'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/change-control-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

                // Hide loader and show the chart
                document.getElementById('loaderChangeControlSiteRecords').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlSiteRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#ffa726', '#ffa726', '#ffa726'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/change-control-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

                // Hide loader and show the chart
                document.getElementById('loaderPriorityLevelChangeControl').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelChangeControl');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Change Control',
              data: counts,
              backgroundColor: ['#2ecc71', '#2ecc71', '#2ecc71'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/change-control-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

                // Hide loader and show the chart
                document.getElementById('loaderChangeControlStatusRecords').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#996633', '#996633', '#996633'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

      // Initialize Pie Charts
  fetch('/api/change-control-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderChangeControlInitialCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlInitialCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Change Control',
            data: counts,
            backgroundColor: ['#9b59b6', '#9b59b6', '#9b59b6', '#9b59b6', '#9b59b6'],
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, // This will allow the chart to scale
          aspectRatio: 1,
         }
      });
    });

  fetch('/api/change-control-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                      // Hide loader and show the chart
        document.getElementById('loaderChangeControlPostCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlPostCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Change Control',
            data: counts,
            backgroundColor: [
              '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', 
              '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c', '#e74c3c'
            ],
            borderColor: '#fff',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

    fetch('/api/change-control-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                    // Hide loader and show the chart
                    document.getElementById('loaderDelayedOntimeChangeControlPie').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeChangeControlPie');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Change Control',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#ff0066', '#ff0066'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/change-control-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlSiteRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlSiteRecordsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#009900', '#009900', '#009900', '#009900', '#009900'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/change-control-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderPriorityLevelChangeControlPie').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelChangeControlPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Change Control',
          data: counts,
          backgroundColor: ['#ffcc00', '#ffcc00', '#ffcc00'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });


  fetch('/api/change-control-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlStatusRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlStatusRecordsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#66bb6a', '#66bb6a', '#66bb6a'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

// Audit proigram for line chart 
// Initialize Line Charts
fetch('/api/change-control-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlInitialCategorizationLine').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlInitialCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Chnage Control',
          data: counts,
          backgroundColor: 'rgb(255, 153, 51)',
          borderColor: '#000',
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/change-control-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlPostCategorizationLine').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlPostCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Change Control',
          data: counts,
          backgroundColor: 'rgb(204, 153, 0)', 
          borderColor: '#cc9900', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/change-control-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                    // Hide loader and show the chart
                    document.getElementById('loaderDelayedOntimeChangeControlLine').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeChangeControlLine');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Change Control',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgba(76, 175, 80, 0.2)', 
          borderColor: '#4caf50', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/change-control-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlSiteRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlSiteRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(236, 160, 53, 0.2)', // Light golden orange
          borderColor: '#eca035', // Golden orange
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/change-control-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderPriorityLevelChangeControlLine').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelChangeControlLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Change Control',
          data: counts,
          backgroundColor: 'rgba(243, 156, 18, 0.2)', // Light orange
          borderColor: '#f39c12', // Solid orange
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/change-control-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlStatusRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlStatusRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(255, 87, 34, 0.2)', // Light red
          borderColor: '#f44336', // Solid red
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Audit program for Scatter chart 
// Initialize Scatter Charts
fetch('/api/change-control-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlInitialCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlInitialCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Change Control',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(0, 51, 153)', 
          borderColor: '#003399', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/change-control-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlPostCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlPostCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Change Control',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(46, 204, 113, 0.6)', 
          borderColor: '#2ecc71', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/change-control-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                    // Hide loader and show the chart
                    document.getElementById('loaderDelayedOntimeChangeControlScatter').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeChangeControlScatter');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Change Control',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgba(76, 175, 80, 0.6)', // Light green with some opacity
          borderColor: '#4caf50', // Solid green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/change-control-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlSiteRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlSiteRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(102, 102, 153)', 
          borderColor: '#666699',
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/change-control-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderPriorityLevelChangeControlScatter').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelChangeControlScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Change Control',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(64, 64, 64, 0.6)', 
          borderColor: '#404040', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/change-control-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                    // Hide loader and show the chart
                    document.getElementById('loaderChangeControlStatusRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('ChangeControlStatusRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(255, 99, 71, 0.6)', // Light tomato red (softer red)
          borderColor: '#ff6347', // Tomato red (softer red)
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

  }
</script>

<!-- change control records  -->

<!-- Table that will be shown on click -->
<div id="changeControlTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="controlTable" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Classifiaction of Changes</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTable()" style="margin-top: 10px;">Close</button>
</div>

<style>
  .table-wrapper {
    max-width: 100%;
    overflow-x: auto; 
    overflow-y: auto; 
    max-height: 220px; 
  }

    #controlTable th {
    position: sticky;
    top: 0;
    background: linear-gradient(to right, #eca035, #eca035);
    z-index: 1;
  }

  @media (max-width: 768px) {
    #controlTable th, #controlTable td {
      padding: 8px;
      font-size: 12px;
    }

    #controlTable {
      font-size: 10px;
    }
  }

  @media (max-width: 480px) {
    #controlTable th, #controlTable td {
      padding: 6px;
      font-size: 10px;
    }

    #controlTable {
      font-size: 8px;
    }

    #changeControlTable {
      overflow-x: auto;
      display: block;
    }
  }
</style>
<script>
function toggleTable() {
  const table = document.getElementById('changeControlTable');
  table.style.display = table.style.display === 'none' ? 'block' : 'none';
}
</script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<script>
    function fetchRecords() {
        $.ajax({
            url: '{{ route('api.records.cc') }}', 
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#changeControlTable tbody');
                tableBody.empty(); 

              
                $.each(response, function(index, record) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + record.id + '</td>';
                    row += '<td>' + record.record + '</td>';
                    row += '<td>' + record.intiation_date + '</td>';
                    row += '<td>' + record.Initiator_Group + '</td>';
                    row += '<td>' + record.severity_level1 + '</td>';
                    row += '<td>' + record.short_description + '</td>';
                    row += '<td>' + record.due_date + '</td>';
                    row += '<td>' + record.closure_approved_on + '</td>';
                    row += '<td>' + record.status + '</td>';
                    row += '</tr>';

                  
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
              
              }
        });
    }

    function toggleTable() {
        var table = document.getElementById("changeControlTable");
       
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchRecords(); 
        } else {
            table.style.display = "none";
        }
    }
</script>
<style>
 
 table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    padding: 12px;
    border: 1px solid #ddd;
  }
  th {
    background-color: #eca035;
    color: white;
  }
  td {
    background-color: white;
  }
  tr:nth-child(even) td {
    background-color: #f2f2f2;
  }
</style>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<style>
  table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    padding: 12px;
    border: 1px solid #ddd;
  }
  th {
    background-color: #eca035;
    color: white;
  }
  td {
    background-color: white;
  }
  tr:nth-child(even) td {
    background-color: #f2f2f2;
  }
  td[colspan="9"] {
    font-weight: bold;
    color: #888;
  }
</style>

<!-- change control records  -->





<!-- Change Control Graph Ends -->


<!-- Deviation Graph Starts -->

<div style="display: flex; justify-content: space-between; align-items: center; padding: 20px; width: 100%; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Deviation Section -->
  <div id="deviation-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleDeviationGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-exclamation-circle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Deviation
  </div>

  <!-- Deviation Table Button -->
  <div id="deviation-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableDeviation()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Deviation Table
  </div>

</div>




<!-- Container for the Buttons (Initially Hidden) -->
<div id="chartButtonsdeviation" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="barButtondeviation" class="btn btn-primary" onclick="showBardeviationChart()">
    <i class="fas fa-chart-bar"></i> 
</button>
<button id="pieButtondeviation" class="btn btn-primary" onclick="showPiedeviationChart()">
    <i class="fas fa-chart-pie"></i> 
</button>
<button id="lineButtondeviation" class="btn btn-primary" onclick="showLinedeviationChart()">
    <i class="fas fa-chart-line"></i> 
</button>
<button id="scatterButtondeviation" class="btn btn-primary" onclick="showScatterdeviationChart()">
<i class="bi bi-cloud"></i> 
</button>

</div>

<div id="DeviationCC" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Deviation</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntime" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeDeviation" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLevel" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelDeviation" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="DeviationPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderdeviationInitialCategorizationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationInitialCategorizationpie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Deviation</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderdeviationPostCategorizationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationPostCategorizationpie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimedeviationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeDeviationpie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsdeviationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationSiteRecordspie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLeveldeviationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelDeviationpie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsdeviationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationStatusRecordspie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="DeviationLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderdeviationInitialCategorizationline" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationInitialCategorizationline" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Deviation</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderdeviationPostCategorizationline" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationPostCategorizationline" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimedeviationline" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeDeviationline" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsdeviationline" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationSiteRecordsline" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLeveldeviationline" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelDeviationline" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsdeviationline" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationStatusRecordsline" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="DeviationScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderdeviationInitialCategorizationscatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationInitialCategorizationscatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Deviation</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderdeviationPostCategorizationscatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationPostCategorizationscatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimedeviationscatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeDeviationscatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsdeviationscatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationSiteRecordsscatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLeveldeviationscatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelDeviationscatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Deviation by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsdeviationscatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DeviationStatusRecordsscatter" style="display: none;"></canvas>
    </div>
  </div>
</div>

<script>
  let chartsDeviation = false;

function toggleDeviationGraphs() {
  const graphContainers = [
    document.getElementById('DeviationCC'),
    document.getElementById('DeviationPie'),
    document.getElementById('DeviationLine'),
    document.getElementById('DeviationScatter')
  ];
  const chartButtonsdeviation = document.getElementById('chartButtonsdeviation');

  // Check if any of the graph containers are currently displayed
  const isVisible = graphContainers.some(container => container.style.display === 'block');

  if (isVisible) {
    // Hide all the graph containers and the buttons
    graphContainers.forEach(container => container.style.display = 'none');
    chartButtonsdeviation.style.display = 'none'; // Hide the buttons when graphs are hidden
  } else {
    // Show the first graph container and the buttons
    graphContainers[0].style.display = 'block'; // Default to DeviationCC
    chartButtonsdeviation.style.display = 'block'; // Show the buttons when charts are visible
    
    // Initialize charts if not already initialized
    if (!chartsDeviation) {
      initializeDeviationCharts();
      chartsDeviation = true;
    }
  }
}


  // Function to show Bar Chart
function showBardeviationChart() {
  const barChartContainer = document.getElementById('DeviationCC');
  const pieChartContainer = document.getElementById('DeviationPie');
  const lineChartContainer = document.getElementById('DeviationLine');  
  const scatterChartContainer = document.getElementById('DeviationScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barButtondeviation').classList.add('btn-active');
  document.getElementById('pieButtondeviation').classList.remove('btn-active');
  document.getElementById('lineButtondeviation').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtondeviation').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showPiedeviationChart() {
  const barChartContainer = document.getElementById('DeviationCC');
  const pieChartContainer = document.getElementById('DeviationPie');
  const lineChartContainer = document.getElementById('DeviationLine');  
  const scatterChartContainer = document.getElementById('DeviationScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieButtondeviation').classList.add('btn-active');
  document.getElementById('barButtondeviation').classList.remove('btn-active');
  document.getElementById('lineButtondeviation').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtondeviation').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showLinedeviationChart() {
  const barChartContainer = document.getElementById('DeviationCC');
  const pieChartContainer = document.getElementById('DeviationPie');
  const lineChartContainer = document.getElementById('DeviationLine');  
  const scatterChartContainer = document.getElementById('DeviationScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('lineButtondeviation').classList.add('btn-active');
  document.getElementById('barButtondeviation').classList.remove('btn-active');
  document.getElementById('pieButtondeviation').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('scatterButtondeviation').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showScatterdeviationChart() {
  const scatterChartContainer = document.getElementById('DeviationScatter');  
  const barChartContainer = document.getElementById('DeviationCC');
  const pieChartContainer = document.getElementById('DeviationPie');
  const lineChartContainer = document.getElementById('DeviationLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterButtondeviation').classList.add('btn-active');
  document.getElementById('barButtondeviation').classList.remove('btn-active');
  document.getElementById('pieButtondeviation').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('lineButtondeviation').classList.remove('btn-active'); // Deactivate line button
}


  function initializeDeviationCharts() {
    // Initialize Bar Charts
  fetch('/api/Deviation-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderInitialCategorization').style.display = 'none';
        const chartElement = document.getElementById('DeviationInitialCategorization');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'bar',
        data: {
          labels: categories,
          datasets: [{
            label: 'Deviation',
            data: counts,
            backgroundColor: ['#76d7c4', '#76d7c4', '#76d7c4'], // Soft blue, soft green, and warm yellow
            borderColor: ['#0000', '#0000', '#0000'],     // Darker blue, dark green, and orange
            borderWidth: 1,
          }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
      });
    });

  fetch('/api/Deviation-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderPostCategorization').style.display = 'none';
        const chartElement = document.getElementById('DeviationPostCategorization');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'bar',
        data: {
          labels: categories,
          datasets: [{
            label: 'Deviation',
            data: counts,
            backgroundColor: ['#fd79a8', '#fd79a8', '#fd79a8'], // Soft purple, soft pink, and mint green
            borderColor: ['#0000', '#0000', '#0000'],     // Darker purple, darker pink, and dark mint green
            borderWidth: 1,
          }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
      });
    });

    // Delayed and On Time
    fetch('/api/Deviation-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {

                            // Hide loader and show the chart
        document.getElementById('loaderDelayedOntime').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeDeviation');
        chartElement.style.display = 'block';
        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'Deviation',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#e74c3c', '#e74c3c'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/Deviation-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

         // Hide loader and show the chart
        document.getElementById('loaderSiteRecords').style.display = 'none';
        const chartElement = document.getElementById('DeviationSiteRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#8e44ad', '#8e44ad', '#8e44ad'], 
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/Deviation-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

                            // Hide loader and show the chart
        document.getElementById('loaderPriorityLevel').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelDeviation');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Deviation',
              data: counts,
              backgroundColor: ['#1abc9c', '#1abc9c', '#1abc9c'],  // Red, Purple, and Teal
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/Deviation-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

         // Hide loader and show the chart
        document.getElementById('loaderStatusRecords').style.display = 'none';
        const chartElement = document.getElementById('DeviationStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#0c5a4a', '#0c5a4a', '#0c5a4a'],  // Yellow, Purple, and Teal
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });


  // Initialize Pie Charts
  fetch('/api/Deviation-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderdeviationInitialCategorizationpie').style.display = 'none';
        const chartElement = document.getElementById('DeviationInitialCategorizationpie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Deviation',
            data: counts,
            backgroundColor: ['#34495e', '#34495e', '#34495e', '#34495e', '#34495e'],  // Teal, Yellow, Purple, Red, Dark Gray
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, // This will allow the chart to scale
          aspectRatio: 1,
         }
      });
    });

  fetch('/api/Deviation-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderdeviationPostCategorizationpie').style.display = 'none';
        const chartElement = document.getElementById('DeviationPostCategorizationpie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Deviation',
            data: counts,
            backgroundColor: [
          '#71180e', '#71180e', '#71180e', '#71180e', '#71180e', 
          '#71180e', '#71180e', '#71180e', '#71180e', '#71180e'
        ],
            borderColor: '#fff',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

  fetch('/api/Deviation-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                        // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimedeviationpie').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeDeviationpie');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Deviation',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#669999', '#669999'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/Deviation-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                        // Hide loader and show the chart
        document.getElementById('loaderSiteRecordsdeviationpie').style.display = 'none';
        const chartElement = document.getElementById('DeviationSiteRecordspie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#00bcd4', '#00bcd4', '#00bcd4', '#00bcd4', '#00bcd4']
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/Deviation-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

          // Hide loader and show the chart
        document.getElementById('loaderPriorityLeveldeviationpie').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelDeviationpie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts,
          backgroundColor: ['#e3301c', '#e3301c', '#e3301c']
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });


  fetch('/api/Deviation-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
                        document.getElementById('loaderStatusRecordsdeviationpie').style.display = 'none';
        const chartElement = document.getElementById('DeviationStatusRecordspie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#8e44ad', '#8e44ad', '#8e44ad']
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

// Audit proigram for line chart 
// Initialize Line Charts
fetch('/api/Deviation-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
                        document.getElementById('loaderdeviationInitialCategorizationline').style.display = 'none';
        const chartElement = document.getElementById('DeviationInitialCategorizationline');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts,
          backgroundColor: 'rgba(231, 76, 60, 0.2)', // Light red
          borderColor: '#e74c3c', // Red
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/Deviation-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
                        document.getElementById('loaderdeviationPostCategorizationline').style.display = 'none';
        const chartElement = document.getElementById('DeviationPostCategorizationline');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts,
          backgroundColor: 'rgba(39, 174, 96, 0.2)', // Light green
          borderColor: '#27ae60', // Dark green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/Deviation-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                        // Hide loader and show the chart
                        document.getElementById('loaderDelayedOntimedeviationline').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeDeviationline');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Deviation',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgba(255, 87, 34, 0.2)', // Light orange
          borderColor: '#ff5722', // Red
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/Deviation-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                        // Hide loader and show the chart
        document.getElementById('loaderSiteRecordsdeviationline').style.display = 'none';
        const chartElement = document.getElementById('DeviationSiteRecordsline');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgb(255, 153, 255))', 
          borderColor: '#ff99ff', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/Deviation-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
         document.getElementById('loaderPriorityLeveldeviationline').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelDeviationline');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts,
          backgroundColor: 'rgb(0, 51, 0)', 
          borderColor: '#003300',
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/Deviation-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderStatusRecordsdeviationline').style.display = 'none';
        const chartElement = document.getElementById('DeviationStatusRecordsline');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgb(0, 0, 102)', 
          borderColor: '#000066', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Audit program for Scatter chart 
// Initialize Scatter Charts
fetch('/api/Deviation-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderdeviationInitialCategorizationscatter').style.display = 'none';
        const chartElement = document.getElementById('DeviationInitialCategorizationscatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(41, 128, 185, 0.6)', 
          borderColor: '#2980b9',
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/Deviation-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderdeviationPostCategorizationscatter').style.display = 'none';
        const chartElement = document.getElementById('DeviationPostCategorizationscatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(9, 42, 23)', 
          borderColor: '#092a17', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/Deviation-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                        // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimedeviationscatter').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeDeviationscatter');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Deviation',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgba(0, 204, 102, 0.6)', 
          borderColor: '#00b33c', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/Deviation-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                        // Hide loader and show the chart
        document.getElementById('loaderSiteRecordsdeviationscatter').style.display = 'none';
        const chartElement = document.getElementById('DeviationSiteRecordsscatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(153, 0, 0)', 
          borderColor: '#990000',
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/Deviation-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderPriorityLeveldeviationscatter').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelDeviationscatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Deviation',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(255, 165, 0, 0.6)',
          borderColor: '#ff8c00', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/Deviation-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderStatusRecordsdeviationscatter').style.display = 'none';
        const chartElement = document.getElementById('DeviationStatusRecordsscatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(255, 99, 71, 0.6)', 
          borderColor: '#e74c3c',
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });
}
</script>



<!-- Deviation records  -->
<div id="deviationTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="deviationTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Initial Deviation Category</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
   <button onclick="toggleTableDeviation()" id="animatedExitButton">
  <span class="icon">&#10006;</span>
</button>
<!-- 
<style>
  @keyframes glowSpin {
    0% {
      transform: rotate(0deg) scale(1);
      box-shadow: 0 0 10px rgba(236, 160, 53, 0.7), 0 0 20px rgba(236, 160, 53, 0.5);
    }
    50% {
      transform: rotate(180deg) scale(1.2);
      box-shadow: 0 0 20px rgba(236, 160, 53, 1), 0 0 30px rgba(236, 160, 53, 0.8);
    }
    100% {
      transform: rotate(360deg) scale(1);
      box-shadow: 0 0 10px rgba(236, 160, 53, 0.7), 0 0 20px rgba(236, 160, 53, 0.5);
    }
  }

  @keyframes hoverEffect {
    0%, 100% {
      transform: translateY(0);
      background: radial-gradient(circle, #ffde85, #eca035);
    }
    50% {
      transform: translateY(-8px);
      background: radial-gradient(circle, #eca035, #d18c30);
      box-shadow: 0 0 25px rgba(236, 160, 53, 0.9);
    }
  }

  #animatedExitButton {
    margin-top: 10px;
    width: 60px;
    height: 60px;
    font-size: 18px;
    font-weight: bold;
    color: white;
    background-color: #eca035;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3), inset 0 0 5px rgba(255, 255, 255, 0.2);
    animation: glowSpin 3s infinite ease-in-out;
    transition: all 0.5s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  #animatedExitButton:hover {
    animation: hoverEffect 0.8s infinite alternate;
    transform: scale(1.1);
    box-shadow: 0 8px 20px rgba(236, 160, 53, 0.7);
  }

  #animatedExitButton:active {
    transform: scale(0.9) rotate(-15deg);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
    background: linear-gradient(135deg,rgb(31, 27, 23), #d18c30);
  }

  .icon {
    font-size: 28px; /* Size of the "X" */
    color: white;
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
  }
</style> -->

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function fetchDeviationRecords() {
        $.ajax({
            url: '{{ route('api.records.dv') }}', // Deviation records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#deviationTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, deviation) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + deviation.id + '</td>';
                    row += '<td>' + deviation.record + '</td>';
                    row += '<td>' + deviation.intiation_date + '</td>';
                    row += '<td>' + deviation.Initiator_Group + '</td>';
                    row += '<td>' + deviation.Deviation_category + '</td>';
                    row += '<td>' + deviation.short_description + '</td>';
                    row += '<td>' + deviation.due_date + '</td>';
                    row += '<td>' + deviation.QA_final_approved_on + '</td>';
                    row += '<td>' + deviation.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    function toggleTableDeviation() {
        var table = document.getElementById("deviationTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchDeviationRecords(); // Fetch Deviation records
        } else {
            table.style.display = "none";
        }
    }
</script>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>



<!-- Deviation records  -->


<!-- Deviation Graph Ends -->


<br>

<!-- Action Item Graphs Starts -->
<div style="display: flex; justify-content: space-between; align-items: center; padding: 20px; width: 100%; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Action Item Section -->
  <div id="action-item-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleActionItemGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-tasks" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Action Item
  </div>

  <!-- Action Item Table Button -->
  <div id="action-item-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableAction()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Action Item Table
  </div>

</div>


<!-- Container for the Buttons (Initially Hidden) -->
<div id="chartActionButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barActionButton" class="btn btn-primary" onclick="showBarActionChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieActionButton" class="btn btn-primary" onclick="showPieActionChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineActionButton" class="btn btn-primary" onclick="showLineActionChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterActionButton" class="btn btn-primary" onclick="showScatterActionChart()"><i class="bi bi-cloud"></i></button>
</div>

<div id="ActionItemCC" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderInitialCategorizationAI" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Action Items</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPostCategorizationAI" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Item Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimeAI" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeActionItem" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsAI" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLevelAI" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelActionItem" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsAI" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- Pie --}}
<div id="ActionItemCCPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderInitialCategorizationAIPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Action Items</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPostCategorizationAIPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Item Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimeAIPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeActionItemPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsAIPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemSiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLevelAIPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelActionItemPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsAIPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- Line --}}
<div id="ActionItemCCLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderInitialCategorizationAILine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Action Items</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPostCategorizationAILine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Item Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimeAILine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeActionItemLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsAILine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLevelAILine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelActionItemLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsAILine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- Scatter --}}
<div id="ActionItemCCScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderInitialCategorizationAIScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Action Items</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPostCategorizationAIScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Item Delay and On Time</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderDelayedOntimeAIScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeActionItemScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Site</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderSiteRecordsAIScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemSiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderPriorityLevelAIScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelActionItemScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Action Items by Status</h4>
      <!-- Loader -->
      <div class="spinner-container" id="loaderStatusRecordsAIScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ActionItemStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>


<script>
    let chartsActionItem = false;

function toggleActionItemGraphs() {
  const graphContainers = [
    document.getElementById('ActionItemCC'),
    document.getElementById('ActionItemCCPie'),
    document.getElementById('ActionItemCCLine'),
    document.getElementById('ActionItemCCScatter')
  ];
  const chartActionButtons = document.getElementById('chartActionButtons');

  // Check if any of the graph containers are currently displayed
  const isVisible = graphContainers.some(container => container.style.display === 'block');

  if (isVisible) {
    // Hide all the graph containers and the buttons
    graphContainers.forEach(container => container.style.display = 'none');
    chartActionButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
  } else {
    // Show the first graph container and the buttons
    graphContainers[0].style.display = 'block'; // Default to ActionItemCC
    chartActionButtons.style.display = 'block'; // Show the buttons when charts are visible
    
    // Initialize charts if not already initialized
    if (!chartsActionItem) {
      initializeActionItemCharts();
      chartsActionItem = true;
    }
  }
}

    // Function to show Bar Chart
    function showBarActionChart() {
        const barChartContainer = document.getElementById('ActionItemCC');
        const pieChartContainer = document.getElementById('ActionItemCCPie');
        const lineChartContainer = document.getElementById('ActionItemCCLine');
        const scatterChartContainer = document.getElementById(
        'ActionItemCCScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barActionButton').classList.add('btn-active');
        document.getElementById('pieActionButton').classList.remove('btn-active');
        document.getElementById('lineActionButton').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterActionButton').classList.remove('btn-active'); // Deactivate scatter button
    }

    // Function to show Pie Chart
    function showPieActionChart() {
        const barChartContainer = document.getElementById('ActionItemCC');
        const pieChartContainer = document.getElementById('ActionItemCCPie');
        const lineChartContainer = document.getElementById('ActionItemCCLine');
        const scatterChartContainer = document.getElementById('ActionItemCCScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('pieActionButton').classList.add('btn-active');
        document.getElementById('barActionButton').classList.remove('btn-active');
        document.getElementById('lineActionButton').classList.remove('btn-active');
        document.getElementById('scatterActionButton').classList.remove('btn-active');
    }

    // Function to show Line Chart
    function showLineActionChart() {
        const barChartContainer = document.getElementById('ActionItemCC');
        const pieChartContainer = document.getElementById('ActionItemCCPie');
        const lineChartContainer = document.getElementById('ActionItemCCLine');
        const scatterChartContainer = document.getElementById('ActionItemCCScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('lineActionButton').classList.add('btn-active');
        document.getElementById('barActionButton').classList.remove('btn-active');
        document.getElementById('pieActionButton').classList.remove('btn-active');
        document.getElementById('scatterActionButton').classList.remove('btn-active');
    }

    // Function to show Scatter Chart
    function showScatterActionChart() {
        const barChartContainer = document.getElementById('ActionItemCC');
        const pieChartContainer = document.getElementById('ActionItemCCPie');
        const lineChartContainer = document.getElementById('ActionItemCCLine');
        const scatterChartContainer = document.getElementById('ActionItemCCScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('scatterActionButton').classList.add('btn-active');
        document.getElementById('barActionButton').classList.remove('btn-active');
        document.getElementById('pieActionButton').classList.remove('btn-active');
        document.getElementById('lineActionButton').classList.remove('btn-active');
    }


    function initializeActionItemCharts() {

        // Initial Categorization
        fetch('/api/get-action-item-data')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                    // Hide loader and show the chart
                document.getElementById('loaderInitialCategorizationAI').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Action Item',
                            data: counts,
                            backgroundColor: ['#9b59b6', '#9b59b6', '#9b59b6'],  
                            borderColor: ['#ffff', '#ffff', '#ffff'],     
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // post categorization
        fetch('/api/get-action-item-categorization-data')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPostCategorizationAI').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemPostCategorization');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'bar', // Bar chart type
      data: {
        labels: categories, // Categories as labels
        datasets: [{
          label: 'Action Items',
          data: counts, // Counts for each category
          backgroundColor: [
            'rgba(26, 188, 156, 0.6)', 
            'rgba(26, 188, 156, 0.6)',
            'rgba(26, 188, 156, 0.6)'  
          ],
          borderColor: [
            '#000000', 
            '#000000', 
            '#000000'   
          ],

          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: 'Categories' // Title for x-axis
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Counts' // Title for y-axis
            }
          }
        }
      }
    });
  });

       // Delayed and On Time
fetch('/api/charts/documents-by-delayedActionItem')
  .then(response => response.json())
  .then(data => {
    // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeAI').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('delayedOntimeActionItem');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: ['On Time', 'Delayed'], // Labels for bar chart
        datasets: [{
          label: 'Action Items',
          data: [data['On Time'], data['Delayed']], // Data points for each category
          backgroundColor: [
              '#66bb6a', // Lighter Green for On Time
              '#66bb6a'  // Lighter Red for Delayed
            ],
            borderColor: [
              '#000000', 
              '#000000'  
            ],

          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: 'Status' // Title for x-axis
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Counts' // Title for y-axis
            }
          }
        }
      }
    });
  });

       // Site Records
fetch('/api/charts/documents-by-siteActionItem')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    // Hide loader and show the chart
    document.getElementById('loaderSiteRecordsAI').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemSiteRecords');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#4fc3f7', '#4fc3f7', '#4fc3f7'],
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Count'
            }
          }
        }
      }
    });
  });


       // Priority Levels
fetch('/api/ActionItem-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPriorityLevelAI').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('priorityLevelActionItem');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: categories,
        datasets: [{
          label: 'Action Item',
          data: counts,
          backgroundColor: ['#8bc34a', '#8bc34a', '#8bc34a'], 
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Count'
            }
          }
        }
      }
    });
  });

       // Status Records
fetch('/api/charts/action-item-stage-distribution')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderStatusRecordsAI').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemStatusRecords');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#5c6bc0', '#5c6bc0', '#5c6bc0'], 
          borderWidth: 1,
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Count'
            }
          }
        }
      }
    });
  });


       // Initial Categorization - Pie Chart
fetch('/api/get-action-item-data')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderInitialCategorizationAIPie').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemInitialCategorizationPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Action Item',
          data: counts,
          backgroundColor: ['#43a047', '#43a047', '#43a047'], 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

       // Post Categorization - Pie Chart
fetch('/api/get-action-item-categorization-data')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPostCategorizationAIPie').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemPostCategorizationPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Action Item',
          data: counts,
          backgroundColor: ['ff9800', '#ff9800', 'ff9800'], 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });


       // Delayed and On Time - Pie Chart
fetch('/api/charts/documents-by-delayedActionItem')
  .then(response => response.json())
  .then(data => {
    // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeAIPie').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('delayedOntimeActionItemPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Action Item',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#00bcd4', '#00bcd4'], 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });


        // Site Records - Pie Chart
fetch('/api/charts/documents-by-siteActionItem')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    // Hide loader and show the chart
    document.getElementById('loaderSiteRecordsAIPie').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemSiteRecordsPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#8e44ad', '#8e44ad', '#8e44ad'], 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Priority Levels - Pie Chart
fetch('/api/ActionItem-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPriorityLevelAIPie').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('priorityLevelActionItemPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Action Item',
          data: counts,
          backgroundColor: ['#1abc9c', '#1abc9c', '#1abc9c'], 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

        // Status Records - Pie Chart
fetch('/api/charts/action-item-stage-distribution')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderStatusRecordsAIPie').style.display = 'none'; // Updated loader ID
    const chartElement = document.getElementById('ActionItemStatusRecordsPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#16a085', '#16a085', '#16a085'], 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

        // Initial Categorization - Line Chart
        fetch('/api/get-action-item-data')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                    // Hide loader and show the chart
                document.getElementById('loaderInitialCategorizationAILine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Action Item',
                            data: counts,
                            borderColor: '#2980b9', 
                            backgroundColor: 'rgb(41, 128, 185)', 
                            borderWidth: 2,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization - Line Chart
        fetch('/api/get-action-item-categorization-data')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPostCategorizationAILine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Action Item',
                            data: counts,
                            borderColor: '#27ae60', 
                            backgroundColor: 'rgba(39, 174, 96, 0.2)', 
                            borderWidth: 2,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time - Line Chart
        fetch('/api/charts/documents-by-delayedActionItem')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeAILine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeActionItemLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Action Item',
                            data: [data['On Time'], data['Delayed']],
                            borderColor: '#e53935', // Intense red border
                            backgroundColor: 'rgba(229, 57, 53, 0.2)', // Light coral red with transparency
                            borderWidth: 2,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records - Line Chart
        fetch('/api/charts/documents-by-siteActionItem')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderSiteRecordsAILine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#fb8c00', 
                            backgroundColor: 'rgb(251, 140, 0)', 
                            borderWidth: 2,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels - Line Chart
        fetch('/api/ActionItem-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelAILine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelActionItemLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Action Item',
                            data: counts,
                            borderColor: '#ff99cc', 
                            backgroundColor: 'rgb(255, 153, 204)', 
                            borderWidth: 2,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records - Line Chart
        fetch('/api/charts/action-item-stage-distribution')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderStatusRecordsAILine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#388e3c', 
                            backgroundColor: 'rgba(56, 142, 61, 0.2)', 
                            borderWidth: 2,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
        // Initial Categorization - Scatter Chart
        fetch('/api/get-action-item-data')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);
                const scatterData = categories.map((category, index) => ({
                    x: index + 1, // Assign sequential X values
                    y: counts[index]
                }));

                document.getElementById('loaderInitialCategorizationAIScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Action Item',
                            data: scatterData,
                            backgroundColor: 'rgba(41, 128, 185, 0.2)',
                            borderColor: '#2980b9', 
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Category Index'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Post Categorization - Scatter Chart
        fetch('/api/get-action-item-categorization-data')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);
                const scatterData = categories.map((category, index) => ({
                    x: index + 1, // Assign sequential X values
                    y: counts[index]
                }));

                document.getElementById('loaderPostCategorizationAIScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Action Item',
                            data: scatterData,
                            backgroundColor: 'rgb(153, 255, 153)', 
                            borderColor: '#99ff99', 
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Category Index'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Delayed and On Time - Scatter Chart
        fetch('/api/charts/documents-by-delayedActionItem')
            .then(response => response.json())
            .then(data => {
                const scatterData = [{
                        x: 1,
                        y: data['On Time']
                    },
                    {
                        x: 2,
                        y: data['Delayed']
                    }
                ];

                document.getElementById('loaderDelayedOntimeAIScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeActionItemScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Action Item',
                            data: scatterData,
                            backgroundColor: 'rgba(198, 40, 40, 0.2)', 
                            borderColor: '#c62828', 
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Status'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Site Records - Scatter Chart
        fetch('/api/charts/documents-by-siteActionItem')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);
                const scatterData = divisions.map((division, index) => ({
                    x: index + 1,
                    y: counts[index]
                }));

                document.getElementById('loaderSiteRecordsAIScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Records',
                            data: scatterData,
                            backgroundColor: 'rgba(245, 124, 0, 0.2)', 
                            borderColor: '#f57c00', 
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Division Index'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Priority Levels - Scatter Chart
        fetch('/api/ActionItem-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);
                const scatterData = categories.map((category, index) => ({
                    x: index + 1,
                    y: counts[index]
                }));

                document.getElementById('loaderPriorityLevelAIScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelActionItemScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Action Item',
                            data: scatterData,
                            backgroundColor: 'rgb(102, 0, 255)', 
                            borderColor: '#6600ff', 
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Priority Index'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Status Records - Scatter Chart
        fetch('/api/charts/action-item-stage-distribution')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);
                const scatterData = statuses.map((status, index) => ({
                    x: index + 1,
                    y: counts[index]
                }));

                document.getElementById('loaderStatusRecordsAIScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('ActionItemStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Records',
                            data: scatterData,
                            backgroundColor: 'rgba(56, 142, 60, 0.2)',
                            borderColor: '#388e3c', 
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Status Index'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

    }
</script>



<!-- Action records  -->
<div id="ActionTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="ActionTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Priority</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTableAction()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function fetchActionRecords() {
    $.ajax({
        url: '{{ route('api.records.action') }}', // Ensure this is correct and points to the right endpoint
        method: 'GET',
        success: function(response) {
            console.log('Response:', response); // Log the response to check the data structure
            var tableBody = $('#ActionTableControl tbody');
            tableBody.empty();

            // Check if response is an array or an object and handle accordingly
            if (Array.isArray(response)) {
                $.each(response, function(index, Action) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + Action.id + '</td>';
                    row += '<td>' + Action.record + '</td>';
                    row += '<td>' + Action.intiation_date + '</td>';
                    row += '<td>' + Action.departments + '</td>';
                    row += '<td>' + Action.priority_data + '</td>';
                    row += '<td>' + Action.short_description + '</td>';
                    row += '<td>' + Action.due_date + '</td>';
                    row += '<td>' + Action.qa_varification_on + '</td>';
                    row += '<td>' + Action.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            } else {
                console.log('Unexpected response format', response);
            }
        },
        error: function(xhr, status, error) {
            console.log('Error:', error);
        }
    });
}

function toggleTableAction() {
    var table = document.getElementById("ActionTable");
    if (table.style.display === "none") {
        table.style.display = "block";
        fetchActionRecords(); // Fetch Action records
    } else {
        table.style.display = "none";
    }
}

</script>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>



<!-- Action records  -->



<!-- Action Item Graphs Ends -->


<!-- Due Date Extension Graphs Starts -->
<div style="display: flex; justify-content: space-between; align-items: center; padding: 20px; width: 100%; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px; margin-top: 20px;">

  <!-- Due Date Extension Section -->
  <div class="sub-head" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleDueDateExtensionGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-calendar-alt" style="margin-right: 8px;"></i> 
       Due Date Extension
  </div>

  <!-- Due Date Extension Table Button -->
  <div id="all-records" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleDueDateExtensionTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Due Date Extension Table
  </div>

</div>


<!-- Container for the Buttons (Initially Hidden) -->
<div id="chartButtonsext" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="barButtonext" class="btn btn-primary" onclick="showBarExtChart()"><i class="fas fa-chart-bar"></i></button>
  <button id="pieButtonext" class="btn btn-primary" onclick="showPieExtChart()"><i class="fas fa-chart-pie"></i></button>
  <button id="lineButtonext" class="btn btn-primary" onclick="showLineExtChart()"><i class="fas fa-chart-line"></i></button>
  <button id="scatterButtonext" class="btn btn-primary" onclick="showScatterExtChart()"><i class="bi bi-cloud"></i></button>
</div>

<div id="DueDateExtensionCC" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderInitialCategorizationDDE" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <!-- Loader -->
      <div id="loaderPostCategorizationDDE" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

 <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension Delay and On Time</h4>
      <div id="loaderDelayedOntimeDDE" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDelayedOntime" style="display: none;"></canvas>
    </div> -->

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Site</h4>
      <!-- Loader -->
      <div id="loaderDivisionRecordsDDE" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDivisionRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelDDE" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPriorityLevels" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Status</h4>
      <!-- Loader -->
      <div id="loaderStatusRecordsDDE" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="DueDateExtensionCCPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderDDEInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <!-- Loader -->
      <div id="loaderDDEPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension Delay and On Time</h4>
      <div id="loaderDDEDelayedOntimePie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDelayedOntimePie" style="display: none;"></canvas>
    </div> -->

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Site</h4>
      <!-- Loader -->
      <div id="loaderDDEDivisionRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDivisionRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderDDEPriorityLevelPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPriorityLevelsPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Status</h4>
      <!-- Loader -->
      <div id="loaderDDEStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="DueDateExtensionCCLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderDDEInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <!-- Loader -->
      <div id="loaderDDEPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension Delay and On Time</h4>
      <div id="loaderDDEDelayedOntimeLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDelayedOntimeLine" style="display: none;"></canvas>
    </div> -->

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Site</h4>
      <!-- Loader -->
      <div id="loaderDDEDivisionRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDivisionRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderDDEPriorityLevelLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPriorityLevelsLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Status</h4>
      <!-- Loader -->
      <div id="loaderDDEStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="DueDateExtensionCCScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderDDEInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <!-- Loader -->
      <div id="loaderDDEPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension Delay and On Time</h4>
      <div id="loaderDDEDelayedOntimeScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDelayedOntimeScatter" style="display: none;"></canvas>
    </div> -->

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Site</h4>
      <!-- Loader -->
      <div id="loaderDDEDivisionRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionDivisionRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderDDEPriorityLevelScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionPriorityLevelsScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Due Date Extension by Status</h4>
      <!-- Loader -->
      <div id="loaderDDEStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="DueDateExtensionStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>

<script>
  let chartsDueDateExtension = false;

function toggleDueDateExtensionGraphs() {
  const graphContainers = [
    document.getElementById('DueDateExtensionCC'),
    document.getElementById('DueDateExtensionCCPie'),
    document.getElementById('DueDateExtensionCCLine'),
    document.getElementById('DueDateExtensionCCScatter')
  ];
  const chartButtonsext = document.getElementById('chartButtonsext');

  // Check if any of the graph containers are currently displayed
  const isVisible = graphContainers.some(container => container.style.display === 'block');

  if (isVisible) {
    // Hide all the graph containers and the buttons
    graphContainers.forEach(container => container.style.display = 'none');
    chartButtonsext.style.display = 'none'; // Hide the buttons when graphs are hidden
  } else {
    // Show the first graph container and the buttons
    graphContainers[0].style.display = 'block'; // Default to DueDateExtensionCC
    chartButtonsext.style.display = 'block'; // Show the buttons when charts are visible
    
    // Initialize charts if not already initialized
    if (!chartsDueDateExtension) {
      initializeDueDateExtensionCharts();
      chartsDueDateExtension = true;
    }
  }
}


  // Function to show Bar Chart
function showBarExtChart() {
  const barChartContainer = document.getElementById('DueDateExtensionCC');
  const pieChartContainer = document.getElementById('DueDateExtensionCCPie');
  const lineChartContainer = document.getElementById('DueDateExtensionCCLine');  
  const scatterChartContainer = document.getElementById('DueDateExtensionCCScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barButtonext').classList.add('btn-active');
  document.getElementById('pieButtonext').classList.remove('btn-active');
  document.getElementById('lineButtonext').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtonext').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showPieExtChart() {
  const barChartContainer = document.getElementById('DueDateExtensionCC');
  const pieChartContainer = document.getElementById('DueDateExtensionCCPie');
  const lineChartContainer = document.getElementById('DueDateExtensionCCLine');  
  const scatterChartContainer = document.getElementById('DueDateExtensionCCScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieButtonext').classList.add('btn-active');
  document.getElementById('barButtonext').classList.remove('btn-active');
  document.getElementById('lineButtonext').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtonext').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showLineExtChart() {
  const barChartContainer = document.getElementById('DueDateExtensionCC');
  const pieChartContainer = document.getElementById('DueDateExtensionCCPie');
  const lineChartContainer = document.getElementById('DueDateExtensionCCLine');  
  const scatterChartContainer = document.getElementById('DueDateExtensionCCScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('lineButtonext').classList.add('btn-active');
  document.getElementById('barButtonext').classList.remove('btn-active');
  document.getElementById('pieButtonext').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('scatterButtonext').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showScatterExtChart() {
  const scatterChartContainer = document.getElementById('DueDateExtensionCCScatter');  
  const barChartContainer = document.getElementById('DueDateExtensionCC');
  const pieChartContainer = document.getElementById('DueDateExtensionCCPie');
  const lineChartContainer = document.getElementById('DueDateExtensionCCLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterButtonext').classList.add('btn-active');
  document.getElementById('barButtonext').classList.remove('btn-active');
  document.getElementById('pieButtonext').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('lineButtonext').classList.remove('btn-active'); // Deactivate line button
}

function initializeDueDateExtensionCharts() {
  fetch('/api/DuedateExtension-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderInitialCategorizationDDE').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionInitialCategorization');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'bar',
        data: {
          labels: categories,
          datasets: [{
            label: 'Due Date Extension',
            data: counts,
            backgroundColor: ['#e86c33', '#e86c33', '#e86c33'],  
            borderColor: ['#000000', '#000000', '#000000'],  
            borderWidth: 1,
          }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
      });
    });

  fetch('/api/DuedateExtension-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderPostCategorizationDDE').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPostCategorization');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'bar',
        data: {
          labels: categories,
          datasets: [{
            label: 'Due Date Extension',
            data: counts,
            backgroundColor: ['#93c8ec', '#93c8ec', '#93c8ec'], 
            borderColor: ['#000000', '#000000', ' #000000'],  
            borderWidth: 1,
          }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
      });
    });

    // Delayed and On Time
    fetch('/api/DuedateExtension-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {

                            // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimeDDE').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDelayedOntime');
        chartElement.style.display = 'block';
        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'Due Date Extension',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#ffeb3b', '#ffeb3b'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/DuedateExtension-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

         // Hide loader and show the chart
        document.getElementById('loaderDivisionRecordsDDE').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDivisionRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#ff7043', '#ff7043', '#ff7043'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/DuedateExtension-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

                            // Hide loader and show the chart
        document.getElementById('loaderPriorityLevelDDE').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPriorityLevels');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Due Date Extension',
              data: counts,
              backgroundColor: ['#262626', '#262626', '#262626'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/DuedateExtension-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

         // Hide loader and show the chart
        document.getElementById('loaderStatusRecordsDDE').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#660066', '#660066', '#660066'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });


  // Initialize Pie Charts
  fetch('/api/DuedateExtension-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderDDEInitialCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionInitialCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Due Date Extension',
            data: counts,
            backgroundColor: ['#5bc0de', '#5bc0de', '#5bc0de', '#5bc0de', '#5bc0de'], 
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, 
          aspectRatio: 1,
         }
      });
    });

  fetch('/api/DuedateExtension-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

                          // Hide loader and show the chart
        document.getElementById('loaderDDEPostCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPostCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Due Date Extension',
            data: counts,
            backgroundColor: [
                '#e84393', '#e84393', '#e84393', '#e84393', '#e84393', 
                '#e84393', '#e84393', '#e84393', '#e84393', '#e84393'
              ],
              borderColor: '#000000', 
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

  fetch('/api/DuedateExtension-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                        // Hide loader and show the chart
        document.getElementById('loaderDDEDelayedOntimePie').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDelayedOntimePie');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Due Date Extension',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#e74c3c', '#e74c3c'], 
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, 
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/DuedateExtension-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEDivisionRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDivisionRecordsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: [
          '#9b59b6', 
          '#9b59b6',  
          '#9b59b6', 
          '#9b59b6',  
          '#9b59b6'   
        ],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/DuedateExtension-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

          // Hide loader and show the chart
        document.getElementById('loaderDDEPriorityLevelPie').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPriorityLevelsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts,
          backgroundColor: [
          '#8bc34a', 
          '#8bc34a', 
          '#8bc34a'   
        ],

          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
        
       }
    });
  });


  fetch('/api/DuedateExtension-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEStatusRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionStatusRecordsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: [
            '#660066',  
            '#660066', 
            '#660066'   
          ],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

// Audit proigram for line chart 
// Initialize Line Charts
fetch('/api/DuedateExtension-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEInitialCategorizationLine').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionInitialCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts,
          backgroundColor: 'rgba(0, 188, 212, 0.2)', 
          borderColor: '#3f51b5', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/DuedateExtension-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEPostCategorizationLine').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPostCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts,
          backgroundColor: 'rgb(0, 188, 212)',
          borderColor: '#00bcd4', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/DuedateExtension-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                        // Hide loader and show the chart
        document.getElementById('loaderDDEDelayedOntimeLine').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDelayedOntimeLine');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Due Date Extension',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgba(173, 216, 230, 0.2)', 
          borderColor: '#0c2027',
          borderWidth: 2,
          fill: true, 
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/DuedateExtension-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEDivisionRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDivisionRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgb(135, 206, 235)',
          borderColor: '#87CEEB', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/DuedateExtension-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
         document.getElementById('loaderDDEPriorityLevelLine').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPriorityLevelsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts,
          backgroundColor: 'rgb(77, 65, 0)',
          borderColor: '#4d4100',
          borderWidth: 2,
          fill: true, 
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/DuedateExtension-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEStatusRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionStatusRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgb(220, 20, 60)', 
          borderColor: '#DC143C', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Audit program for Scatter chart 
// Initialize Scatter Charts
fetch('/api/DuedateExtension-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEInitialCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionInitialCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(51, 102, 153)', 
          borderColor: '#336699', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/DuedateExtension-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEPostCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPostCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(34, 139, 34)', 
          borderColor: '#228B22', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/DuedateExtension-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

                        // Hide loader and show the chart
        document.getElementById('loaderDDEDelayedOntimeScatter').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDelayedOntimeScatter');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Due Date Extension',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgb(56, 142, 60)', 
          borderColor: '#388e3c', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/DuedateExtension-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

                        // Hide loader and show the chart
                        document.getElementById('loaderDDEDivisionRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionDivisionRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(173, 216, 230, 0.6)', // Soft pastel blue
          borderColor: '#1e88e5', // Rich blue for the border
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/DuedateExtension-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEPriorityLevelScatter').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionPriorityLevelsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Due Date Extension',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(230, 126, 34)', 
          borderColor: '#e67e22', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/DuedateExtension-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

                        // Hide loader and show the chart
        document.getElementById('loaderDDEStatusRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('DueDateExtensionStatusRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(231, 76, 60)', 
          borderColor: '#e74c3c', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });
  }
</script>


<!-- Due Date Extension Table -->

<div id="DueDateExtensionTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="DueDateExtensionTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Initial Categorization</th>
          <th>Priority</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleDueDateExtensionTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>
<script>
  function fetchDueDateExtensionRecords() {
    $.ajax({
        url: '{{ route('api.records.due_date_extension') }}', // Due Date Extension API route
        method: 'GET',
        success: function(response) {
            console.log('Response:', response); // Log the response to check the data structure
            var tableBody = $('#DueDateExtensionTableControl tbody');
            tableBody.empty();

            // Check if response is an array or an object and handle accordingly
            if (Array.isArray(response)) {
                $.each(response, function(index, extension) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + extension.id + '</td>';
                    row += '<td>' + extension.record + '</td>';
                    row += '<td>' + extension.initiation_date + '</td>';
                    row += '<td>' + extension.initial_categorization + '</td>';
                    row += '<td>' + extension.priority_data + '</td>';
                    row += '<td>' + extension.short_description + '</td>';
                    row += '<td>' + extension.current_due_date + '</td>';
                    row += '<td>' + extension.cqa_approval_on + '</td>';
                    row += '<td>' + extension.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            } else {
                console.log('Unexpected response format', response);
            }
        },
        error: function(xhr, status, error) {
            console.log('Error:', error);
        }
    });
}

function toggleDueDateExtensionTable() {
    var table = document.getElementById("DueDateExtensionTable");
    if (table.style.display === "none") {
        table.style.display = "block";
        fetchDueDateExtensionRecords(); // Fetch Due Date Extension records
    } else {
        table.style.display = "none";
    }
}

</script>

<!-- Due Date Extension Table -->


<!-- Due Date Extension Graphs Ends -->







<br>

<!-- Audit Program Graph Starts -->
<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Audit Program Section (Deviation Style) -->
  <div id="audit-program-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleAuditProgramGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-exclamation-circle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Audit Program
  </div>

  <!-- Audit Program Table Button (Deviation Style) -->
  <div id="audit-program-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableAuditProgram()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Audit Program Table
  </div>

</div>





<!-- Container for the Buttons (Initially Hidden) -->
<div id="chartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="barButton" class="btn btn-primary" onclick="showBarChart()"><i class="fas fa-chart-bar"></i></button>
  <button id="pieButton" class="btn btn-primary" onclick="showPieChart()"><i class="fas fa-chart-pie"></i></button>
  <button id="lineButtonauditprogram" class="btn btn-primary" onclick="showLineAuditChart()"><i class="fas fa-chart-line"></i></button>
  <button id="scatterButtonauditprogram" class="btn btn-primary" onclick="showScatterAuditChart()"><i class="bi bi-cloud"></i></button>

</div>

<div id="AuditProgram" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderauditprogramInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramInitialCategorization"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Audit Program</h4>
      <div class="spinner-container" id="loaderauditprogramPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramPostCategorization"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program Delay and On Time</h4>
      <div class="spinner-container" id="loaderauditprogramDelayedOntime" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeAuditProgram"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Site</h4>
      <div class="spinner-container" id="loaderauditprogramSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramSiteRecords"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderauditprogramPriorityLevels" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelAuditProgram"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Status</h4>
      <div class="spinner-container" id="loaderauditprogramStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramStatusRecords"></canvas>
    </div>
  </div>
</div>

<!-- Pie Chart Container -->
<div id="AuditProgramPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderauditprogramInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramInitialCategorizationPie"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Audit Program</h4>
      <div class="spinner-container" id="loaderauditprogramPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramPostCategorizationPie"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program Delay and On Time</h4>
      <div class="spinner-container" id="loaderauditprogramDelayedOntimePie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeAuditProgramPie"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Site</h4>
      <div class="spinner-container" id="loaderauditprogramSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramSiteRecordsPie"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderauditprogramPriorityLevelsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelAuditProgramPie"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Status</h4>
      <div class="spinner-container" id="loaderauditprogramStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramStatusRecordsPie"></canvas>
    </div>
  </div>
</div>



{{-- Audit Program Line Chart --}}
<!-- Line Chart Container -->
<div id="AuditProgramLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderauditprogramInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramInitialCategorizationLine"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Audit Program</h4>
      <div class="spinner-container" id="loaderauditprogramPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramPostCategorizationLine"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program Delay and On Time</h4>
      <div class="spinner-container" id="loaderauditprogramDelayedOntimeLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeAuditProgramLine"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Site</h4>
      <div class="spinner-container" id="loaderauditprogramSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramSiteRecordsLine"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderauditprogramPriorityLevelsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelAuditProgramLine"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Status</h4>
      <div class="spinner-container" id="loaderauditprogramStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramStatusRecordsLine"></canvas>
    </div>
  </div>
</div>


{{-- Audit Program Scatter Chart --}}
<!-- Scatter Chart Container -->
<div id="AuditProgramScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderauditprogramInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramInitialCategorizationScatter"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Audit Program</h4>
      <div class="spinner-container" id="loaderauditprogramPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramPostCategorizationScatter"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program Delay and On Time</h4>
      <div class="spinner-container" id="loaderauditprogramDelayedOntimeScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeAuditProgramScatter"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Site</h4>
      <div class="spinner-container" id="loaderauditprogramSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramSiteRecordsScatter"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderauditprogramPriorityLevelsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelAuditProgramScatter"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Program by Status</h4>
      <div class="spinner-container" id="loaderauditprogramStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="AuditProgramStatusRecordsScatter"></canvas>
    </div>
  </div>

</div>


<script>
  let chartsAuditProgram = false;

function toggleAuditProgramGraphs() {
  const graphContainers = [
    document.getElementById('AuditProgram'),
    document.getElementById('AuditProgramPie'),
    document.getElementById('AuditProgramLine'),
    document.getElementById('AuditProgramScatter')
  ];
  const chartButtons = document.getElementById('chartButtons');

  // Check if any of the graph containers are currently displayed
  const isVisible = graphContainers.some(container => container.style.display === 'block');

  if (isVisible) {
    // Hide all the graph containers and the buttons
    graphContainers.forEach(container => container.style.display = 'none');
    chartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
  } else {
    // Show the first graph container and the buttons
    graphContainers[0].style.display = 'block'; // Default to AuditProgram
    chartButtons.style.display = 'block'; // Show the buttons when charts are visible

    // Initialize charts if not already initialized
    if (!chartsAuditProgram) {
      initializeAuditProgramCharts();
      chartsAuditProgram = true;
    }
  }
}

  // Function to show Bar Chart
function showBarChart() {
  const barChartContainer = document.getElementById('AuditProgram');
  const pieChartContainer = document.getElementById('AuditProgramPie');
  const lineChartContainer = document.getElementById('AuditProgramLine');  
  const scatterChartContainer = document.getElementById('AuditProgramScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barButton').classList.add('btn-active');
  document.getElementById('pieButton').classList.remove('btn-active');
  document.getElementById('lineButton').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButton').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showPieChart() {
  const barChartContainer = document.getElementById('AuditProgram');
  const pieChartContainer = document.getElementById('AuditProgramPie');
  const lineChartContainer = document.getElementById('AuditProgramLine');  
  const scatterChartContainer = document.getElementById('AuditProgramScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieButton').classList.add('btn-active');
  document.getElementById('barButton').classList.remove('btn-active');
  document.getElementById('lineButton').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButton').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showLineAuditChart() {
  const barChartContainer = document.getElementById('AuditProgram');
  const pieChartContainer = document.getElementById('AuditProgramPie');
  const lineChartContainer = document.getElementById('AuditProgramLine');  
  const scatterChartContainer = document.getElementById('AuditProgramScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('lineButton').classList.add('btn-active');
  document.getElementById('barButton').classList.remove('btn-active');
  document.getElementById('pieButton').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('scatterButton').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showScatterAuditChart() {
  const scatterChartContainer = document.getElementById('AuditProgramScatter');  
  const barChartContainer = document.getElementById('AuditProgram');
  const pieChartContainer = document.getElementById('AuditProgramPie');
  const lineChartContainer = document.getElementById('AuditProgramLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterButton').classList.add('btn-active');
  document.getElementById('barButton').classList.remove('btn-active');
  document.getElementById('pieButton').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('lineButton').classList.remove('btn-active'); // Deactivate line button
}

  function initializeAuditProgramCharts() {
   
    // Initial Categorization
    fetch('/api/audit-program-initial-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        document.getElementById('loaderauditprogramInitialCategorization').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramInitialCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Audit Program',
              data: counts,
              backgroundColor: ['#6699ff', '#6699ff', '#6699ff'], 
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Post Categorization
    fetch('/api/audit-program-post-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        document.getElementById('loaderauditprogramPostCategorization').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramPostCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Audit Program',
              data: counts,
              backgroundColor: ['#FF4500', '#ff4500', '#ff4500'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Delayed and On Time
    fetch('/api/audit-program-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {

        document.getElementById('loaderauditprogramDelayedOntime').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('delayedOntimeAuditProgram');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'Audit Program',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#ff6347', '#FF6347'],  
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/audit-program-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        document.getElementById('loaderauditprogramSiteRecords').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramSiteRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#00BFFF', '#00BFFF', '#00BFFF'],
              borderColor: '#0000'  
              borderWidth: 1,
            }]


            // start
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/audit-program-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        document.getElementById('loaderauditprogramPriorityLevels').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('priorityLevelAuditProgram');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Audit Program',
              data: counts,
              backgroundColor: ['#8A2BE2', '#8A2BE2', '#8A2BE2'],  
               borderColor: '#8A2BE2'
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/audit-program-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        document.getElementById('loaderauditprogramStatusRecords').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#66bb6a', '#66bb6a', '#66bb6a'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });

      });

        // Initialize Pie Charts
  fetch('/api/audit-program-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

      document.getElementById('loaderauditprogramInitialCategorizationPie').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramInitialCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Audit Program',
            data: counts,
            backgroundColor: ['#9b59b6', '#9b59b6', '#9b59b6', '#9b59b6', '#9b59b6'],
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, // This will allow the chart to scale
          aspectRatio: 1,
         }
      });
    });

  fetch('/api/audit-program-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

      document.getElementById('loaderauditprogramPostCategorizationPie').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramPostCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Audit Program',
            data: counts,
            backgroundColor: [
              '#3498db', '#3498db', '#3498db', '#3498db', '#3498db', 
              '#3498db', '#3498db', '#3498db', '#3498db', '#3498db'
            ],
            borderColor: '#00000',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

    fetch('/api/audit-program-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

    document.getElementById('loaderauditprogramDelayedOntimePie').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('delayedOntimeAuditProgramPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Audit Program',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#f44336', '#f44336'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/audit-program-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    document.getElementById('loaderauditprogramSiteRecordsPie').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramSiteRecordsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#ffa726', '#ffa726', '#ffa726', '#ffa726', '#ffa726'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/audit-program-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramPriorityLevelsPie').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('priorityLevelAuditProgramPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts,
          backgroundColor: ['#2ecc71', '#2ecc71', '#2ecc71'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });


  fetch('/api/audit-program-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramStatusRecordsPie').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramStatusRecordsPie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#66bb6a', '#66bb6a', '#66bb6a'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

// Audit proigram for line chart 
// Initialize Line Charts
fetch('/api/audit-program-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramInitialCategorizationLine').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramInitialCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts,
          backgroundColor: 'rgba(52, 152, 219, 0.2)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/audit-program-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramPostCategorizationLine').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramPostCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts,
          backgroundColor: 'rgba(46, 204, 113, 0.2)', 
          borderColor: '#2ecc71', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/audit-program-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

    document.getElementById('loaderauditprogramDelayedOntimeLine').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('delayedOntimeAuditProgramLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Audit Program',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgb(51, 153, 102)', 
          borderColor: '#339966', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/audit-program-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    document.getElementById('loaderauditprogramSiteRecordsLine').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramSiteRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgb(102, 0, 255)', 
          borderColor: '#6600ff', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/audit-program-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramPriorityLevelsLine').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('priorityLevelAuditProgramLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts,
          backgroundColor: 'rgb(0, 102, 102)',
          borderColor: '#006666', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/audit-program-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

        document.getElementById('loaderauditprogramStatusRecordsLine').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramStatusRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgb(255, 51, 0)', 
          borderColor: '#ff3300', 
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Audit program for Scatter chart 
// Initialize Scatter Charts
fetch('/api/audit-program-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

        document.getElementById('loaderauditprogramInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramInitialCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(204, 153, 0)',
          borderColor: '#cc9900', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/audit-program-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramPostCategorizationScatter').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramPostCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(46, 204, 113, 0.6)',
          borderColor: '#2ecc71', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/audit-program-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

    document.getElementById('loaderauditprogramDelayedOntimeScatter').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('delayedOntimeAuditProgramScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Audit Program',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgba(76, 175, 80, 0.6)', 
          borderColor: '#4caf50', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/audit-program-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    document.getElementById('loaderauditprogramSiteRecordsScatter').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramSiteRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(3, 28, 48)', 
          borderColor: '#031c30', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/audit-program-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramPriorityLevelsScatter').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('priorityLevelAuditProgramScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Audit Program',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(243, 156, 18, 0.6)', 
          borderColor: '#f39c12', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/audit-program-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    document.getElementById('loaderauditprogramStatusRecordsScatter').style.display = 'none'; // Updated loader ID
        const chartElement = document.getElementById('AuditProgramStatusRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgb(244, 67, 54)', 
          borderColor: '#f44336', 
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });
  }
</script>


<!-- AuditProgram records  -->
<div id="AuditProgramTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="AuditProgramTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTableAuditProgram()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchAuditProgramRecords() {
        $.ajax({
            url: '{{ route('api.records.auditprogram') }}', // AuditProgram records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#AuditProgramTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, AuditProgram) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + AuditProgram.id + '</td>';
                    row += '<td>' + AuditProgram.record + '</td>';
                    row += '<td>' + AuditProgram.intiation_date + '</td>';
                    row += '<td>' + AuditProgram.Initiator_Group + '</td>';
                    row += '<td>' + AuditProgram.severity1_level + '</td>';
                    row += '<td>' + AuditProgram.short_description + '</td>';
                    row += '<td>' + AuditProgram.due_date + '</td>';
                    row += '<td>' + AuditProgram.Audit_Completed_On + '</td>';
                    row += '<td>' + AuditProgram.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the AuditProgram table
    function toggleTableAuditProgram() {
        var table = document.getElementById("AuditProgramTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchAuditProgramRecords(); // Fetch and display the AuditProgram records
        } else {
            table.style.display = "none";
        }
    }
</script>


<!-- Audit Program Graph Ends -->


<br>


<!-- CAPA Graph Starts -->
<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- CAPA Section (Deviation Style) -->
  <div id="capa-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleCAPAGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-exclamation-circle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       CAPA
  </div>

  <!-- CAPA Table Button (Deviation Style) -->
  <div id="capa-program-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTablecapa()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> CAPA Table
  </div>

</div>

<div id="chartCapaButtons" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="barCapaButton" class="btn btn-primary" onclick="showBarCapaChart()"><i class="fas fa-chart-bar"></i></button>
  <button id="pieCapaButton" class="btn btn-primary" onclick="showPieCapaChart()"><i class="fas fa-chart-pie"></i></button>
  <button id="lineCapaButton" class="btn btn-primary" onclick="showLineCapaChart()"><i class="fas fa-chart-line"></i></button>
  <button id="scatterCapaButton" class="btn btn-primary" onclick="showScatterCapaChart()"><i class="bi bi-cloud"></i></button>

</div>


<div id="CAPA" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <div class="spinner-container" id="loaderCAPAInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAInitialCategorization" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of CAPA</h4>
        <div class="spinner-container" id="loaderCAPAPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAPostCategorization" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA Delay and On Time</h4>
        <div class="spinner-container" id="loaderDelayedOntimeCAPA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="delayedOntimeCAPA" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Site</h4>
        <div class="spinner-container" id="loaderCAPASiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPASiteRecords" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <div class="spinner-container" id="loaderPriorityLevelCAPA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="priorityLevelCAPA" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Status</h4>
        <div class="spinner-container" id="loaderCAPAStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAStatusRecords" style="display: none;"></canvas>
      </div>
    </div>
</div>


{{-- capa Pie --}}
<div id="CAPAPie" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <div class="spinner-container" id="loaderCAPAInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAInitialCategorizationPie" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of CAPA</h4>
        <div class="spinner-container" id="loaderCAPAPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAPostCategorizationPie" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA Delay and On Time</h4>
        <div class="spinner-container" id="loaderDelayedOntimeCAPAPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="delayedOntimeCAPAPie" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Site</h4>
        <div class="spinner-container" id="loaderCAPASiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPASiteRecordsPie" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <div class="spinner-container" id="loaderPriorityLevelCAPAPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="priorityLevelCAPAPie" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Status</h4>
        <div class="spinner-container" id="loaderCAPAStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAStatusRecordsPie" style="display: none;"></canvas>
      </div>
    </div>
  </div>
  

 
{{-- capa Line --}}

<div id="CAPALine" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <div class="spinner-container" id="loaderCAPAInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAInitialCategorizationLine" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of CAPA</h4>
        <div class="spinner-container" id="loaderCAPAPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAPostCategorizationLine" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA Delay and On Time</h4>
        <div class="spinner-container" id="loaderDelayedOntimeCAPALine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="delayedOntimeCAPALine" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Site</h4>
        <div class="spinner-container" id="loaderCAPASiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPASiteRecordsLine" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <div class="spinner-container" id="loaderPriorityLevelCAPALine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="priorityLevelCAPALine" style="display: none;"></canvas>
      </div>
  
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Status</h4>
        <div class="spinner-container" id="loaderCAPAStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAStatusRecordsLine" style="display: none;"></canvas>
      </div>
    </div>
  </div>
  
  

{{-- capa Scatter --}}
<div id="CAPAScatter" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      
      <!-- Initial Categorization -->
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <div class="spinner-container" id="loaderCAPAInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAInitialCategorizationScatter" style="display: none;"></canvas>
      </div>
  
      <!-- Post Categorization -->
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of CAPA</h4>
        <div class="spinner-container" id="loaderCAPAPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAPostCategorizationScatter" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      
      <!-- Delayed and On Time -->
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA Delay and On Time</h4>
        <div class="spinner-container" id="loaderdelayedOntimeCAPAScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="delayedOntimeCAPAScatter" style="display: none;"></canvas>
      </div>
  
      <!-- CAPA by Site -->
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Site</h4>
        <div class="spinner-container" id="loaderCAPASiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPASiteRecordsScatter" style="display: none;"></canvas>
      </div>
    </div>
  
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
      
      <!-- Priority Levels -->
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <div class="spinner-container" id="loaderpriorityLevelCAPAScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="priorityLevelCAPAScatter" style="display: none;"></canvas>
      </div>
  
      <!-- CAPA by Status -->
      <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">CAPA by Status</h4>
        <div class="spinner-container" id="loaderCAPAStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
        <canvas id="CAPAStatusRecordsScatter" style="display: none;"></canvas>
      </div>
    </div>
  </div>
  
<script>
  let chartsCAPA = false;

function toggleCAPAGraphs() {
  const graphContainers = [
    document.getElementById('CAPA'),
    document.getElementById('CAPAPie'),
    document.getElementById('CAPALine'),
    document.getElementById('CAPAScatter'),
  ];
  const chartCapaButtons = document.getElementById('chartCapaButtons');

  // Check if any of the graph containers are currently displayed
  const isVisible = graphContainers.some(container => container.style.display === 'block');

  if (isVisible) {
    // Hide all the graph containers and the buttons
    graphContainers.forEach(container => container.style.display = 'none');
    chartCapaButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
  } else {
    // Show the first graph container and the buttons
    graphContainers[0].style.display = 'block'; // Default to CAPA
    chartCapaButtons.style.display = 'block'; // Show the buttons when charts are visible

    // Initialize charts if not already initialized
    if (!chartsCAPA) {
      initializeCAPACharts();
      chartsCAPA = true;
    }
  }
}


  // Function to show Bar Chart
function showBarCapaChart() {
  const barChartContainer = document.getElementById('CAPA');
  const pieChartContainer = document.getElementById('CAPAPie');
  const lineChartContainer = document.getElementById('CAPALine');  
  const scatterChartContainer = document.getElementById('CAPAScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barCapaButton').classList.add('btn-active');
  document.getElementById('pieCapaButton').classList.remove('btn-active');
  document.getElementById('lineCapaButton').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterCapaButton').classList.remove('btn-active'); // Deactivate scatter button
}


// Function to show Pie Chart
function showPieCapaChart() {
  const barChartContainer = document.getElementById('CAPA');
  const pieChartContainer = document.getElementById('CAPAPie');
  const lineChartContainer = document.getElementById('CAPALine');
  const scatterChartContainer = document.getElementById('CAPAScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieCapaButton').classList.add('btn-active');
  document.getElementById('barCapaButton').classList.remove('btn-active');
  document.getElementById('lineCapaButton').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterCapaButton').classList.remove('btn-active'); // Deactivate scatter button
}


// Function to show Line Chart
function showLineCapaChart() {
  const barChartContainer = document.getElementById('CAPA');
  const pieChartContainer = document.getElementById('CAPAPie');
  const lineChartContainer = document.getElementById('CAPALine');
  const scatterChartContainer = document.getElementById('CAPAScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('lineCapaButton').classList.add('btn-active');
  document.getElementById('barCapaButton').classList.remove('btn-active');
  document.getElementById('pieCapaButton').classList.remove('btn-active');  // Deactivate pie button
  document.getElementById('scatterCapaButton').classList.remove('btn-active');  // Deactivate scatter button
}


// Function to show Scatter Chart
function showScatterCapaChart() {
  const barChartContainer = document.getElementById('CAPA');
  const pieChartContainer = document.getElementById('CAPAPie');
  const lineChartContainer = document.getElementById('CAPALine');
  const scatterChartContainer = document.getElementById('CAPAScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterCapaButton').classList.add('btn-active');
  document.getElementById('barCapaButton').classList.remove('btn-active');
  document.getElementById('lineCapaButton').classList.remove('btn-active');  // Deactivate line button
  document.getElementById('pieCapaButton').classList.remove('btn-active');  // Deactivate pie button
}




  function initializeCAPACharts() {
    // Initial Categorization
fetch('/api/capa-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderCAPAInitialCategorization');
    const chartElement = document.getElementById('CAPAInitialCategorization');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA',
          data: counts,
          backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
          borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
          borderWidth: 1,
        }]
      },
      options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
  });

// Post Categorization
fetch('/api/capa-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderCAPAPostCategorization');
    const chartElement = document.getElementById('CAPAPostCategorization');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA',
          data: counts,
          backgroundColor: ['#55ff00', '#55ff00', '#55ff00'],
          borderColor: ['#55ff00', '#55ff00', '#55ff00'],
          borderWidth: 1,
        }]
      },
      options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
  });

// Delayed and On Time
fetch('/api/capa-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {
    const loader = document.getElementById('loaderDelayedOntimeCAPA');
    const chartElement = document.getElementById('delayedOntimeCAPA');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'CAPA',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#ff4d4d', '#ff4d4d'],
          borderWidth: 1,
        }]
      },
      options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
  });

// Site Records
fetch('/api/capa-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    const loader = document.getElementById('loaderCAPASiteRecords');
    const chartElement = document.getElementById('CAPASiteRecords');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#66bb6a', '#66bb6a', '#66bb6a'],
          borderWidth: 1,
        }]
      },
      options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
  });

// Priority Levels
fetch('/api/capa-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderPriorityLevelCAPA');
    const chartElement = document.getElementById('priorityLevelCAPA');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA',
          data: counts,
          backgroundColor: ['#66b2e5', '#66b2e5', '#66b2e5'],
          borderWidth: 1,
        }]
      },
      options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
  });

// Status Records
fetch('/api/capa-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderCAPAStatusRecords');
    const chartElement = document.getElementById('CAPAStatusRecords');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'bar',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#66bb6a', '#66bb6a', '#66bb6a'],
          borderWidth: 1,
        }]
      },
      options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
  });


     // Initial Categorization
fetch('/api/capa-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderCAPAInitialCategorizationPie');
    const chartElement = document.getElementById('CAPAInitialCategorizationPie');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA',
          data: counts,
          backgroundColor: ['#0000ff', '#0000ff', '#0000ff'],
          borderColor: ['#0000ff', '#0000ff', '#0000ff'],
          borderWidth: 1,
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Post Categorization
fetch('/api/capa-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderCAPAPostCategorizationPie');
    const chartElement = document.getElementById('CAPAPostCategorizationPie');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA',
          data: counts,
          backgroundColor: ['#006666', '#006666', '#006666'],
          borderColor: ['#006666', '#006666', '#006666'],
          borderWidth: 1,
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Delayed and On Time
fetch('/api/capa-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {
    const loader = document.getElementById('loaderDelayedOntimeCAPAPie');
    const chartElement = document.getElementById('delayedOntimeCAPAPie');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'CAPA',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#4caf50', '#4caf50'],
          borderWidth: 1,
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Site Records
fetch('/api/capa-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);
    
    const loader = document.getElementById('loaderCAPASiteRecordsPie');
    const chartElement = document.getElementById('CAPASiteRecordsPie');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#2f6a32', '#2f6a32', '#2f6a32'],
          borderWidth: 1,
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Priority Levels
fetch('/api/capa-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderPriorityLevelCAPAPie');
    const chartElement = document.getElementById('priorityLevelCAPAPie');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA',
          data: counts,
          backgroundColor: ['#f39c12', '#f39c12', '#f39c12'],
          borderWidth: 1,
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Status Records
fetch('/api/capa-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);
    
    const loader = document.getElementById('loaderCAPAStatusRecordsPie');
    const chartElement = document.getElementById('CAPAStatusRecordsPie');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#ffa726', '#ffa726', '#ffa726'],
          borderWidth: 1,
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

   // Function to initialize Line Charts

// Initial Categorization
fetch('/api/capa-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    const loader = document.getElementById('loaderCAPAInitialCategorizationLine');
    const chartElement = document.getElementById('CAPAInitialCategorizationLine');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA Initial Categorization',
          data: counts,
          fill: false,
          borderColor: '#3498db',
          borderWidth: 2,
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  });

// Post Categorization
fetch('/api/capa-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    const loader = document.getElementById('loaderCAPAPostCategorizationLine');
    const chartElement = document.getElementById('CAPAPostCategorizationLine');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA Post Categorization',
          data: counts,
          fill: false,
          borderColor: '#2ecc71',
          borderWidth: 2,
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  });

// Delayed and On Time
fetch('/api/capa-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {
    const loader = document.getElementById('loaderDelayedOntimeCAPALine');
    const chartElement = document.getElementById('delayedOntimeCAPALine');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'CAPA Delayed vs On Time',
          data: [data['On Time'], data['Delayed']],
          fill: false,
          borderColor: '#4caf50',
          borderWidth: 2,
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  });

// Site Records
fetch('/api/capa-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const loader = document.getElementById('loaderCAPASiteRecordsLine');
    const chartElement = document.getElementById('CAPASiteRecordsLine');
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Site Records',
          data: counts,
          fill: false,
          borderColor: '#2ecc71',
          borderWidth: 2,
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  });

// Priority Levels
fetch('/api/capa-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    const loader = document.getElementById('loaderPriorityLevelCAPALine');
    const chartElement = document.getElementById('priorityLevelCAPALine');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'CAPA Priority Levels',
          data: counts,
          fill: false,
          borderColor: '#f39c12',
          borderWidth: 2,
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  });

// Status Records
fetch('/api/capa-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    const loader = document.getElementById('loaderCAPAStatusRecordsLine');
    const chartElement = document.getElementById('CAPAStatusRecordsLine');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'CAPA Status Records',
          data: counts,
          fill: false,
          borderColor: '#ffa726',
          borderWidth: 2,
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  });


     // Initial Categorization
  fetch('/api/capa-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);
      const loader = document.getElementById('loaderCAPAInitialCategorizationScatter');
    const chartElement = document.getElementById('CAPAInitialCategorizationScatter');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
        type: 'scatter',
        data: {
          labels: categories,
          datasets: [{
            label: 'CAPA',
            data: categories.map((category, index) => ({ x: category, y: counts[index] })),
            backgroundColor: '#3498db',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category' },
            y: { beginAtZero: true }
          }
        }
      });
    });

  // Post Categorization
  fetch('/api/capa-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);
      const loader = document.getElementById('loaderCAPAPostCategorizationScatter');
    const chartElement = document.getElementById('CAPAPostCategorizationScatter');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
        type: 'scatter',
        data: {
          labels: categories,
          datasets: [{
            label: 'CAPA',
            data: categories.map((category, index) => ({ x: category, y: counts[index] })),
            backgroundColor: '#2ecc71',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category' },
            y: { beginAtZero: true }
          }
        }
      });
    });

  // Delayed and On Time
  fetch('/api/capa-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderdelayedOntimeCAPAScatter');
    const chartElement = document.getElementById('delayedOntimeCAPAScatter');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
        type: 'scatter',
        data: {
          labels: ['On Time', 'Delayed'],
          datasets: [{
            label: 'CAPA',
            data: [
              { x: 'On Time', y: data['On Time'] },
              { x: 'Delayed', y: data['Delayed'] }
            ],
            backgroundColor: '#4caf50',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category' },
            y: { beginAtZero: true }
          }
        }
      });
    });

  // Site Records
  fetch('/api/capa-sitewise-records')
    .then(response => response.json())
    .then(data => {
      const divisions = data.map(item => item.division_name);
      const counts = data.map(item => item.count);

      const loader = document.getElementById('loaderCAPASiteRecordsScatter');
    const chartElement = document.getElementById('CAPASiteRecordsScatter');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
        type: 'scatter',
        data: {
          labels: divisions,
          datasets: [{
            label: 'Records',
            data: divisions.map((division, index) => ({ x: division, y: counts[index] })),
            backgroundColor: '#f44336',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category' },
            y: { beginAtZero: true }
          }
        }
      });
    });

  // Priority Levels
  fetch('/api/capa-priority-records')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

      const loader = document.getElementById('loaderpriorityLevelCAPAScatter');
    const chartElement = document.getElementById('priorityLevelCAPAScatter');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
        type: 'scatter',
        data: {
          labels: categories,
          datasets: [{
            label: 'CAPA',
            data: categories.map((category, index) => ({ x: category, y: counts[index] })),
            backgroundColor: '#f39c12',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category' },
            y: { beginAtZero: true }
          }
        }
      });
    });

  // Status Records
  fetch('/api/capa-status-records')
    .then(response => response.json())
    .then(data => {
      const statuses = Object.keys(data);
      const counts = Object.values(data);
      const loader = document.getElementById('loaderCAPAStatusRecordsScatter');
    const chartElement = document.getElementById('CAPAStatusRecordsScatter');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
        type: 'scatter',
        data: {
          labels: statuses,
          datasets: [{
            label: 'Records',
            data: statuses.map((status, index) => ({ x: status, y: counts[index] })),
            backgroundColor: '#ffa726',
            borderWidth: 2
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { type: 'category' },
            y: { beginAtZero: true }
          }
        }
      });
    });
  }
</script>


<!-- capa records  -->
<div id="capaTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="capaTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Initial capa Category</th>
          <th>Short Description</th>
          <th>Priority</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTablecapa()" id="animatedExitButton"> 
  <span class="icon">&#10006;</span>
</button>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function fetchcapaRecords() {
        $.ajax({
            url: '{{ route('api.records.capa') }}', // capa records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#capaTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, capa) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + capa.id + '</td>';
                    row += '<td>' + capa.record + '</td>';
                    row += '<td>' + capa.intiation_date + '</td>';
                    row += '<td>' + capa.initiator_Group + '</td>';
                    row += '<td>' + capa.Initial_Categorization + '</td>';
                    row += '<td>' + capa.short_description + '</td>';
                    row += '<td>' + capa.priority_data + '</td>';
                    row += '<td>' + capa.due_date + '</td>';
                    row += '<td>' + capa.qah_approval_completed_on + '</td>';
                    row += '<td>' + capa.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    function toggleTablecapa() {
        var table = document.getElementById("capaTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchcapaRecords(); // Fetch capa records
        } else {
            table.style.display = "none";
        }
    }
</script>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>



<!-- capa records  -->

<!-- CAPA Graph Ends -->
<br>

<!-- Global CAPA Graph Starts -->

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Global CAPA Section -->
  <div id="global-capa-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleGlobalCAPAGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-exclamation-circle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Global CAPA
  </div>

  <!-- Global CAPA Table Button -->
  <div id="global-capa-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableGlobalCAPA()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Global CAPA Table
  </div>

</div>


<!-- Container for the Buttons (Initially Hidden) -->
<div id="globalChartButtons" style="display: none; text-align: center; margin-bottom: 20px;">

    <button id="globalBarButton" class="btn btn-primary" onclick="showGlobalBarChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="globalPieButton" class="btn btn-primary" onclick="showGlobalPieChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="globalLineButton" class="btn btn-primary" onclick="showGlobalLineChart()"><i class="fas fa-chart-line"></i> </button>
    <button id="globalScatterButton" class="btn btn-primary" onclick="showGlobalScatterChart()"><i class="bi bi-cloud"></i></button>
</div>

<div id="GlobalCAPA" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderInitialCategorizationGCA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAInitialCategorization" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Global CAPA</h4>
      <!-- Loader -->
      <div id="loaderPostCategorizationGCA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeGCA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeGlobalCAPA" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Site</h4>
      <!-- Loader -->
      <div id="loaderSiteRecordsGCA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPASiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelGCA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelGlobalCAPA" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Status</h4>
      <!-- Loader -->
      <div id="loaderStatusRecordsGCA" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>


<!-- Pie Chart Container -->
<div id="GlobalCAPAPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Initial Categorization Pie -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loadergcaInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization Pie -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Global CAPA</h4>
      <!-- Loader -->
      <div id="loadergcaPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Delay and On Time Pie -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA Delay and On Time</h4>
      <!-- Loader -->
      <div id="loadergcaDelayedOntimePie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeGlobalCAPAPie" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Site Pie -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Site</h4>
      <!-- Loader -->
      <div id="loadergcaSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPASiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Priority Levels Pie -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loadergcaPriorityLevelPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelGlobalCAPAPie" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Status Pie -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Status</h4>
      <!-- Loader -->
      <div id="loadergcaStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<!-- Line Chart Container -->
<div id="GlobalCAPALine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Initial Categorization Line -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loadergcaInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization Line -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Global CAPA</h4>
      <!-- Loader -->
      <div id="loadergcaPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Delay and On Time Line -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA Delay and On Time</h4>
      <!-- Loader -->
      <div id="loadergcaDelayedOntimeLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeGlobalCAPALine" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Site Line -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Site</h4>
      <!-- Loader -->
      <div id="loadergcaSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPASiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Priority Levels Line -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loadergcaPriorityLevelLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelGlobalCAPALine" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Status Line -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Status</h4>
      <!-- Loader -->
      <div id="loadergcaStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>


<!-- Scatter Chart Container -->
<div id="GlobalCAPAScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Initial Categorization Scatter -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loadergcaInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization Scatter -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Global CAPA</h4>
      <!-- Loader -->
      <div id="loadergcaPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Delay and On Time Scatter -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA Delay and On Time</h4>
      <!-- Loader -->
      <div id="loadergcaDelayedOntimeScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeGlobalCAPAScatter" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Site Scatter -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Site</h4>
      <!-- Loader -->
      <div id="loadergcaSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPASiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Priority Levels Scatter -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loadergcaPriorityLevelScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelGlobalCAPAScatter" style="display: none;"></canvas>
    </div>

    <!-- Global CAPA by Status Scatter -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Global CAPA by Status</h4>
      <!-- Loader -->
      <div id="loadergcaStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="GlobalCAPAStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>


<script>
    let chartsGlobalCAPA = false;

function toggleGlobalCAPAGraphs() {
    const graphContainers = [
        document.getElementById('GlobalCAPA'),
        document.getElementById('GlobalCAPAPie'),
        document.getElementById('GlobalCAPALine'),
        document.getElementById('GlobalCAPAScatter')  // Added GlobalCAPAScatter
    ];
    const chartButtons = document.getElementById('globalChartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to GlobalCAPA
        chartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsGlobalCAPA) {
            initializeGlobalCAPACharts();
            chartsGlobalCAPA = true;
        }
    }
}

    // Show Bar Chart
    function showGlobalBarChart() {
        const barChartContainer = document.getElementById('GlobalCAPA');
        const pieChartContainer = document.getElementById('GlobalCAPAPie');
        const lineChartContainer = document.getElementById('GlobalCAPALine');
        const scatterChartContainer = document.getElementById('GlobalCAPAScatter'); // Scatter Chart

        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none'; // Hide scatter chart

        document.getElementById('globalBarButton').classList.add('btn-active');
        document.getElementById('globalPieButton').classList.remove('btn-active');
        document.getElementById('globalLineButton').classList.remove('btn-active');
        document.getElementById('globalScatterButton').classList.remove('btn-active'); // Remove active from scatter
    }

    function showGlobalPieChart() {
        const barChartContainer = document.getElementById('GlobalCAPA');
        const pieChartContainer = document.getElementById('GlobalCAPAPie');
        const lineChartContainer = document.getElementById('GlobalCAPALine');
        const scatterChartContainer = document.getElementById('GlobalCAPAScatter');

        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        document.getElementById('globalBarButton').classList.remove('btn-active');
        document.getElementById('globalPieButton').classList.add('btn-active');
        document.getElementById('globalLineButton').classList.remove('btn-active');
        document.getElementById('globalScatterButton').classList.remove('btn-active');
    }

    // Show Line Chart
    function showGlobalLineChart() {
        const barChartContainer = document.getElementById('GlobalCAPA');
        const pieChartContainer = document.getElementById('GlobalCAPAPie');
        const lineChartContainer = document.getElementById('GlobalCAPALine');
        const scatterChartContainer = document.getElementById('GlobalCAPAScatter');

        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        document.getElementById('globalBarButton').classList.remove('btn-active');
        document.getElementById('globalPieButton').classList.remove('btn-active');
        document.getElementById('globalLineButton').classList.add('btn-active');
        document.getElementById('globalScatterButton').classList.remove('btn-active');
    }

    // Show Scatter Chart
    function showGlobalScatterChart() {
        const barChartContainer = document.getElementById('GlobalCAPA');
        const pieChartContainer = document.getElementById('GlobalCAPAPie');
        const lineChartContainer = document.getElementById('GlobalCAPALine');
        const scatterChartContainer = document.getElementById('GlobalCAPAScatter');

        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        document.getElementById('globalBarButton').classList.remove('btn-active');
        document.getElementById('globalPieButton').classList.remove('btn-active');
        document.getElementById('globalLineButton').classList.remove('btn-active');
        document.getElementById('globalScatterButton').classList.add('btn-active');
    }

    function initializeGlobalCAPACharts() {
        // Initial Categorization
        fetch('/api/global-capa-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loaderInitialCategorizationGCA').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAInitialCategorization');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },





                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/global-capa-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loaderPostCategorizationGCA').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAPostCategorization');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/global-capa-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                                    // Hide loader and show the chart
                document.getElementById('loaderDelayedOntimeGCA').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeGlobalCAPA');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Global CAPA',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/global-capa-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                                    // Hide loader and show the chart
                document.getElementById('loaderSiteRecordsGCA').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPASiteRecords');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/global-capa-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                 document.getElementById('loaderPriorityLevelGCA').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelGlobalCAPA');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/global-capa-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loaderStatusRecordsGCA').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAStatusRecords');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f1', '#66bb9a', '#ffa7346'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        //-------------- pie chart------------------

        // Initial Categorization
        fetch('/api/global-capa-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAInitialCategorizationPie');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Post Categorization
        fetch('/api/global-capa-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaPostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAPostCategorizationPie');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/global-capa-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                                     // Hide loader and show the chart
                document.getElementById('loadergcaDelayedOntimePie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeGlobalCAPAPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Global CAPA',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records
        fetch('/api/global-capa-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPASiteRecordsPie');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Priority Levels
        fetch('/api/global-capa-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaPriorityLevelPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelGlobalCAPAPie');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records
        fetch('/api/global-capa-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAStatusRecordsPie');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });
        // line chart 
        // Initial Categorization
        fetch('/api/global-capa-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAInitialCategorizationLine');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/global-capa-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaPostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAPostCategorizationLine');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/global-capa-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                                  // Hide loader and show the chart
                document.getElementById('loadergcaDelayedOntimeLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeGlobalCAPALine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Global CAPA',
                            data: [data['On Time'], data['Delayed']],
                            borderColor: '#4caf50',
                            backgroundColor: 'rgba(76, 175, 80, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/global-capa-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPASiteRecordsLine');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#42a5f5',
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/global-capa-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaPriorityLevelLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelGlobalCAPALine');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/global-capa-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAStatusRecordsLine');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#42a5f5',
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
        // scatter chart
        // Initial Categorization
        fetch('/api/global-capa-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAInitialCategorizationScatter');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#3498db',
                            borderColor: '#2980b9',
                            borderWidth: 1,
                            pointRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/global-capa-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaPostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAPostCategorizationScatter');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#3498db',
                            borderColor: '#2980b9',
                            borderWidth: 1,
                            pointRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/global-capa-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                                  // Hide loader and show the chart
                document.getElementById('loadergcaDelayedOntimeScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeGlobalCAPAScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Global CAPA',
                            data: [{
                                    x: 1,
                                    y: data['On Time']
                                },
                                {
                                    x: 2,
                                    y: data['Delayed']
                                }
                            ],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderColor: '#388e3c',
                            borderWidth: 1,
                            pointRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/global-capa-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPASiteRecordsScatter');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#42a5f5',
                            borderColor: '#1976d2',
                            borderWidth: 1,
                            pointRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/global-capa-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaPriorityLevelScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelGlobalCAPAScatter');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Global CAPA',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#3498db',
                            borderColor: '#2980b9',
                            borderWidth: 1,
                            pointRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/global-capa-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                                    // Hide loader and show the chart
                document.getElementById('loadergcaStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('GlobalCAPAStatusRecordsScatter');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#42a5f5',
                            borderColor: '#1976d2',
                            borderWidth: 1,
                            pointRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });



    }
</script>


<!-- Global Capa Records -->

<div id="GlobalCapaTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="GlobalCapaTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Priority</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTableGlobalCAPA()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchGlobalCapaRecords() {
        $.ajax({
            url: '{{ route('api.records.GlobalCapa') }}', // GlobalCapa records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#GlobalCapaTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, GlobalCapa) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + GlobalCapa.id + '</td>';
                    row += '<td>' + GlobalCapa.record + '</td>';
                    row += '<td>' + GlobalCapa.intiation_date + '</td>';
                    row += '<td>' + GlobalCapa.initiator_Group + '</td>';
                    row += '<td>' + GlobalCapa.Initial_Categorization + '</td>';
                    row += '<td>' + GlobalCapa.short_description + '</td>';
                    row += '<td>' + GlobalCapa.priority_data + '</td>';
                    row += '<td>' + GlobalCapa.due_date + '</td>';
                    row += '<td>' + GlobalCapa.qah_approval_completed_on + '</td>';
                    row += '<td>' + GlobalCapa.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the GlobalCapa table
    function toggleTableGlobalCAPA() {
        var table = document.getElementById("GlobalCapaTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchGlobalCapaRecords(); // Fetch and display the GlobalCapa records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Global Capa Records -->

<!-- Global CAPA Graph Ends -->





<!-- Effectiveness Check Graph Starts -->
 <br>

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Effectiveness Check Section -->
  <div id="effectiveness-check-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-check-circle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Effectiveness Check
  </div>

  <!-- Effectiveness Check Table Button -->
  <div id="effectiveness-check-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableEffectivenessCheck()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Effectiveness Check Table
  </div>

</div>


<!-- Chart Type Buttons -->
<div id="EffectivechartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barEffectiButton" class="btn btn-primary" onclick="showBarEffectiChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieEffectiButton" class="btn btn-primary" onclick="showPieEffectiChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineButtonEffecti" class="btn btn-primary" onclick="showLineEffecChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterButtonEffecti" class="btn btn-primary" onclick="showScatterEffectiChart()"><i class="bi bi-cloud"></i></button>
</div>
<div id="effectivenessGraphs" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckInitialCategorization" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Effectiveness Check</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckPostCategorization" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check Delay and On Time</h4>
            <div class="spinner-container" id="loaderDelayedOntimeEffectivenessCheck" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeEffectivenessCheck" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Site</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderPriorityLevelEffectivenessCheck" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelEffectivenessCheck" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Status</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckStatusRecords" style="display: none;"></canvas>
        </div>
    </div>
</div>


{{-- pie chart for effect --}}
<div id="effectivenessPie" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckInitialCategorizationPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Effectiveness Check</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckPostCategorizationPie" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check Delay and On Time</h4>
            <div class="spinner-container" id="loaderDelayedOntimeEffectivenessCheckPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeEffectivenessCheckPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Site</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckSiteRecordsPie" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderPriorityLevelEffectivenessCheckPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelEffectivenessCheckPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Status</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckStatusRecordsPie" style="display: none;"></canvas>
        </div>
    </div>
</div>


{{--  --}}

{{-- Line chart for effect --}}
<div id="effectivenessLine" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Effectiveness Check</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckPostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check Delay and On Time</h4>
            <div class="spinner-container" id="loaderDelayedOntimeEffectivenessCheckLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeEffectivenessCheckLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Site</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderPriorityLevelEffectivenessCheckLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelEffectivenessCheckLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Status</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
</div>

{{-- Scatter chart for effect --}}
<div id="effectivenessScatter" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Effectiveness Check</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check Delay and On Time</h4>
            <div class="spinner-container" id="loaderDelayedOntimeEffectivenessCheckScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeEffectivenessCheckScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Site</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderPriorityLevelEffectivenessCheckScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelEffectivenessCheckScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Effectiveness Check by Status</h4>
            <div class="spinner-container" id="loaderEffectivenessCheckStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="EffectivenessCheckStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>


<script>
    let chartsEffectivenessCheck = false;
    let currentChartType = 'bar'; // Default chart type

    function toggleGraphs() {
    const graphContainers = [
        document.getElementById('effectivenessGraphs'),
        document.getElementById('effectivenessPie'),
        document.getElementById('effectivenessLine'),
        document.getElementById('effectivenessScatter') // Added effectivenessScatter
    ];
    const EffectivechartButtons = document.getElementById('EffectivechartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        EffectivechartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to effectivenessGraphs
        EffectivechartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsEffectivenessCheck) {
            initializeCharts();
            chartsEffectivenessCheck = true;
        }
    }
}



    function showBarEffectiChart() {
        const barChartContainer = document.getElementById('effectivenessGraphs');
        const pieChartContainer = document.getElementById('effectivenessPie');
        const lineChartContainer = document.getElementById('effectivenessLine');
        const scatterChartContainer = document.getElementById('effectivenessScatter');

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barEffectiButton').classList.add('btn-active');
        document.getElementById('pieEffectiButton').classList.remove('btn-active');
        document.getElementById('lineButtonEffecti').classList.remove('btn-active');
        document.getElementById('scatterButtonEffecti').classList.remove('btn-active');
    }

    function showPieEffectiChart() {
        const barChartContainer = document.getElementById('effectivenessGraphs');
        const pieChartContainer = document.getElementById('effectivenessPie');
        const lineChartContainer = document.getElementById('effectivenessLine');
        const scatterChartContainer = document.getElementById('effectivenessScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('pieEffectiButton').classList.add('btn-active');
        document.getElementById('barEffectiButton').classList.remove('btn-active');
        document.getElementById('lineButtonEffecti').classList.remove('btn-active');
        document.getElementById('scatterButtonEffecti').classList.remove('btn-active');
    }

    function showLineEffecChart() {
        const barChartContainer = document.getElementById('effectivenessGraphs');
        const pieChartContainer = document.getElementById('effectivenessPie');
        const lineChartContainer = document.getElementById('effectivenessLine');
        const scatterChartContainer = document.getElementById('effectivenessScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('lineButtonEffecti').classList.add('btn-active');
        document.getElementById('barEffectiButton').classList.remove('btn-active');
        document.getElementById('pieEffectiButton').classList.remove('btn-active');
        document.getElementById('scatterButtonEffecti').classList.remove('btn-active');
    }

    function showScatterEffectiChart() {
        const barChartContainer = document.getElementById('effectivenessGraphs');
        const pieChartContainer = document.getElementById('effectivenessPie');
        const lineChartContainer = document.getElementById('effectivenessLine');
        const scatterChartContainer = document.getElementById('effectivenessScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('scatterButtonEffecti').classList.add('btn-active');
        document.getElementById('barEffectiButton').classList.remove('btn-active');
        document.getElementById('pieEffectiButton').classList.remove('btn-active');
        document.getElementById('lineButtonEffecti').classList.remove('btn-active');
    }

    function initializeCharts() {
        // Initial Categorization
        fetch('/api/effectiveness-check-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const loader = document.getElementById('loaderEffectivenessCheckInitialCategorization');
    const chartElement = document.getElementById('EffectivenessCheckInitialCategorization');
    
    loader.style.display = 'none'; // Hide the loader
    chartElement.style.display = 'block'; // Show the chart

    new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Effectiveness Check',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
fetch('/api/effectiveness-check-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        const loader = document.getElementById('loaderEffectivenessCheckPostCategorization');
        const chartElement = document.getElementById('EffectivenessCheckPostCategorization');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

// Delayed and On Time
fetch('/api/effectiveness-check-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderDelayedOntimeEffectivenessCheck');
        const chartElement = document.getElementById('delayedOntimeEffectivenessCheck');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Effectiveness Check',
                    data: [data['On Time'], data['Delayed']],
                    backgroundColor: ['#4caf50', '#f44336'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

// Site Records
fetch('/api/effectiveness-check-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderEffectivenessCheckSiteRecords');
        const chartElement = document.getElementById('EffectivenessCheckSiteRecords');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

// Priority Levels
fetch('/api/effectiveness-check-priority-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderPriorityLevelEffectivenessCheck');
        const chartElement = document.getElementById('priorityLevelEffectivenessCheck');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

// Status Records
fetch('/api/effectiveness-check-status-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderEffectivenessCheckStatusRecords');
        const chartElement = document.getElementById('EffectivenessCheckStatusRecords');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        const statuses = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });
        // for pie chart script

        // Initial Categorization
        fetch('/api/effectiveness-check-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const loader = document.getElementById('loaderEffectivenessCheckInitialCategorizationPie');
        const chartElement = document.getElementById('EffectivenessCheckInitialCategorizationPie');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
                    type: 'pie', // Change from 'bar' to 'pie'
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Effectiveness Check',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

       // Post Categorization
fetch('/api/effectiveness-check-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        const loader = document.getElementById('loaderEffectivenessCheckPostCategorizationPie');
        const chartElement = document.getElementById('EffectivenessCheckPostCategorizationPie');

        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'pie', // Change from 'bar' to 'pie'
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Delayed and On Time
fetch('/api/effectiveness-check-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderDelayedOntimeEffectivenessCheckPie');
        const chartElement = document.getElementById('delayedOntimeEffectivenessCheckPie');

        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'pie', // Change from 'bar' to 'pie'
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Effectiveness Check',
                    data: [data['On Time'], data['Delayed']],
                    backgroundColor: ['#4caf50', '#f44336'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Site Records
fetch('/api/effectiveness-check-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderEffectivenessCheckSiteRecordsPie');
        const chartElement = document.getElementById('EffectivenessCheckSiteRecordsPie');

        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        new Chart(chartElement, {
            type: 'pie', // Change from 'bar' to 'pie'
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Priority Levels
fetch('/api/effectiveness-check-priority-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderPriorityLevelEffectivenessCheckPie');
        const chartElement = document.getElementById('priorityLevelEffectivenessCheckPie');

        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'pie', // Change from 'bar' to 'pie'
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Status Records
fetch('/api/effectiveness-check-status-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderEffectivenessCheckStatusRecordsPie');
        const chartElement = document.getElementById('EffectivenessCheckStatusRecordsPie');

        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        const statuses = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'pie', // Change from 'bar' to 'pie'
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });


        // Initial Categorization (Line Chart)
fetch('/api/effectiveness-check-initial-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Initial Categorization
        const loader = document.getElementById('loaderEffectivenessCheckInitialCategorizationLine');
        const chartElement = document.getElementById('EffectivenessCheckInitialCategorizationLine');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'line', // Change to 'line' for line chart
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    borderColor: '#3498db',
                    backgroundColor: 'rgba(52, 152, 219, 0.2)',
                    fill: true,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Post Categorization (Line Chart)
fetch('/api/effectiveness-check-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Post Categorization
        const loader = document.getElementById('loaderEffectivenessCheckPostCategorizationLine');
        const chartElement = document.getElementById('EffectivenessCheckPostCategorizationLine');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'line', // Change to 'line' for line chart
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    borderColor: '#2ecc71',
                    backgroundColor: 'rgba(46, 204, 113, 0.2)',
                    fill: true,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Delayed and On Time (Line Chart)
fetch('/api/effectiveness-check-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        // Loader for Delayed and On Time
        const loader = document.getElementById('loaderDelayedOntimeEffectivenessCheckLine');
        const chartElement = document.getElementById('delayedOntimeEffectivenessCheckLine');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'line', // Change to 'line' for line chart
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Effectiveness Check',
                    data: [data['On Time'], data['Delayed']],
                    borderColor: ['#4caf50', '#f44336'],
                    backgroundColor: ['rgba(76, 175, 80, 0.2)', 'rgba(244, 67, 54, 0.2)'],
                    fill: true,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Site Records (Line Chart)
fetch('/api/effectiveness-check-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        // Loader for Site Records
        const loader = document.getElementById('loaderEffectivenessCheckSiteRecordsLine');
        const chartElement = document.getElementById('EffectivenessCheckSiteRecordsLine');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'line', // Change to 'line' for line chart
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    borderColor: '#42a5f5',
                    backgroundColor: 'rgba(66, 165, 245, 0.2)',
                    fill: true,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Priority Levels (Line Chart)
fetch('/api/effectiveness-check-priority-records')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Priority Levels
        const loader = document.getElementById('loaderPriorityLevelEffectivenessCheckLine');
        const chartElement = document.getElementById('priorityLevelEffectivenessCheckLine');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'line', // Change to 'line' for line chart
            data: {
                labels: categories,
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts,
                    borderColor: '#f39c12',
                    backgroundColor: 'rgba(243, 156, 18, 0.2)',
                    fill: true,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Status Records (Line Chart)
fetch('/api/effectiveness-check-status-records')
    .then(response => response.json())
    .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Status Records
        const loader = document.getElementById('loaderEffectivenessCheckStatusRecordsLine');
        const chartElement = document.getElementById('EffectivenessCheckStatusRecordsLine');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'line', // Change to 'line' for line chart
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    borderColor: '#e74c3c',
                    backgroundColor: 'rgba(231, 76, 60, 0.2)',
                    fill: true,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });


        // Initial Categorization (Scatter Chart)
fetch('/api/effectiveness-check-initial-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Initial Categorization
        const loader = document.getElementById('loaderEffectivenessCheckInitialCategorizationScatter');
        const chartElement = document.getElementById('EffectivenessCheckInitialCategorizationScatter');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts.map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    borderColor: '#3498db',
                    backgroundColor: 'rgba(52, 152, 219, 0.5)',
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Post Categorization (Scatter Chart)
fetch('/api/effectiveness-check-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Post Categorization
        const loader = document.getElementById('loaderEffectivenessCheckPostCategorizationScatter');
        const chartElement = document.getElementById('EffectivenessCheckPostCategorizationScatter');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts.map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    borderColor: '#2ecc71',
                    backgroundColor: 'rgba(46, 204, 113, 0.5)',
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Delayed and On Time (Scatter Chart)
fetch('/api/effectiveness-check-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        // Loader for Delayed and On Time
        const loader = document.getElementById('loaderDelayedOntimeEffectivenessCheckScatter');
        const chartElement = document.getElementById('delayedOntimeEffectivenessCheckScatter');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Effectiveness Check',
                    data: [{
                        x: 0,
                        y: data['On Time']
                    },
                    {
                        x: 1,
                        y: data['Delayed']
                    }],
                    borderColor: ['#4caf50', '#f44336'],
                    backgroundColor: ['rgba(76, 175, 80, 0.5)', 'rgba(244, 67, 54, 0.5)'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Site Records (Scatter Chart)
fetch('/api/effectiveness-check-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        // Loader for Site Records
        const loader = document.getElementById('loaderEffectivenessCheckSiteRecordsScatter');
        const chartElement = document.getElementById('EffectivenessCheckSiteRecordsScatter');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Records',
                    data: counts.map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    borderColor: '#42a5f5',
                    backgroundColor: 'rgba(66, 165, 245, 0.5)',
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Priority Levels (Scatter Chart)
fetch('/api/effectiveness-check-priority-records')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Priority Levels
        const loader = document.getElementById('loaderPriorityLevelEffectivenessCheckScatter');
        const chartElement = document.getElementById('priorityLevelEffectivenessCheckScatter');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Effectiveness Check',
                    data: counts.map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    borderColor: '#f39c12',
                    backgroundColor: 'rgba(243, 156, 18, 0.5)',
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });

// Status Records (Scatter Chart)
fetch('/api/effectiveness-check-status-records')
    .then(response => response.json())
    .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        // Loader for Status Records
        const loader = document.getElementById('loaderEffectivenessCheckStatusRecordsScatter');
        const chartElement = document.getElementById('EffectivenessCheckStatusRecordsScatter');
        
        loader.style.display = 'none'; // Hide the loader
        chartElement.style.display = 'block'; // Show the chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Records',
                    data: counts.map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    borderColor: '#e74c3c',
                    backgroundColor: 'rgba(231, 76, 60, 0.5)',
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true
            }
        });
    });


    }
</script>

<!-- effectoveness check  records -->
<div id="effectivenesscheckTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="effectivenesscheckTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTableEffectivenessCheck()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetcheffectivenesscheckRecords() {
        $.ajax({
            url: '{{ route('api.records.effectivenesscheck') }}', // effectivenesscheck records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#effectivenesscheckTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, effectivenesscheck) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + effectivenesscheck.id + '</td>';
                    row += '<td>' + effectivenesscheck.record + '</td>';
                    row += '<td>' + effectivenesscheck.intiation_date + '</td>';
                    row += '<td>' + effectivenesscheck.short_description + '</td>';
                    row += '<td>' + effectivenesscheck.due_date + '</td>';
                    row += '<td>' + effectivenesscheck.effective_approval_complete_on + '</td>';
                    row += '<td>' + effectivenesscheck.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the effectivenesscheck table
    function toggleTableEffectivenessCheck() {
        var table = document.getElementById("effectivenesscheckTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetcheffectivenesscheckRecords(); // Fetch and display the effectivenesscheck records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- effectoveness check  records -->

<!-- Effectiveness Check Graph Ends -->

<br>
<!-- Calibration Management Graph Starts -->

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Calibration Management Section -->
  <div id="calibration-management-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleCalibrationManagementGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-cogs" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Calibration Management
  </div>

  <!-- Calibration Management Table Button -->
  <div id="calibration-management-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableCalibrationManagement()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Calibration Management Table
  </div>

</div>


<!-- Chart Type Buttons -->
<div id="CalibrationchartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barCalibriButton" class="btn btn-primary" onclick="showBarCalibriChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieCalibriButton" class="btn btn-primary" onclick="showPieCalibriChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineButtonCalibri" class="btn btn-primary" onclick="showLineCalibriChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterButtonCalibri" class="btn btn-primary" onclick="showScatterCalibriChart()"><i class="bi bi-cloud"></i></button>
</div>
<div id="CalibrationManagement" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <div class="spinner-container" id="loaderCalibrationManagementInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="CalibrationManagementInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of Calibration Management</h4>
        <div class="spinner-container" id="loaderCalibrationManagementPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="CalibrationManagementPostCategorization" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Delay and On Time</h4>
        <div class="spinner-container" id="loaderDelayedOntimeCalibrationManagement" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="delayedOntimeCalibrationManagement" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Check by Site</h4>
        <div class="spinner-container" id="loaderCalibrationManagementSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="CalibrationManagementSiteRecords" style="display: none;"></canvas>
    </div>
</div>
<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderpriorityLevelCalibrationManagement" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="priorityLevelCalibrationManagement" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Check by Status</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementStatus" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementStatusRecords" style="display: none;"></canvas>
    </div>
</div>
</div>
{{-- pie chart cord calibartion --}}

<div id="CalibrationManagementPie" style="display: none;">
<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of Calibration Management</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementPostCategorizationPie" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Delay and On Time</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderDelayedOntimeCalibrationManagementPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="delayedOntimeCalibrationManagementPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Check by Site</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementSiteRecordsPie" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderPriorityLevelCalibrationManagementPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="priorityLevelCalibrationManagementPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Check by Status</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementStatusRecordsPie" style="display: none;"></canvas>
    </div>
</div>

</div>

{{-- Line chart for calibration --}}

<div id="CalibrationManagementLine" style="display: none;">
<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of Calibration Management</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementPostCategorizationLine" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Delay and On Time</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderDelayedOntimeCalibrationManagementLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="delayedOntimeCalibrationManagementLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Check by Site</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementSiteRecordsLine" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderPriorityLevelCalibrationManagementLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="priorityLevelCalibrationManagementLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Calibration Management Check by Status</h4>
        <!-- Loader -->
        <div class="spinner-container" id="loaderCalibrationManagementStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <!-- Chart -->
        <canvas id="CalibrationManagementStatusRecordsLine" style="display: none;"></canvas>
    </div>
</div>
</div>

{{-- Scatter chart for calibration --}}

<div id="CalibrationManagementScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div class="spinner-container" id="loaderCalibrationManagementInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <!-- Chart -->
            <canvas id="CalibrationManagementInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Calibration Management</h4>
            <!-- Loader -->
            <div class="spinner-container" id="loaderCalibrationManagementPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <!-- Chart -->
            <canvas id="CalibrationManagementPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>


    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <!-- Loader and Chart for Delayed and On Time -->
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Calibration Management Delay and On Time</h4>
            <!-- Loader -->
            <div class="spinner-container" id="loaderDelayedOntimeCalibrationManagementScatter"
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <!-- Chart -->
            <canvas id="delayedOntimeCalibrationManagementScatter" style="display: none;"></canvas>
        </div>

        <!-- Loader and Chart for Site Records -->
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Calibration Management Check by Site</h4>
            <!-- Loader -->
            <div class="spinner-container" id="loaderCalibrationManagementSiteRecordsScatter"
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <!-- Chart -->
            <canvas id="CalibrationManagementSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <!-- Loader and Chart for Priority Levels -->
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div class="spinner-container" id="loaderPriorityLevelCalibrationManagementScatter"
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <!-- Chart -->
            <canvas id="priorityLevelCalibrationManagementScatter" style="display: none;"></canvas>
        </div>

        <!-- Loader and Chart for Status Records -->
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Calibration Management Check by Status</h4>
            <!-- Loader -->
            <div class="spinner-container" id="loaderCalibrationManagementStatusRecordsScatter"
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <!-- Chart -->
            <canvas id="CalibrationManagementStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>


<script>
    let chartsCalibrationManagement = false;

function toggleCalibrationManagementGraphs() {
    const graphContainers = [
        document.getElementById('CalibrationManagement'),
        document.getElementById('CalibrationManagementPie'),
        document.getElementById('CalibrationManagementLine'),
        document.getElementById('CalibrationManagementScatter') // Added CalibrationScatter
    ];
    const CalibrationchartButtons = document.getElementById('CalibrationchartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        CalibrationchartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to CalibrationManagement
        CalibrationchartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsCalibrationManagement) {
            initializeCalibrationManagementCharts();
            chartsCalibrationManagement = true;
        }
    }
}



    function showBarCalibriChart() {
        const barChartContainer = document.getElementById('CalibrationManagement');
        const pieChartContainer = document.getElementById('CalibrationManagementPie');
        const lineChartContainer = document.getElementById('CalibrationManagementLine');
        const scatterChartContainer = document.getElementById(
        'CalibrationManagementScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barCalibriButton').classList.add('btn-active');
        document.getElementById('pieCalibriButton').classList.remove('btn-active');
        document.getElementById('lineButtonCalibri').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterButtonCalibri').classList.remove('btn-active'); // Deactivate scatter button
    }

    // For Pie chart
    function showPieCalibriChart() {
        const barChartContainer = document.getElementById('CalibrationManagement');
        const pieChartContainer = document.getElementById('CalibrationManagementPie');
        const lineChartContainer = document.getElementById('CalibrationManagementLine');
        const scatterChartContainer = document.getElementById('CalibrationManagementScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('pieCalibriButton').classList.add('btn-active');
        document.getElementById('barCalibriButton').classList.remove('btn-active');
        document.getElementById('lineButtonCalibri').classList.remove('btn-active');
        document.getElementById('scatterButtonCalibri').classList.remove('btn-active');
    }

    // For Line chart
    function showLineCalibriChart() {
        const barChartContainer = document.getElementById('CalibrationManagement');
        const pieChartContainer = document.getElementById('CalibrationManagementPie');
        const lineChartContainer = document.getElementById('CalibrationManagementLine');
        const scatterChartContainer = document.getElementById('CalibrationManagementScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('lineButtonCalibri').classList.add('btn-active');
        document.getElementById('barCalibriButton').classList.remove('btn-active');
        document.getElementById('pieCalibriButton').classList.remove('btn-active');
        document.getElementById('scatterButtonCalibri').classList.remove('btn-active');
    }

    // For Scatter chart
    function showScatterCalibriChart() {
        const barChartContainer = document.getElementById('CalibrationManagement');
        const pieChartContainer = document.getElementById('CalibrationManagementPie');
        const lineChartContainer = document.getElementById('CalibrationManagementLine');
        const scatterChartContainer = document.getElementById('CalibrationManagementScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('scatterButtonCalibri').classList.add('btn-active');
        document.getElementById('barCalibriButton').classList.remove('btn-active');
        document.getElementById('pieCalibriButton').classList.remove('btn-active');
        document.getElementById('lineButtonCalibri').classList.remove('btn-active');
    }

    function initializeCalibrationManagementCharts() {
    // Initial Categorization
    fetch('/api/calibration-management-initial-categorization')
        .then(response => response.json())
        .then(data => {
            // Hide the loader and show the chart
            document.getElementById('loaderCalibrationManagementInitialCategorization').style.display = 'none';
            const chartElement = document.getElementById('CalibrationManagementInitialCategorization');
            chartElement.style.display = 'block';

            new Chart(chartElement, {
                type: 'bar',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        label: 'Calibration Management',
                        data: Object.values(data),
                        backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                        borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });

    // Post Categorization
    fetch('/api/calibration-management-post-categorization')
        .then(response => response.json())
        .then(data => {
            // Hide the loader and show the chart
            document.getElementById('loaderCalibrationManagementPostCategorization').style.display = 'none';
            const chartElement = document.getElementById('CalibrationManagementPostCategorization');
            chartElement.style.display = 'block';

            new Chart(chartElement, {
                type: 'bar',
                data: {
                    labels: Object.keys(data),
                    datasets: [{
                        label: 'Calibration Management',
                        data: Object.values(data),
                        backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                        borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });

    // Delayed and On Time
    fetch('/api/calibration-management-ontime-delayed-records')
        .then(response => response.json())
        .then(data => {
            // Hide the loader and show the chart
            document.getElementById('loaderDelayedOntimeCalibrationManagement').style.display = 'none';
            const chartElement = document.getElementById('delayedOntimeCalibrationManagement');
            chartElement.style.display = 'block';

            new Chart(chartElement, {
                type: 'bar',
                data: {
                    labels: ['On Time', 'Delayed'],
                    datasets: [{
                        label: 'Calibration Management',
                        data: [data['On Time'], data['Delayed']],
                        backgroundColor: ['#4caf50', '#f44336'],
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });

    // Site Records
    fetch('/api/calibration-management-sitewise-records')
        .then(response => response.json())
        .then(data => {
            // Hide the loader and show the chart
            document.getElementById('loaderCalibrationManagementSiteRecords').style.display = 'none';
            const chartElement = document.getElementById('CalibrationManagementSiteRecords');
            chartElement.style.display = 'block';

            new Chart(chartElement, {
                type: 'bar',
                data: {
                    labels: data.map(item => item.division_name),
                    datasets: [{
                        label: 'Records',
                        data: data.map(item => item.count),
                        backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });

      // Priority Levels Chart with loader
fetch('/api/calibration-management-priority-records')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderpriorityLevelCalibrationManagement').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelCalibrationManagement');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Calibration Management',
                    data: Object.values(data),
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

// Status Records Chart with loader
fetch('/api/calibration-management-status-records')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderCalibrationManagementStatus').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'bar',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Records',
                    data: Object.values(data),
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });

        // -pie script calibration ------
      // Initial Categorization (Pie)
fetch('/api/calibration-management-initial-categorization')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementInitialCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementInitialCategorizationPie');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Calibration Management',
                    data: Object.values(data),
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Post Categorization (Pie)
fetch('/api/calibration-management-post-categorization')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementPostCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementPostCategorizationPie');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Calibration Management',
                    data: Object.values(data),
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Delayed and On Time (Pie)
fetch('/api/calibration-management-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderDelayedOntimeCalibrationManagementPie').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeCalibrationManagementPie');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Calibration Management',
                    data: [data['On Time'], data['Delayed']],
                    backgroundColor: ['#4caf50', '#f44336'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Site Records (Pie)
fetch('/api/calibration-management-sitewise-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementSiteRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementSiteRecordsPie');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: data.map(item => item.division_name),
                datasets: [{
                    label: 'Records',
                    data: data.map(item => item.count),
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Priority Levels (Pie)
fetch('/api/calibration-management-priority-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderPriorityLevelCalibrationManagementPie').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelCalibrationManagementPie');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Calibration Management',
                    data: Object.values(data),
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

// Status Records (Pie)
fetch('/api/calibration-management-status-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementStatusRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementStatusRecordsPie');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Records',
                    data: Object.values(data),
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
            }
        });
    });

        // ;ine script calibration

    // Function to show the loader and hide the chart
function showLoader(chartId, loaderId) {
    document.getElementById(loaderId).style.display = 'block';
    document.getElementById(chartId).style.display = 'none';
}

// Function to hide the loader and display the chart
function hideLoader(chartId, loaderId) {
    document.getElementById(loaderId).style.display = 'none';
    document.getElementById(chartId).style.display = 'block';
}

// Initial Categorization (Line)
fetch('/api/calibration-management-initial-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        showLoader('CalibrationManagementInitialCategorizationLine', 'loaderCalibrationManagementInitialCategorizationLine');
        
        new Chart(document.getElementById('CalibrationManagementInitialCategorizationLine'), {
            type: 'line',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Calibration Management',
                    data: counts,
                    borderColor: '#3498db',
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
            }
        });
        
        hideLoader('CalibrationManagementInitialCategorizationLine', 'loaderCalibrationManagementInitialCategorizationLine');
    });

// Post Categorization (Line)
fetch('/api/calibration-management-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        showLoader('CalibrationManagementPostCategorizationLine', 'loaderCalibrationManagementPostCategorizationLine');
        
        new Chart(document.getElementById('CalibrationManagementPostCategorizationLine'), {
            type: 'line',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Calibration Management',
                    data: counts,
                    borderColor: '#3498db',
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
            }
        });

        hideLoader('CalibrationManagementPostCategorizationLine', 'loaderCalibrationManagementPostCategorizationLine');
    });

// Delayed and On Time (Line)
fetch('/api/calibration-management-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        showLoader('delayedOntimeCalibrationManagementLine', 'loaderDelayedOntimeCalibrationManagementLine');
        
        new Chart(document.getElementById('delayedOntimeCalibrationManagementLine'), {
            type: 'line',
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Calibration Management',
                    data: [data['On Time'], data['Delayed']],
                    borderColor: '#4caf50',
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
            }
        });

        hideLoader('delayedOntimeCalibrationManagementLine', 'loaderDelayedOntimeCalibrationManagementLine');
    });

// Site Records (Line)
fetch('/api/calibration-management-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        showLoader('CalibrationManagementSiteRecordsLine', 'loaderCalibrationManagementSiteRecordsLine');
        
        new Chart(document.getElementById('CalibrationManagementSiteRecordsLine'), {
            type: 'line',
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    borderColor: '#42a5f5',
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
            }
        });

        hideLoader('CalibrationManagementSiteRecordsLine', 'loaderCalibrationManagementSiteRecordsLine');
    });

// Priority Levels (Line)
fetch('/api/calibration-management-priority-records')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        showLoader('priorityLevelCalibrationManagementLine', 'loaderPriorityLevelCalibrationManagementLine');
        
        new Chart(document.getElementById('priorityLevelCalibrationManagementLine'), {
            type: 'line',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Calibration Management',
                    data: counts,
                    borderColor: '#3498db',
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
            }
        });

        hideLoader('priorityLevelCalibrationManagementLine', 'loaderPriorityLevelCalibrationManagementLine');
    });

// Status Records (Line)
fetch('/api/calibration-management-status-records')
    .then(response => response.json())
    .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        showLoader('CalibrationManagementStatusRecordsLine', 'loaderCalibrationManagementStatusRecordsLine');
        
        new Chart(document.getElementById('CalibrationManagementStatusRecordsLine'), {
            type: 'line',
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    borderColor: '#42a5f5',
                    borderWidth: 2,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
            }
        });

        hideLoader('CalibrationManagementStatusRecordsLine', 'loaderCalibrationManagementStatusRecordsLine');
    });
        // script scatter chart calibration 

        // Combined Scatter Chart Script

        // Initial Categorization (Scatter)


        
      // Initial Categorization (Scatter)
fetch('/api/calibration-management-initial-categorization')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementInitialCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementInitialCategorizationScatter');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Initial Categorization',
                    data: Object.values(data).map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    backgroundColor: '#3498db',
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Category Index'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    }
                }
            }
        });
    });

// Post Categorization (Scatter)
fetch('/api/calibration-management-post-categorization')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementPostCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementPostCategorizationScatter');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Post Categorization',
                    data: Object.values(data).map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    backgroundColor: '#2ecc71',
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Category Index'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    }
                }
            }
        });
    });
// Delayed and On Time (Scatter)
fetch('/api/calibration-management-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderDelayedOntimeCalibrationManagementScatter').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeCalibrationManagementScatter');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'On Time vs Delayed',
                    data: [
                        { x: 0, y: data['On Time'] },
                        { x: 1, y: data['Delayed'] }
                    ],
                    backgroundColor: ['#4caf50', '#f44336'],
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: '0: On Time | 1: Delayed'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    }
                }
            }
        });
    });

// Site Records (Scatter)
fetch('/api/calibration-management-sitewise-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementSiteRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementSiteRecordsScatter');
        chartElement.style.display = 'block';

        const counts = data.map(item => item.count);
        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Site Records',
                    data: counts.map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    backgroundColor: '#42a5f5',
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Division Index'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    }
                }
            }
        });
    });

// Priority Levels (Scatter)
fetch('/api/calibration-management-priority-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderPriorityLevelCalibrationManagementScatter').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelCalibrationManagementScatter');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Priority Levels',
                    data: Object.values(data).map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    backgroundColor: '#2ecc71',
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Priority Index'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    }
                }
            }
        });
    });

// Status Records (Scatter)
fetch('/api/calibration-management-status-records')
    .then(response => response.json())
    .then(data => {
        // Hide loader and show chart
        document.getElementById('loaderCalibrationManagementStatusRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('CalibrationManagementStatusRecordsScatter');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Status Records',
                    data: Object.values(data).map((count, index) => ({
                        x: index,
                        y: count
                    })),
                    backgroundColor: '#f39c12',
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Status Index'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    }
                }
            }
        });
    });

    }
</script>

<!-- CalibrationManagement Records -->
<div id="CalibrationManagementTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="CalibrationManagementTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Calibration Frequency</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTableCalibrationManagement()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchCalibrationManagementRecords() {
        $.ajax({
            url: '{{ route('api.records.CalibrationManagement') }}', // CalibrationManagement records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#CalibrationManagementTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, CalibrationManagement) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + CalibrationManagement.id + '</td>';
                    row += '<td>' + CalibrationManagement.record + '</td>';
                    row += '<td>' + CalibrationManagement.intiation_date + '</td>';
                    row += '<td>' + CalibrationManagement.callibration_frequency + '</td>';
                    row += '<td>' + CalibrationManagement.short_description + '</td>';
                    row += '<td>' + CalibrationManagement.due_date + '</td>';
                    row += '<td>' + CalibrationManagement.QA_Approval_on + '</td>';
                    row += '<td>' + CalibrationManagement.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the CalibrationManagement table
    function toggleTableCalibrationManagement() {
        var table = document.getElementById("CalibrationManagementTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchCalibrationManagementRecords(); // Fetch and display the CalibrationManagement records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- CalibrationManagement Records -->

<!-- Calibration Management Graph Ends -->


<!-- Supplier Audit Graph Starts -->
<br>
<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Supplier Audit Section -->
  <div id="supplier-audit-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleSupplierAuditGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-clipboard-check" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Supplier Audit
  </div>

  <!-- Supplier Audit Table Button -->
  <div id="supplier-audit-table" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleTableSupplierAudit()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Supplier Audit Table
  </div>

</div>

<!-- Chart Type Buttons -->
<div id="SupplierAuditchartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barSupplierButton" class="btn btn-primary" onclick="showBarSupplierChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieSupplierButton" class="btn btn-primary" onclick="showPieSupplierChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineButtonSupplier" class="btn btn-primary" onclick="showLineSupplierChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterButtonSupplier" class="btn btn-primary" onclick="showScatterSupplierChart()"><i class="bi bi-cloud"></i></button>
</div>
<!-- Supplier Audit Container -->
<div id="SupplierAudit" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderInitialCategorizationSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditInitialCategorization" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Supplier Audit</h4>
      <!-- Loader -->
      <div id="loaderPostCategorizationSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Supplier Audit Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeSupplierAudit" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Site</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelSupplierAudit" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Status</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- pie chart code  --}}

<!-- Supplier Audit Pie Chart Container -->
<div id="SupplierAuditPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderInitialCategorizationPieSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Supplier Audit</h4>
      <!-- Loader -->
      <div id="loaderPostCategorizationPieSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Supplier Audit Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimePieSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeSupplierAuditPie" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Site</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditSiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelPieSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelSupplierAuditPie" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Status</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- Line Chart Code --}}
<!-- Supplier Audit Line Chart Container -->
<div id="SupplierAuditLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderInitialCategorizationLineSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Supplier Audit</h4>
      <!-- Loader -->
      <div id="loaderPostCategorizationLineSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Supplier Audit Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeLineSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeSupplierAuditLine" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Site</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelLineSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelSupplierAuditLine" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Status</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>

{{-- Scatter Chart Code --}}
<!-- Supplier Audit Scatter Chart Container -->
<div id="SupplierAuditScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderInitialCategorizationScatterSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Supplier Audit</h4>
      <!-- Loader -->
      <div id="loaderPostCategorizationScatterSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Supplier Audit Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeScatterSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeSupplierAuditScatter" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Site</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditSiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelScatterSupplierAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelSupplierAuditScatter" style="display: none;"></canvas>
    </div>

    <!-- Supplier Audit by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Supplier Audit by Status</h4>
      <!-- Loader -->
      <div id="loaderSupplierAuditStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="SupplierAuditStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>



<script>
   let chartsSupplierAudit = false;

function toggleSupplierAuditGraphs() {
    const graphContainers = [
        document.getElementById('SupplierAudit'),
        document.getElementById('SupplierAuditPie'),
        document.getElementById('SupplierAuditLine'),
        document.getElementById('SupplierAuditScatter') // Added SupplierAuditScatter
    ];
    const SupplierAuditchartButtons = document.getElementById('SupplierAuditchartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        SupplierAuditchartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to SupplierAudit
        SupplierAuditchartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsSupplierAudit) {
            initializeSupplierAuditCharts();
            chartsSupplierAudit = true;
        }
    }
}

    // Function to show Bar Chart
    function showBarSupplierChart() {
        const barChartContainer = document.getElementById('SupplierAudit');
        const pieChartContainer = document.getElementById('SupplierAuditPie');
        const lineChartContainer = document.getElementById('SupplierAuditLine');
        const scatterChartContainer = document.getElementById(
        'SupplierAuditScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barSupplierButton').classList.add('btn-active');
        document.getElementById('pieSupplierButton').classList.remove('btn-active');
        document.getElementById('lineButtonSupplier').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterButtonSupplier').classList.remove('btn-active'); // Deactivate scatter button
    }

    function showPieSupplierChart() {
        const barChartContainer = document.getElementById('SupplierAudit');
        const pieChartContainer = document.getElementById('SupplierAuditPie');
        const lineChartContainer = document.getElementById('SupplierAuditLine');
        const scatterChartContainer = document.getElementById('SupplierAuditScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barSupplierButton').classList.remove('btn-active');
        document.getElementById('pieSupplierButton').classList.add('btn-active');
        document.getElementById('lineButtonSupplier').classList.remove('btn-active');
        document.getElementById('scatterButtonSupplier').classList.remove('btn-active');
    }

    function showLineSupplierChart() {
        const barChartContainer = document.getElementById('SupplierAudit');
        const pieChartContainer = document.getElementById('SupplierAuditPie');
        const lineChartContainer = document.getElementById('SupplierAuditLine');
        const scatterChartContainer = document.getElementById('SupplierAuditScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barSupplierButton').classList.remove('btn-active');
        document.getElementById('pieSupplierButton').classList.remove('btn-active');
        document.getElementById('lineButtonSupplier').classList.add('btn-active');
        document.getElementById('scatterButtonSupplier').classList.remove('btn-active');
    }

    function showScatterSupplierChart() {
        const barChartContainer = document.getElementById('SupplierAudit');
        const pieChartContainer = document.getElementById('SupplierAuditPie');
        const lineChartContainer = document.getElementById('SupplierAuditLine');
        const scatterChartContainer = document.getElementById('SupplierAuditScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('barSupplierButton').classList.remove('btn-active');
        document.getElementById('pieSupplierButton').classList.remove('btn-active');
        document.getElementById('lineButtonSupplier').classList.remove('btn-active');
        document.getElementById('scatterButtonSupplier').classList.add('btn-active');
    }


    function initializeSupplierAuditCharts() {
        // Initial Categorization
        fetch('/api/supplier-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInitialCategorizationSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/supplier-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPostCategorizationSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditPostCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/supplier-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

               document.getElementById('loaderDelayedOntimeSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierAudit');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Supplier Audit',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/supplier-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderSupplierAuditSiteRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditSiteRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/supplier-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierAudit');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/supplier-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderSupplierAuditStatusRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditStatusRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // script for pie suppley
        // Initial Categorization (Pie Chart)
        fetch('/api/supplier-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInitialCategorizationPieSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Post Categorization (Pie Chart)
        fetch('/api/supplier-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPostCategorizationPieSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditPostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#e57373', '#fbc02d', '#81c784'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time (Pie Chart)
        fetch('/api/supplier-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimePieSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierAuditPie');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records (Pie Chart)
        fetch('/api/supplier-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderSupplierAuditSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });
        // Priority Levels - Pie Chart
        fetch('/api/supplier-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelPieSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierAuditPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records - Pie Chart
        fetch('/api/supplier-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderSupplierAuditStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // script for line supplwey
        // Initial Categorization (Line Chart)

        // Initial Categorization - Line Chart
        fetch('/api/supplier-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInitialCategorizationLineSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: '#3498db',
                            borderColor: '#3498db',
                            fill: false,
                            tension: 0.4, // For smooth curve lines
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization - Line Chart
        fetch('/api/supplier-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPostCategorizationLineSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: '#2ecc71',
                            borderColor: '#2ecc71',
                            fill: false,
                            tension: 0.4,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time - Line Chart
        fetch('/api/supplier-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeLineSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierAuditLine');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Supplier Audit',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: '#f44336',
                            borderColor: '#f44336',
                            fill: false,
                            tension: 0.4,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records - Line Chart
        fetch('/api/supplier-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderSupplierAuditSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: '#42a5f5',
                            borderColor: '#42a5f5',
                            fill: false,
                            tension: 0.4,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels - Line Chart
        fetch('/api/supplier-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelLineSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierAuditLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier Audit',
                            data: counts,
                            backgroundColor: '#f39c12',
                            borderColor: '#f39c12',
                            fill: false,
                            tension: 0.4,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records - Line Chart
        fetch('/api/supplier-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderSupplierAuditStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: '#66bb6a',
                            borderColor: '#66bb6a',
                            fill: false,
                            tension: 0.4,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });


        // scattter chart script for suppleraudit 
        // Initial Categorization - Scatter Chart
        fetch('/api/supplier-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((category, index) => ({
                    x: index,
                    y: data[category]
                }));

                document.getElementById('loaderInitialCategorizationScatterSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Supplier Audit - Initial Categorization',
                            data: scatterData,
                            backgroundColor: '#3498db',
                            borderColor: '#3498db',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization - Scatter Chart
        fetch('/api/supplier-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((category, index) => ({
                    x: index,
                    y: data[category]
                }));

                document.getElementById('loaderPostCategorizationScatterSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Supplier Audit - Post Categorization',
                            data: scatterData,
                            backgroundColor: '#2ecc71',
                            borderColor: '#2ecc71',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time - Scatter Chart
        fetch('/api/supplier-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = [{
                        x: 0,
                        y: data['On Time']
                    },
                    {
                        x: 1,
                        y: data['Delayed']
                    }
                ];

                document.getElementById('loaderDelayedOntimeScatterSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierAuditScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'On Time vs Delayed',
                            data: scatterData,
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderColor: ['#4caf50', '#f44336'],
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records - Scatter Chart
        fetch('/api/supplier-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = data.map((item, index) => ({
                    x: index,
                    y: item.count
                }));

                document.getElementById('loaderSupplierAuditSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Site-wise Records',
                            data: scatterData,
                            backgroundColor: '#42a5f5',
                            borderColor: '#42a5f5',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels - Scatter Chart
        fetch('/api/supplier-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((category, index) => ({
                    x: index,
                    y: data[category]
                }));

                document.getElementById('loaderPriorityLevelScatterSupplierAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierAuditScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Priority Levels',
                            data: scatterData,
                            backgroundColor: '#f39c12',
                            borderColor: '#f39c12',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records - Scatter Chart
        fetch('/api/supplier-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((status, index) => ({
                    x: index,
                    y: data[status]
                }));

                document.getElementById('loaderSupplierAuditStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierAuditStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Status Records',
                            data: scatterData,
                            backgroundColor: '#66bb6a',
                            borderColor: '#66bb6a',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
    }
</script>

<!-- Supplier Audit Records-->
<div id="SupplierAuditTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="SupplierAuditTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleTableSupplierAudit()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchSupplierAuditRecords() {
        $.ajax({
            url: '{{ route('api.records.SupplierAudit') }}', // SupplierAudit records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#SupplierAuditTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, SupplierAudit) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + SupplierAudit.id + '</td>';
                    row += '<td>' + SupplierAudit.record + '</td>';
                    row += '<td>' + SupplierAudit.intiation_date + '</td>';
                    row += '<td>' + SupplierAudit.Initiator_Group + '</td>';
                    row += '<td>' + SupplierAudit.severity_level + '</td>';
                    row += '<td>' + SupplierAudit.short_description + '</td>';
                    row += '<td>' + SupplierAudit.due_date + '</td>';
                    row += '<td>' + SupplierAudit.audit_lead_more_info_reqd_on + '</td>';
                    row += '<td>' + SupplierAudit.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the SupplierAudit table
    function toggleTableSupplierAudit() {
        var table = document.getElementById("SupplierAuditTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchSupplierAuditRecords(); // Fetch and display the SupplierAudit records
        } else {
            table.style.display = "none";
        }
    }
</script>

<!-- Supplier Audit Records-->

<!-- Supplier Audit Graph Ends -->



<!-- Supplier Graph Starts -->
 <br>

 <div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

<!-- Supplier Section -->
<div id="supplier-control" 
     style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
     onclick="toggleSupplierGraphs()" 
     onmouseover="this.style.color='#000';" 
     onmouseout="this.style.color='#eca035';">
     <i class="fas fa-truck" style="margin-right: 8px;"></i> <!-- Icon Added -->
     Supplier
</div>

<!-- Supplier Graphs Toggle Button -->
<div id="supplier-graphs-toggle" 
     style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
     onclick="toggleSuppliertable()" 
     onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
     onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
     <span style="margin-right: 8px; font-size: 20px;">📋</span> Supplier Table
</div>

</div>



<!-- Chart Type Buttons -->
<div id="SupplerchartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barsuppButton" class="btn btn-primary" onclick="showBarsuppChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="piesuppButton" class="btn btn-primary" onclick="showPiesuppChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineButtonsupp" class="btn btn-primary" onclick="showLinesuppChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterButtonsupp" class="btn btn-primary" onclick="showScattersuppChart()"><i class="bi bi-cloud"></i></button>
</div>
<div id="Supplier" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderSupplierInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierInitialCategorization" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Supplier</h4>
            <!-- Loader -->
            <div id="loaderSupplierPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierPostCategorization" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeSupplier" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeSupplier" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Site</h4>
            <!-- Loader -->
            <div id="loaderSupplierSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelSupplier" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelSupplier" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Status</h4>
            <!-- Loader -->
            <div id="loaderSupplierStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierStatusRecords" style="display: none;"></canvas>
        </div>
    </div>
</div>



{{-- Pie chart supp --}}
<div id="SupplierPie" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderSupplierInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierInitialCategorizationPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Supplier</h4>
            <!-- Loader -->
            <div id="loaderSupplierPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierPostCategorizationPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeSupplierPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeSupplierPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Site</h4>
            <!-- Loader -->
            <div id="loaderSupplierSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierSiteRecordsPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelSupplierPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelSupplierPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Status</h4>
            <!-- Loader -->
            <div id="loaderSupplierStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierStatusRecordsPie" style="display: none;"></canvas>
        </div>
    </div>
</div>


{{-- line chart supp --}}

<div id="SupplierLine" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderSupplierInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Supplier</h4>
            <!-- Loader -->
            <div id="loaderSupplierPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierPostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeSupplierLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeSupplierLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Site</h4>
            <!-- Loader -->
            <div id="loaderSupplierSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelSupplierLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelSupplierLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Status</h4>
            <!-- Loader -->
            <div id="loaderSupplierStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
</div>

{{-- Scatter chart for supp --}}

<div id="SupplierScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderSupplierInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Supplier</h4>
            <!-- Loader -->
            <div id="loaderSupplierPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeSupplierScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeSupplierScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Site</h4>
            <!-- Loader -->
            <div id="loaderSupplierSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelSupplierScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelSupplierScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Supplier by Status</h4>
            <!-- Loader -->
            <div id="loaderSupplierStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="SupplierStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>


<script>
    let chartsSupplier = false;

function toggleSupplierGraphs() {
    const graphContainers = [
        document.getElementById('Supplier'),
        document.getElementById('SupplierPie'),
        document.getElementById('SupplierLine'),
        document.getElementById('SupplierScatter') // Added SupplierScatter
    ];
    const SupplerchartButtons = document.getElementById('SupplerchartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        SupplerchartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to Supplier
        SupplerchartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsSupplier) {
            initializeSupplierCharts();
            chartsSupplier = true;
        }
    }
}
    // 
    function showBarsuppChart() {
        const barChartContainer = document.getElementById('Supplier');
        const pieChartContainer = document.getElementById('SupplierPie');
        const lineChartContainer = document.getElementById('SupplierLine');
        const scatterChartContainer = document.getElementById(
        'SupplierScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barsuppButton').classList.add('btn-active');
        document.getElementById('piesuppButton').classList.remove('btn-active');
        document.getElementById('lineButtonsupp').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterButtonsupp').classList.remove('btn-active'); // Deactivate scatter button
    }

    // Function to show Pie Chart
    function showPiesuppChart() {
        const barChartContainer = document.getElementById('Supplier');
        const pieChartContainer = document.getElementById('SupplierPie');
        const lineChartContainer = document.getElementById('SupplierLine');
        const scatterChartContainer = document.getElementById('SupplierScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barsuppButton').classList.remove('btn-active');
        document.getElementById('piesuppButton').classList.add('btn-active');
        document.getElementById('lineButtonsupp').classList.remove('btn-active');
        document.getElementById('scatterButtonsupp').classList.remove('btn-active');
    }

    // Function to show Line Chart
    function showLinesuppChart() {
        const barChartContainer = document.getElementById('Supplier');
        const pieChartContainer = document.getElementById('SupplierPie');
        const lineChartContainer = document.getElementById('SupplierLine');
        const scatterChartContainer = document.getElementById('SupplierScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barsuppButton').classList.remove('btn-active');
        document.getElementById('piesuppButton').classList.remove('btn-active');
        document.getElementById('lineButtonsupp').classList.add('btn-active');
        document.getElementById('scatterButtonsupp').classList.remove('btn-active');
    }

    // Function to show Scatter Chart
    function showScattersuppChart() {
        const barChartContainer = document.getElementById('Supplier');
        const pieChartContainer = document.getElementById('SupplierPie');
        const lineChartContainer = document.getElementById('SupplierLine');
        const scatterChartContainer = document.getElementById('SupplierScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('barsuppButton').classList.remove('btn-active');
        document.getElementById('piesuppButton').classList.remove('btn-active');
        document.getElementById('lineButtonsupp').classList.remove('btn-active');
        document.getElementById('scatterButtonsupp').classList.add('btn-active');
    }

    function initializeSupplierCharts() {
        // Initial Categorization
        fetch('/api/supplier-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderSupplierInitialCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/supplier-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderSupplierPostCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierPostCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/supplier-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeSupplier').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplier');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Supplier',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/supplier-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderSupplierSiteRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierSiteRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/supplier-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelSupplier').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplier');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Supplier',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/supplier-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderSupplierStatusRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierStatusRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // pie script 
        // Initial Categorization
        fetch('/api/supplier-initial-categorization')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderSupplierInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Supplier',
                            data: Object.values(data),
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                        }]
                    },
                    options: {
                        responsive: true, // Ensure it adapts to the container
                        maintainAspectRatio: false, // Disable default aspect ratio
                        aspectRatio: 1.5, // Adjust the aspect ratio (lower value -> larger chart, higher value -> smaller chart)
                        plugins: {
                            legend: {
                                position: 'top', // Position the legend on top
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/supplier-post-categorization')
            .then(response => response.json())
            .then(data => {


                document.getElementById('loaderSupplierPostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierPostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Supplier',
                            data: Object.values(data),
                            backgroundColor: ['#3498db', '#e74c3c', '#9b59b6'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/supplier-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeSupplierPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Supplier',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records
        fetch('/api/supplier-sitewise-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderSupplierSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: data.map(item => item.division_name),
                        datasets: [{
                            label: 'Records',
                            data: data.map(item => item.count),
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                        }]
                    },
                    options: {
                        responsive: true, // Ensure it adapts to the container
                        maintainAspectRatio: false, // Disable default aspect ratio
                        aspectRatio: 1.5, // Adjust the aspect ratio (lower value -> larger chart, higher value -> smaller chart)
                        plugins: {
                            legend: {
                                position: 'top', // Position the legend on top
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/supplier-priority-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderPriorityLevelSupplierPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierPie');
                chartElement.style.display = 'block';


                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Supplier',
                            data: Object.values(data),
                            backgroundColor: ['#e74c3c', '#8e44ad', '#3498db'],
                        }]
                    },
                    options: {
                        responsive: true, // Ensure it adapts to the container
                        maintainAspectRatio: false, // Disable default aspect ratio
                        aspectRatio: 1.5, // Adjust the aspect ratio (lower value -> larger chart, higher value -> smaller chart)
                        plugins: {
                            legend: {
                                position: 'top', // Position the legend on top
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/supplier-status-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderSupplierStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Records',
                            data: Object.values(data),
                            backgroundColor: ['#2ecc71', '#e67e22', '#34495e'],
                        }]
                    },
                    options: {
                        responsive: true, // Ensure it adapts to the container
                        maintainAspectRatio: false, // Disable default aspect ratio
                        aspectRatio: 1.5, // Adjust the aspect ratio (lower value -> larger chart, higher value -> smaller chart)
                        plugins: {
                            legend: {
                                position: 'top', // Position the legend on top
                            }
                        }
                    }
                });
            });
        // line chart code supp

        // Initial Categorization
        fetch('/api/supplier-initial-categorization')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderSupplierInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Supplier',
                            data: Object.values(data),
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            fill: true
                        }]
                    }
                });
            });

        // Post Categorization
        fetch('/api/supplier-post-categorization')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderSupplierPostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Supplier',
                            data: Object.values(data),
                            borderColor: '#e74c3c',
                            backgroundColor: 'rgba(231, 76, 60, 0.2)',
                            fill: true
                        }]
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/supplier-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeSupplierLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Supplier',
                            data: [data['On Time'], data['Delayed']],
                            borderColor: '#4caf50',
                            backgroundColor: 'rgba(76, 175, 80, 0.2)',
                            fill: true
                        }]
                    }
                });
            });

        // Site Records
        fetch('/api/supplier-sitewise-records')
            .then(response => response.json())
            .then(data => {
              document.getElementById('loaderSupplierSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: data.map(item => item.division_name),
                        datasets: [{
                            label: 'Records',
                            data: data.map(item => item.count),
                            borderColor: '#42a5f5',
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            fill: true
                        }]
                    }
                });
            });

        // Priority Levels
        fetch('/api/supplier-priority-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderPriorityLevelSupplierLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: Object.keys(data),
                        datasets: [{
                            label: 'Supplier',
                            data: Object.values(data),
                            borderColor: '#f39c12',
                            backgroundColor: 'rgba(243, 156, 18, 0.2)',
                            fill: true
                        }]
                    }
                });
            });
        // line scatter chart 
        fetch('/api/supplier-status-records')
            .then(response => response.json())
            .then(data => {
                const labels = Object.keys(data);
                const values = Object.values(data);

                document.getElementById('loaderSupplierStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Supplier Status Records',
                            data: values,
                            backgroundColor: 'rgba(46, 204, 113, 0.2)', // Light green color for the fill
                            borderColor: '#2ecc71', // Green color for the line
                            borderWidth: 2,
                            pointBackgroundColor: '#2ecc71', // Color of points
                            pointRadius: 5,
                            fill: true, // Whether to fill the area under the line
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // scatter chart script for supp
        // Initial Categorization
        fetch('/api/supplier-initial-categorization')
            .then(response => response.json())
            .then(data => {

                const scatterData = Object.entries(data).map(([key, value], index) => ({
                    x: index + 1,
                    y: value
                }));

                document.getElementById('loaderSupplierInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Supplier Initial Categorization',
                            data: scatterData,
                            backgroundColor: '#3498db',
                            borderColor: '#2980b9',
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Categories'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/supplier-post-categorization')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.entries(data).map(([key, value], index) => ({
                    x: index + 1,
                    y: value
                }));

                document.getElementById('loaderSupplierPostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Supplier Post Categorization',
                            data: scatterData,
                            backgroundColor: '#e74c3c',
                            borderColor: '#c0392b',
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Categories'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/supplier-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = [{
                        x: 1,
                        y: data['On Time']
                    },
                    {
                        x: 2,
                        y: data['Delayed']
                    }
                ];

                document.getElementById('loaderDelayedOntimeSupplierScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeSupplierScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'On Time vs Delayed',
                            data: scatterData,
                            backgroundColor: '#4caf50',
                            borderColor: '#388e3c',
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: '1: On Time, 2: Delayed'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/supplier-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = data.map((item, index) => ({
                    x: index + 1,
                    y: item.count
                }));

                document.getElementById('loaderSupplierSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Supplier Site Records',
                            data: scatterData,
                            backgroundColor: '#42a5f5',
                            borderColor: '#1976d2',
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Sites'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/supplier-priority-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.entries(data).map(([key, value], index) => ({
                    x: index + 1,
                    y: value
                }));

                document.getElementById('loaderPriorityLevelSupplierScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelSupplierScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Priority Levels',
                            data: scatterData,
                            backgroundColor: '#f39c12',
                            borderColor: '#e67e22',
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Categories'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/supplier-status-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.entries(data).map(([key, value], index) => ({
                    x: index + 1,
                    y: value
                }));

                document.getElementById('loaderSupplierStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('SupplierStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Supplier Status Records',
                            data: scatterData,
                            backgroundColor: '#2ecc71',
                            borderColor: '#27ae60',
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Statuses'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });
    }
</script>


<!-- Supplier Records -->
<div id="SupplierTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="SupplierTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Manufacturer Rejected on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleSuppliertable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchSupplierRecords() {
        $.ajax({
            url: '{{ route('api.records.Supplier') }}', // Supplier records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#SupplierTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, Supplier) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + Supplier.id + '</td>';
                    row += '<td>' + Supplier.record + '</td>';
                    row += '<td>' + Supplier.intiation_date + '</td>';
                    row += '<td>' + Supplier.initiation_group + '</td>';
                    row += '<td>' + Supplier.short_description + '</td>';
                    row += '<td>' + Supplier.due_date + '</td>';
                    row += '<td>' + Supplier.pendingManufacturerAuditFailed_on + '</td>';
                    row += '<td>' + Supplier.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the Supplier table
    function toggleSuppliertable() {
        var table = document.getElementById("SupplierTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchSupplierRecords(); // Fetch and display the Supplier records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Supplier Records -->

<!-- Supplier  Graph Ends -->

<br>

<!-- Root Cause Analysis Graph Starts -->

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Root Cause Analysis Section -->
  <div id="root-cause-analysis-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleRootCauseAnalysisGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-search" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Root Cause Analysis
  </div>

  <!-- Root Cause Analysis Graphs Toggle Button -->
  <div id="root-cause-analysis-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleRootCauseAnalysisTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Root Cause Table
  </div>

</div>

<!-- Container for Chart Buttons (Initially Hidden) -->
<div id="rootchartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barRootButton" class="btn btn-primary" onclick="showBarRootChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieRootButton" class="btn btn-primary" onclick="showPieRootChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineButtonRoot" class="btn btn-primary" onclick="showLineRootChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterButtonRoot" class="btn btn-primary" onclick="showScatterRootChart()"><i class="bi bi-cloud"></i></button>
</div>

<!-- Root Cause Analysis Section -->
<div id="RootCauseAnalysis" style="display: none;">
  <!-- Initial Categorization and Post Categorization -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisInitialCategorization" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Root Cause Analysis</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Root Cause Analysis Delay and On Time and Site Records -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeRootCauseAnalysis" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeRootCauseAnalysis" style="display: none;"></canvas>
    </div>

    <!-- Site Records -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis by Site</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Priority Levels and Status Records -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelRootCauseAnalysis" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelRootCauseAnalysis" style="display: none;"></canvas>
    </div>

    <!-- Root Cause Analysis by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis by Status</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- pie chart code root --}}
<!-- Root Cause Analysis Section -->
<div id="RootCauseAnalysisPie" style="display: none;">
  <!-- Initial Categorization and Post Categorization -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Root Cause Analysis</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Root Cause Analysis Delay and On Time and Site Records -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeRootCauseAnalysisPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeRootCauseAnalysisPie" style="display: none;"></canvas>
    </div>

    <!-- Site Records -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis by Site</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisSiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Priority Levels and Status Records -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelRootCauseAnalysisPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelRootCauseAnalysisPie" style="display: none;"></canvas>
    </div>

    <!-- Root Cause Analysis by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis by Status</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>



{{-- Line chart code root --}}
<!-- Root Cause Analysis Section -->
<div id="RootCauseAnalysisLine" style="display: none;">
  <!-- Initial Categorization and Post Categorization -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Root Cause Analysis</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Root Cause Analysis Delay and On Time and Site Records -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis Delay and On Time</h4>
      <!-- Loader -->
      <div id="loaderDelayedOntimeRootCauseAnalysisLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeRootCauseAnalysisLine" style="display: none;"></canvas>
    </div>

    <!-- Site Records -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis by Site</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Priority Levels and Status Records -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <!-- Loader -->
      <div id="loaderPriorityLevelRootCauseAnalysisLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelRootCauseAnalysisLine" style="display: none;"></canvas>
    </div>

    <!-- Root Cause Analysis by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Root Cause Analysis by Status</h4>
      <!-- Loader -->
      <div id="loaderRootCauseAnalysisStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="RootCauseAnalysisStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>


{{-- Scatter chart code root --}}
<div id="RootCauseAnalysisScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderRootCauseAnalysisInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RootCauseAnalysisInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Root Cause Analysis</h4>
            <!-- Loader -->
            <div id="loaderRootCauseAnalysisPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RootCauseAnalysisPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Root Cause Analysis Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeRootCauseAnalysisScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeRootCauseAnalysisScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Root Cause Analysis by Site</h4>
            <!-- Loader -->
            <div id="loaderRootCauseAnalysisSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RootCauseAnalysisSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelRootCauseAnalysisScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelRootCauseAnalysisScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Root Cause Analysis by Status</h4>
            <!-- Loader -->
            <div id="loaderRootCauseAnalysisStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RootCauseAnalysisStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>

<script>
    let chartsRootCauseAnalysis = false;

function toggleRootCauseAnalysisGraphs() {
    const graphContainers = [
        document.getElementById('RootCauseAnalysis'),
        document.getElementById('RootCauseAnalysisPie'),
        document.getElementById('RootCauseAnalysisLine'),
        document.getElementById('RootCauseAnalysisScatter') // Additional graph types
    ];
    const rootchartButtons = document.getElementById('rootchartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        rootchartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to RootCauseAnalysis
        rootchartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsRootCauseAnalysis) {
            initializeRootCauseAnalysisCharts();
            chartsRootCauseAnalysis = true;
        }
    }
}


    function showBarRootChart() {
        const barChartContainer = document.getElementById('RootCauseAnalysis');
        const pieChartContainer = document.getElementById('RootCauseAnalysisPie');
        const lineChartContainer = document.getElementById('RootCauseAnalysisLine');
        const scatterChartContainer = document.getElementById(
        'RootCauseAnalysisScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barRootButton').classList.add('btn-active');
        document.getElementById('pieRootButton').classList.remove('btn-active');
        document.getElementById('lineButtonRoot').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterButtonRoot').classList.remove('btn-active'); // Deactivate scatter button
    }

    // Function to show Pie chart
    function showPieRootChart() {
        const barChartContainer = document.getElementById('RootCauseAnalysis');
        const pieChartContainer = document.getElementById('RootCauseAnalysisPie');
        const lineChartContainer = document.getElementById('RootCauseAnalysisLine');
        const scatterChartContainer = document.getElementById('RootCauseAnalysisScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('pieRootButton').classList.add('btn-active');
        document.getElementById('barRootButton').classList.remove('btn-active');
        document.getElementById('lineButtonRoot').classList.remove('btn-active');
        document.getElementById('scatterButtonRoot').classList.remove('btn-active');
    }

    // Function to show Line chart
    function showLineRootChart() {
        const barChartContainer = document.getElementById('RootCauseAnalysis');
        const pieChartContainer = document.getElementById('RootCauseAnalysisPie');
        const lineChartContainer = document.getElementById('RootCauseAnalysisLine');
        const scatterChartContainer = document.getElementById('RootCauseAnalysisScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('lineButtonRoot').classList.add('btn-active');
        document.getElementById('barRootButton').classList.remove('btn-active');
        document.getElementById('pieRootButton').classList.remove('btn-active');
        document.getElementById('scatterButtonRoot').classList.remove('btn-active');
    }

    // Function to show Scatter chart
    function showScatterRootChart() {
        const barChartContainer = document.getElementById('RootCauseAnalysis');
        const pieChartContainer = document.getElementById('RootCauseAnalysisPie');
        const lineChartContainer = document.getElementById('RootCauseAnalysisLine');
        const scatterChartContainer = document.getElementById('RootCauseAnalysisScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('scatterButtonRoot').classList.add('btn-active');
        document.getElementById('barRootButton').classList.remove('btn-active');
        document.getElementById('pieRootButton').classList.remove('btn-active');
        document.getElementById('lineButtonRoot').classList.remove('btn-active');
    }

    function initializeRootCauseAnalysisCharts() {
       // Initial Categorization
const loaderInitialCategorization = document.getElementById('loaderRootCauseAnalysisInitialCategorization');
const canvasInitialCategorization = document.getElementById('RootCauseAnalysisInitialCategorization');
fetch('/api/root-cause-analysis-initial-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(canvasInitialCategorization, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Root Cause Analysis',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        loaderInitialCategorization.style.display = 'none';
        canvasInitialCategorization.style.display = 'block';
    });

// Post Categorization
const loaderPostCategorization = document.getElementById('loaderRootCauseAnalysisPostCategorization');
const canvasPostCategorization = document.getElementById('RootCauseAnalysisPostCategorization');
fetch('/api/root-cause-analysis-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(canvasPostCategorization, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Root Cause Analysis',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        loaderPostCategorization.style.display = 'none';
        canvasPostCategorization.style.display = 'block';
    });

// Delayed and On Time
const loaderDelayedOntime = document.getElementById('loaderDelayedOntimeRootCauseAnalysis');
const canvasDelayedOntime = document.getElementById('delayedOntimeRootCauseAnalysis');
fetch('/api/root-cause-analysis-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        new Chart(canvasDelayedOntime, {
            type: 'bar',
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Root Cause Analysis',
                    data: [data['On Time'], data['Delayed']],
                    backgroundColor: ['#4caf50', '#f44336'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        loaderDelayedOntime.style.display = 'none';
        canvasDelayedOntime.style.display = 'block';
    });

// Site Records
const loaderSiteRecords = document.getElementById('loaderRootCauseAnalysisSiteRecords');
const canvasSiteRecords = document.getElementById('RootCauseAnalysisSiteRecords');
fetch('/api/root-cause-analysis-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        new Chart(canvasSiteRecords, {
            type: 'bar',
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        loaderSiteRecords.style.display = 'none';
        canvasSiteRecords.style.display = 'block';
    });

// Priority Levels
const loaderPriorityLevels = document.getElementById('loaderPriorityLevelRootCauseAnalysis');
const canvasPriorityLevels = document.getElementById('priorityLevelRootCauseAnalysis');
fetch('/api/root-cause-analysis-priority-records')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(canvasPriorityLevels, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Root Cause Analysis',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        loaderPriorityLevels.style.display = 'none';
        canvasPriorityLevels.style.display = 'block';
    });

// Status Records
const loaderStatusRecords = document.getElementById('loaderRootCauseAnalysisStatusRecords');
const canvasStatusRecords = document.getElementById('RootCauseAnalysisStatusRecords');
fetch('/api/root-cause-analysis-status-records')
    .then(response => response.json())
    .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        new Chart(canvasStatusRecords, {
            type: 'bar',
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        loaderStatusRecords.style.display = 'none';
        canvasStatusRecords.style.display = 'block';
    });

        // pie chart 

        // Initial Categorization
        fetch('/api/root-cause-analysis-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/root-cause-analysis-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisPostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisPostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/root-cause-analysis-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeRootCauseAnalysisPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRootCauseAnalysisPie');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records
        fetch('/api/root-cause-analysis-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRootCauseAnalysisSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Priority Levels
        fetch('/api/root-cause-analysis-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRootCauseAnalysisPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRootCauseAnalysisPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records
        fetch('/api/root-cause-analysis-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        aspectRatio: 1,
                    }
                });
            });


        // line chart 
        // Initial Categorization
        fetch('/api/root-cause-analysis-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: counts,
                            fill: false,
                            borderColor: '#3498db',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/root-cause-analysis-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisPostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: counts,
                            fill: false,
                            borderColor: '#2ecc71',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/root-cause-analysis-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeRootCauseAnalysisLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRootCauseAnalysisLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: [data['On Time'], data['Delayed']],
                            fill: false,
                            borderColor: ['#4caf50', '#f44336'],
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/root-cause-analysis-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRootCauseAnalysisSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            fill: false,
                            borderColor: '#42a5f5',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/root-cause-analysis-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRootCauseAnalysisLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRootCauseAnalysisLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: counts,
                            fill: false,
                            borderColor: '#f39c12',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/root-cause-analysis-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            fill: false,
                            borderColor: '#66bb6a',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });
        // scater chart 
        // Initial Categorization
        fetch('/api/root-cause-analysis-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: categories.map((category, index) => ({
                                x: index,
                                y: counts[index]
                            })),
                            backgroundColor: '#3498db',
                            borderColor: '#3498db',
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/root-cause-analysis-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisPostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: categories.map((category, index) => ({
                                x: index,
                                y: counts[index]
                            })),
                            backgroundColor: '#2ecc71',
                            borderColor: '#2ecc71',
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/root-cause-analysis-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeRootCauseAnalysisScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRootCauseAnalysisScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: [{
                                    x: 1,
                                    y: data['On Time']
                                },
                                {
                                    x: 2,
                                    y: data['Delayed']
                                }
                            ],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/root-cause-analysis-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRootCauseAnalysisSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: divisions.map((division, index) => ({
                                x: index,
                                y: counts[index]
                            })),
                            backgroundColor: '#42a5f5',
                            borderColor: '#42a5f5',
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/root-cause-analysis-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRootCauseAnalysisScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRootCauseAnalysisScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Root Cause Analysis',
                            data: categories.map((category, index) => ({
                                x: index,
                                y: counts[index]
                            })),
                            backgroundColor: '#f39c12',
                            borderColor: '#f39c12',
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/root-cause-analysis-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRootCauseAnalysisStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RootCauseAnalysisStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: statuses.map((status, index) => ({
                                x: index,
                                y: counts[index]
                            })),
                            backgroundColor: '#66bb6a',
                            borderColor: '#66bb6a',
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            });


    }
</script>

<!-- RootCauseAnalysis Records -->
<div id="RootCauseAnalysisTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="RootCauseAnalysisTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Priority</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleRootCauseAnalysisTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the RootCauseAnalysis records
    function fetchRootCauseAnalysisRecords() {
        $.ajax({
            url: '{{ route('api.records.RootCauseAnalysis') }}', // Replace with actual API route if not in Blade
            method: 'GET',
            success: function(response) {
                var tableBody = $('#RootCauseAnalysisTableControl tbody');
                tableBody.empty();

                if (response && response.length > 0) {
                    $.each(response, function(index, RootCauseAnalysis) {
                        var row = `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${RootCauseAnalysis.id || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.record || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.intiation_date || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.initiator_Group || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.severity_level || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.short_description || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.priority_data || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.due_date || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.evaluation_complete_on || 'Data not available yet'}</td>
                                <td>${RootCauseAnalysis.status || 'Data not available yet'}</td>
                            </tr>`;
                        tableBody.append(row);
                    });
                } else {
                    tableBody.append('<tr><td colspan="9">No records found</td></tr>');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error fetching records:', error);
                // alert('An error occurred while fetching records.');
            }
        });
    }

    // Function to toggle the visibility of the RootCauseAnalysis table
    function toggleRootCauseAnalysisTable() {
        var table = document.getElementById("RootCauseAnalysisTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            console.log('Displaying table and fetching records...');
            fetchRootCauseAnalysisRecords(); // Fetch and display the RootCauseAnalysis records
        } else {
            table.style.display = "none";
            console.log('Hiding table...');
        }
    }
</script>

<!-- RootCauseAnalysis Records -->

<!-- Root Cause Analysis  Graph Ends -->

<br>
<!-- Risk Assessment Graph Starts -->
<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Risk Assessment Section -->
  <div id="risk-assessment-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleRiskAssessmentGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-exclamation-triangle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Risk Assessment
  </div>

  <!-- Risk Assessment Graphs Toggle Button -->
  <div id="risk-assessment-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleRiskAssessmentTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Risk Assessment Table
  </div>

</div>


<!-- Chart Type Buttons -->
<div id="chartRiskButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barRiskButton" class="btn btn-primary" onclick="showBarRiskChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieRiskButton" class="btn btn-primary" onclick="showPieRiskChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineButtonRisk" class="btn btn-primary" onclick="showLineRiskChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterButtonRisk" class="btn btn-primary" onclick="showScatterRiskChart()"><i class="bi bi-cloud"></i></button>
</div>
<div id="RiskAssessment" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentInitialCategorization" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Risk Assessment</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentPostCategorization" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeRiskAssessment" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeRiskAssessment" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Site</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelRiskAssessment" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelRiskAssessment" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Status</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentStatusRecords" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="RiskAssessmentPie" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentInitialCategorizationPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Risk Assessment</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentPostCategorizationPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeRiskAssessmentPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeRiskAssessmentPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Site</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentSiteRecordsPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelRiskAssessmentPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelRiskAssessmentPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Status</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentStatusRecordsPie" style="display: none;"></canvas>
        </div>
    </div>
</div>

<div id="RiskAssessmentLine" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Risk Assessment</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentPostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeRiskAssessmentLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeRiskAssessmentLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Site</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelRiskAssessmentLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelRiskAssessmentLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Status</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
</div>

{{-- scatter  --}}

<div id="RiskAssessmentScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Risk Assessment</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeRiskAssessmentScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeRiskAssessmentScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Site</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelRiskAssessmentScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelRiskAssessmentScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Risk Assessment by Status</h4>
            <!-- Loader -->
            <div id="loaderRiskAssessmentStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="RiskAssessmentStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>


<script>
    let chartsRiskAssessment = false;

function toggleRiskAssessmentGraphs() {
    const graphContainers = [
        document.getElementById('RiskAssessment'),
        document.getElementById('RiskAssessmentPie'),
        document.getElementById('RiskAssessmentLine'),
        document.getElementById('RiskAssessmentScatter') // Additional graph types
    ];
    const chartRiskButtons = document.getElementById('chartRiskButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartRiskButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to RiskAssessment
        chartRiskButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsRiskAssessment) {
            initializeRiskAssessmentCharts();
            chartsRiskAssessment = true;
        }
    }
}


    function showBarRiskChart() {
        const barChartContainer = document.getElementById('RiskAssessment');
        const pieChartContainer = document.getElementById('RiskAssessmentPie');
        const lineChartContainer = document.getElementById('RiskAssessmentLine');
        const scatterChartContainer = document.getElementById(
        'RiskAssessmentScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barRiskButton').classList.add('btn-active');
        document.getElementById('pieRiskButton').classList.remove('btn-active');
        document.getElementById('lineButtonRisk').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('RiskAssessmentScatter').classList.remove('btn-active'); // Deactivate scatter button
    }

    // Function to show Pie chart
    function showPieRiskChart() {
        const barChartContainer = document.getElementById('RiskAssessment');
        const pieChartContainer = document.getElementById('RiskAssessmentPie');
        const lineChartContainer = document.getElementById('RiskAssessmentLine');
        const scatterChartContainer = document.getElementById(
        'RiskAssessmentScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barRiskButton').classList.remove('btn-active');
        document.getElementById('pieRiskButton').classList.add('btn-active');
        document.getElementById('lineButtonRisk').classList.remove('btn-active');
        document.getElementById('scatterButtonRisk').classList.remove('btn-active');
    }

    // Function to show Line chart
    function showLineRiskChart() {
        const barChartContainer = document.getElementById('RiskAssessment');
        const pieChartContainer = document.getElementById('RiskAssessmentPie');
        const lineChartContainer = document.getElementById('RiskAssessmentLine');
        const scatterChartContainer = document.getElementById(
        'RiskAssessmentScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barRiskButton').classList.remove('btn-active');
        document.getElementById('pieRiskButton').classList.remove('btn-active');
        document.getElementById('lineButtonRisk').classList.add('btn-active');
        document.getElementById('scatterButtonRisk').classList.remove('btn-active');
    }

    // Function to show Scatter chart
    function showScatterRiskChart() {
        const barChartContainer = document.getElementById('RiskAssessment');
        const pieChartContainer = document.getElementById('RiskAssessmentPie');
        const lineChartContainer = document.getElementById('RiskAssessmentLine');
        const scatterChartContainer = document.getElementById(
        'RiskAssessmentScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('barRiskButton').classList.remove('btn-active');
        document.getElementById('pieRiskButton').classList.remove('btn-active');
        document.getElementById('lineButtonRisk').classList.remove('btn-active');
        document.getElementById('scatterButtonRisk').classList.add('btn-active');
    }


    function initializeRiskAssessmentCharts() {
        // Initial Categorization
        fetch('/api/risk-assessment-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentInitialCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/risk-assessment-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentPostCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentPostCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/risk-assessment-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeRiskAssessment').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRiskAssessment');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Risk Assessment',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/risk-assessment-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRiskAssessmentSiteRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentSiteRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/risk-assessment-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRiskAssessment').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRiskAssessment');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/risk-assessment-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentStatusRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentStatusRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
        // pie chart 
        // Initial Categorization
        fetch('/api/risk-assessment-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Post Categorization
        fetch('/api/risk-assessment-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentPostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentPostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/risk-assessment-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeRiskAssessmentPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRiskAssessmentPie');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Risk Assessment',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records
        fetch('/api/risk-assessment-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRiskAssessmentSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Priority Levels
        fetch('/api/risk-assessment-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRiskAssessmentPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRiskAssessmentPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records
        fetch('/api/risk-assessment-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // liune charet 
        // Initial Categorization
        fetch('/api/risk-assessment-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);
                document.getElementById('loaderRiskAssessmentInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            fill: false,
                            borderColor: '#3498db',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/risk-assessment-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentPostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            fill: false,
                            borderColor: '#2ecc71',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/risk-assessment-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeRiskAssessmentLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRiskAssessmentLine');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Risk Assessment',
                            data: [data['On Time'], data['Delayed']],
                            fill: false,
                            borderColor: ['#4caf50', '#f44336'],
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/risk-assessment-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRiskAssessmentSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            fill: false,
                            borderColor: '#42a5f5',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/risk-assessment-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRiskAssessmentLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRiskAssessmentLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts,
                            fill: false,
                            borderColor: '#f39c12',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/risk-assessment-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            fill: false,
                            borderColor: '#ffa726',
                            tension: 0.1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // scatter

        // Initial Categorization
        fetch('/api/risk-assessment-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#3498db',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/risk-assessment-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentPostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#2ecc71',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/risk-assessment-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeRiskAssessmentScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeRiskAssessmentScatter');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Risk Assessment',
                            data: [{
                                    x: 0,
                                    y: data['On Time']
                                },
                                {
                                    x: 1,
                                    y: data['Delayed']
                                }
                            ],
                            backgroundColor: ['#4caf50', '#f44336'],
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/risk-assessment-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderRiskAssessmentSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#42a5f5',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/risk-assessment-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelRiskAssessmentScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelRiskAssessmentScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Risk Assessment',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#f39c12',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/risk-assessment-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderRiskAssessmentStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('RiskAssessmentStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts.map((count, index) => ({
                                x: index,
                                y: count
                            })),
                            backgroundColor: '#ffa726',
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'bottom'
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

    }
</script>
<!-- Risk Assessment Records  -->
<div id="riskassessmentTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="riskassessmentTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Priority Level</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleRiskAssessmentTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchriskassessmentRecords() {
        $.ajax({
            url: '{{ route('api.records.riskassessment') }}', // riskassessment records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#riskassessmentTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, riskassessment) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + riskassessment.id + '</td>';
                    row += '<td>' + riskassessment.record + '</td>';
                    row += '<td>' + riskassessment.intiation_date + '</td>';
                    row += '<td>' + riskassessment.Initiator_Group + '</td>';
                    row += '<td>' + riskassessment.severity2_level + '</td>';
                    row += '<td>' + riskassessment.short_description + '</td>';
                    row += '<td>' + riskassessment.priority_level + '</td>';
                    row += '<td>' + riskassessment.due_date + '</td>';
                    row += '<td>' + riskassessment.risk_analysis_completed_on + '</td>';
                    row += '<td>' + riskassessment.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the riskassessment table
    function toggleRiskAssessmentTable() {
        var table = document.getElementById("riskassessmentTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchriskassessmentRecords(); // Fetch and display the riskassessment records
        } else {
            table.style.display = "none";
        }
    }
</script>
 <!-- Risk Assessment Records -->
<!-- Risk Assessment  Graph Ends -->

<br>
<!-- Preventive  Graph start -->
<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Preventive Maintenance Section -->
  <div id="preventive-maintenance-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="togglePreventiveMaintenanceGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-cogs" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Preventive Maintenance
  </div>

  <!-- Preventive Maintenance Graphs Toggle Button -->
  <div id="preventive-maintenance-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 20px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; width: auto; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="togglePreventiveMaintenanceTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Preventive Maintenance Table
  </div>

</div>



<!-- Container for the Buttons (Initially Hidden) -->
<div id="PreventivechartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barPreventiveButton" class="btn btn-primary" onclick="showPreventiveBarChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="piePreventiveButton" class="btn btn-primary" onclick="showPreventivePieChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="linePreventiveButton" class="btn btn-primary"
        onclick="showPreventiveLineAuditChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterPreventiveButton" class="btn btn-primary"
        onclick="showPreventiveScatterAuditChart()"><i class="bi bi-cloud"></i></button>
</div>
<div id="PreventiveMaintenance" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceInitialCategorization" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Preventive Maintenance</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenancePostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenancePostCategorization" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimePreventiveMaintenance" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimePreventiveMaintenance" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Site</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelPreventiveMaintenance" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelPreventiveMaintenance" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Status</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceStatusRecords" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="PreventiveMaintenancePie" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceInitialCategorizationPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Preventive Maintenance</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenancePostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenancePostCategorizationPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimePreventiveMaintenancePie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimePreventiveMaintenancePie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Site</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceSiteRecordsPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelPreventiveMaintenancePie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelPreventiveMaintenancePie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Status</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceStatusRecordsPie" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="PreventiveMaintenanceLine" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Preventive Maintenance</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenancePostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenancePostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimePreventiveMaintenanceLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimePreventiveMaintenanceLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Site</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelPreventiveMaintenanceLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelPreventiveMaintenanceLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Status</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
</div>



<div id="PreventiveMaintenanceScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Preventive Maintenance</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenancePostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenancePostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimePreventiveMaintenanceScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimePreventiveMaintenanceScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Site</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelPreventiveMaintenanceScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelPreventiveMaintenanceScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Preventive Maintenance by Status</h4>
            <!-- Loader -->
            <div id="loaderPreventiveMaintenanceStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="PreventiveMaintenanceStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>





<script>
    let chartsPreventiveMaintenance = false;

function togglePreventiveMaintenanceGraphs() {
    const graphContainers = [
        document.getElementById('PreventiveMaintenance'),
        document.getElementById('PreventiveMaintenancePie'),
        document.getElementById('PreventiveMaintenanceLine'),
        document.getElementById('PreventiveMaintenanceScatter') // Additional graph types
    ];
    const PreventivechartButtons = document.getElementById('PreventivechartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        PreventivechartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to PreventiveMaintenance
        PreventivechartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsPreventiveMaintenance) {
            initializePreventiveMaintenanceCharts();
            chartsPreventiveMaintenance = true;
        }
    }
}

    function showPreventiveBarChart() {
        const barChartContainer = document.getElementById('PreventiveMaintenance');
        const pieChartContainer = document.getElementById('PreventiveMaintenancePie');
        const lineChartContainer = document.getElementById('PreventiveMaintenanceLine');
        const scatterChartContainer = document.getElementById(
        'PreventiveMaintenanceScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barPreventiveButton').classList.add('btn-active');
        document.getElementById('piePreventiveButton').classList.remove('btn-active');
        document.getElementById('linePreventiveButton').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterPreventiveButton').classList.remove('btn-active'); // Deactivate scatter button
    }

    function showPreventivePieChart() {
        const barChartContainer = document.getElementById('PreventiveMaintenance');
        const pieChartContainer = document.getElementById('PreventiveMaintenancePie');
        const lineChartContainer = document.getElementById('PreventiveMaintenanceLine');
        const scatterChartContainer = document.getElementById('PreventiveMaintenanceScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none'; // Hide Bar chart
        pieChartContainer.style.display = 'block'; // Show Pie chart
        lineChartContainer.style.display = 'none'; // Hide Line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barPreventiveButton').classList.remove('btn-active');
        document.getElementById('piePreventiveButton').classList.add('btn-active');
        document.getElementById('linePreventiveButton').classList.remove('btn-active');
        document.getElementById('scatterPreventiveButton').classList.remove('btn-active');
    }

    function showPreventiveLineAuditChart() {
        const barChartContainer = document.getElementById('PreventiveMaintenance');
        const pieChartContainer = document.getElementById('PreventiveMaintenancePie');
        const lineChartContainer = document.getElementById('PreventiveMaintenanceLine');
        const scatterChartContainer = document.getElementById('PreventiveMaintenanceScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none'; // Hide Bar chart
        pieChartContainer.style.display = 'none'; // Hide Pie chart
        lineChartContainer.style.display = 'block'; // Show Line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barPreventiveButton').classList.remove('btn-active');
        document.getElementById('piePreventiveButton').classList.remove('btn-active');
        document.getElementById('linePreventiveButton').classList.add('btn-active');
        document.getElementById('scatterPreventiveButton').classList.remove('btn-active');
    }

    function showPreventiveScatterAuditChart() {
        const barChartContainer = document.getElementById('PreventiveMaintenance');
        const pieChartContainer = document.getElementById('PreventiveMaintenancePie');
        const lineChartContainer = document.getElementById('PreventiveMaintenanceLine');
        const scatterChartContainer = document.getElementById('PreventiveMaintenanceScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none'; // Hide Bar chart
        pieChartContainer.style.display = 'none'; // Hide Pie chart
        lineChartContainer.style.display = 'none'; // Hide Line chart
        scatterChartContainer.style.display = 'block'; // Show Scatter chart

        // Style the active button
        document.getElementById('barPreventiveButton').classList.remove('btn-active');
        document.getElementById('piePreventiveButton').classList.remove('btn-active');
        document.getElementById('linePreventiveButton').classList.remove('btn-active');
        document.getElementById('scatterPreventiveButton').classList.add('btn-active');
    }


    function initializePreventiveMaintenanceCharts() {
        // Initial Categorization
        fetch('/api/preventive-maintenance-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenanceInitialCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/preventive-maintenance-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenancePostCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenancePostCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/preventive-maintenance-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimePreventiveMaintenance').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimePreventiveMaintenance');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/preventive-maintenance-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderPreventiveMaintenanceSiteRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceSiteRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/preventive-maintenance-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelPreventiveMaintenance').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelPreventiveMaintenance');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/preventive-maintenance-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenanceStatusRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceStatusRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
        // pie chart scrpit oreventive 
        // Initial Categorization
        fetch('/api/preventive-maintenance-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenanceInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c',
                                '#9b59b6'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Post Categorization
        fetch('/api/preventive-maintenance-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenancePostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenancePostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/preventive-maintenance-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimePreventiveMaintenancePie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimePreventiveMaintenancePie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records
        fetch('/api/preventive-maintenance-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderPreventiveMaintenanceSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#ff7043',
                                '#8d6e63'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Priority Levels
        fetch('/api/preventive-maintenance-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelPreventiveMaintenancePie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelPreventiveMaintenancePie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c',
                                '#9b59b6'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records
        fetch('/api/preventive-maintenance-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenanceStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#ff7043'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });
        //line chart script for prevnt
        // Initial Categorization
        fetch('/api/preventive-maintenance-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenanceInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/preventive-maintenance-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenancePostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenancePostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            borderColor: '#2ecc71',
                            backgroundColor: 'rgba(46, 204, 113, 0.2)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/preventive-maintenance-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimePreventiveMaintenanceLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimePreventiveMaintenanceLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: [data['On Time'], data['Delayed']],
                            borderColor: '#f39c12',
                            backgroundColor: 'rgba(243, 156, 18, 0.2)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/preventive-maintenance-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderPreventiveMaintenanceSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#9b59b6',
                            backgroundColor: 'rgba(155, 89, 182, 0.2)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/preventive-maintenance-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelPreventiveMaintenanceLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelPreventiveMaintenanceLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: counts,
                            borderColor: '#e74c3c',
                            backgroundColor: 'rgba(231, 76, 60, 0.2)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/preventive-maintenance-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPreventiveMaintenanceStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#42a5f5',
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });
        //scater chart script preventive 
        // Initial Categorization
        fetch('/api/preventive-maintenance-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = categories.map((category, index) => ({
                    x: index + 1, // X-axis: Numerical representation of categories
                    y: counts[index] // Y-axis: Counts
                }));

                document.getElementById('loaderPreventiveMaintenanceInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: scatterData,
                            backgroundColor: '#3498db',
                            borderColor: '#3498db',
                            pointRadius: 5,
                            pointBackgroundColor: '#3498db'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/preventive-maintenance-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = categories.map((category, index) => ({
                    x: index + 1,
                    y: counts[index]
                }));

                document.getElementById('loaderPreventiveMaintenancePostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenancePostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: scatterData,
                            backgroundColor: '#2ecc71',
                            borderColor: '#2ecc71',
                            pointRadius: 5,
                            pointBackgroundColor: '#2ecc71'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/preventive-maintenance-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = [{
                        x: 1,
                        y: data['On Time']
                    },
                    {
                        x: 2,
                        y: data['Delayed']
                    }
                ];

                document.getElementById('loaderDelayedOntimePreventiveMaintenanceScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimePreventiveMaintenanceScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: scatterData,
                            backgroundColor: '#f39c12',
                            borderColor: '#f39c12',
                            pointRadius: 5,
                            pointBackgroundColor: '#f39c12'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/preventive-maintenance-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = data.map((item, index) => ({
                    x: index + 1,
                    y: item.count
                }));

                document.getElementById('loaderPreventiveMaintenanceSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Records',
                            data: scatterData,
                            backgroundColor: '#9b59b6',
                            borderColor: '#9b59b6',
                            pointRadius: 5,
                            pointBackgroundColor: '#9b59b6'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/preventive-maintenance-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = categories.map((category, index) => ({
                    x: index + 1,
                    y: counts[index]
                }));

                document.getElementById('loaderPriorityLevelPreventiveMaintenanceScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelPreventiveMaintenanceScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Preventive Maintenance',
                            data: scatterData,
                            backgroundColor: '#e74c3c',
                            borderColor: '#e74c3c',
                            pointRadius: 5,
                            pointBackgroundColor: '#e74c3c'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/preventive-maintenance-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = statuses.map((status, index) => ({
                    x: index + 1,
                    y: counts[index]
                }));

                document.getElementById('loaderPreventiveMaintenanceStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('PreventiveMaintenanceStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Records',
                            data: scatterData,
                            backgroundColor: '#42a5f5',
                            borderColor: '#42a5f5',
                            pointRadius: 5,
                            pointBackgroundColor: '#42a5f5'
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });


    }
</script>

<!-- Preventive maintenance records -->

<div id="PreventiveMaintenanceTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="PreventiveMaintenanceTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="togglePreventiveMaintenanceTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchPreventiveMaintenanceRecords() {
        $.ajax({
            url: '{{ route('api.records.PreventiveMaintenance') }}', // PreventiveMaintenance records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#PreventiveMaintenanceTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, PreventiveMaintenance) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + PreventiveMaintenance.id + '</td>';
                    row += '<td>' + PreventiveMaintenance.record + '</td>';
                    row += '<td>' + PreventiveMaintenance.intiation_date + '</td>';
                    row += '<td>' + PreventiveMaintenance.short_description + '</td>';
                    row += '<td>' + PreventiveMaintenance.due_date + '</td>';
                    row += '<td>' + PreventiveMaintenance.qa_approval_on + '</td>';
                    row += '<td>' + PreventiveMaintenance.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the PreventiveMaintenance table
    function togglePreventiveMaintenanceTable() {
        var table = document.getElementById("PreventiveMaintenanceTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchPreventiveMaintenanceRecords(); // Fetch and display the PreventiveMaintenance records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Preventive maintenance records -->

<!-- Preventive Maintenance  Graph Ends -->



<!-- Lab Incident Graph Starts -->
 <br>

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Lab Incident Section -->
  <div id="lab-incident-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleLabIncidentGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-flask" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Lab Incident
  </div>

  <!-- Lab Incident Graphs Toggle Button -->
  <div id="lab-incident-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleLabIncidentTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">⚗️</span> Lab Incident Table
  </div>

</div>

<div id="chartlabincidentButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barlabincidentButton" class="btn btn-primary" onclick="showBarlabincidentChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pielabincidentButton" class="btn btn-primary" onclick="showPielabincidentChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="linelabincidentButton" class="btn btn-primary" onclick="showLinelabincidentChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterlabincidentButton" class="btn btn-primary"
        onclick="showScatterlabincidentChart()"><i class="bi bi-cloud"></i></button>

</div>
<div id="LabIncident" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentInitialCategorization" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Lab Incident</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentPostCategorization" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeLabIncident" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeLabIncident" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Site</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelLabIncident" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelLabIncident" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Status</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentStatusRecords" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="LabIncidentPie" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentInitialCategorizationPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Lab Incident</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentPostCategorizationPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeLabIncidentPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeLabIncidentPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Site</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentSiteRecordsPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelLabIncidentPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelLabIncidentPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Status</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentStatusRecordsPie" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="LabIncidentLine" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Lab Incident</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentPostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeLabIncidentLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeLabIncidentLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Site</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelLabIncidentLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelLabIncidentLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Status</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="LabIncidentScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Lab Incident</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeLabIncidentScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeLabIncidentScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Site</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelLabIncidentScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelLabIncidentScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Lab Incident by Status</h4>
            <!-- Loader -->
            <div id="loaderLabIncidentStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="LabIncidentStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>



<script>
    let chartsLabIncident = false;

function toggleLabIncidentGraphs() {
    const graphContainers = [
        document.getElementById('LabIncident'),
        document.getElementById('LabIncidentPie'),
        document.getElementById('LabIncidentLine'),
        document.getElementById('LabIncidentScatter') // Additional graph types
    ];
    const chartlabincidentButtons = document.getElementById('chartlabincidentButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartlabincidentButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to LabIncident
        chartlabincidentButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsLabIncident) {
            initializeLabIncidentCharts();
            chartsLabIncident = true;
        }
    }
}



    function showBarlabincidentChart() {
        const barChartContainer = document.getElementById('LabIncident');
        const pieChartContainer = document.getElementById('LabIncidentPie');
        const lineChartContainer = document.getElementById('LabIncidentLine');
        const scatterChartContainer = document.getElementById(
        'LabIncidentScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barlabincidentButton').classList.add('btn-active');
        document.getElementById('pielabincidentButton').classList.remove('btn-active');
        document.getElementById('linelabincidentButton').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterlabincidentButton').classList.remove('btn-active'); // Deactivate scatter button
    }

    function showPielabincidentChart() {
        const barChartContainer = document.getElementById('LabIncident');
        const pieChartContainer = document.getElementById('LabIncidentPie');
        const lineChartContainer = document.getElementById('LabIncidentLine');
        const scatterChartContainer = document.getElementById('LabIncidentScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barlabincidentButton').classList.remove('btn-active');
        document.getElementById('pielabincidentButton').classList.add('btn-active');
        document.getElementById('linelabincidentButton').classList.remove('btn-active');
        document.getElementById('scatterlabincidentButton').classList.remove('btn-active');
    }

    function showLinelabincidentChart() {
        const barChartContainer = document.getElementById('LabIncident');
        const pieChartContainer = document.getElementById('LabIncidentPie');
        const lineChartContainer = document.getElementById('LabIncidentLine');
        const scatterChartContainer = document.getElementById('LabIncidentScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barlabincidentButton').classList.remove('btn-active');
        document.getElementById('pielabincidentButton').classList.remove('btn-active');
        document.getElementById('linelabincidentButton').classList.add('btn-active');
        document.getElementById('scatterlabincidentButton').classList.remove('btn-active');
    }

    function showScatterlabincidentChart() {
        const barChartContainer = document.getElementById('LabIncident');
        const pieChartContainer = document.getElementById('LabIncidentPie');
        const lineChartContainer = document.getElementById('LabIncidentLine');
        const scatterChartContainer = document.getElementById('LabIncidentScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('barlabincidentButton').classList.remove('btn-active');
        document.getElementById('pielabincidentButton').classList.remove('btn-active');
        document.getElementById('linelabincidentButton').classList.remove('btn-active');
        document.getElementById('scatterlabincidentButton').classList.add('btn-active');
    }

    function initializeLabIncidentCharts() {
        // Initial Categorization
        fetch('/api/lab-incident-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentInitialCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Lab Incident',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/lab-incident-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentPostCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentPostCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Lab Incident',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/lab-incident-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

              document.getElementById('loaderDelayedOntimeLabIncident').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeLabIncident');
                chartElement.style.display = 'block';
                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Lab Incident',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/lab-incident-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderLabIncidentSiteRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentSiteRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/lab-incident-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelLabIncident').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelLabIncident');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Lab Incident',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/lab-incident-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentStatusRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentStatusRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });


        // Initial Categorization
        fetch('/api/lab-incident-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c',
                                '#9b59b6'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Post Categorization
        fetch('/api/lab-incident-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentPostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentPostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c',
                                '#9b59b6'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/lab-incident-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeLabIncidentPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeLabIncidentPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records
        fetch('/api/lab-incident-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderLabIncidentSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#d32f2f',
                                '#ab47bc'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Priority Levels
        fetch('/api/lab-incident-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelLabIncidentPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelLabIncidentPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c',
                                '#9b59b6'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records
        fetch('/api/lab-incident-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#d32f2f',
                                '#ab47bc'],
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Initial Categorization
        fetch('/api/lab-incident-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Lab Incident - Initial Categorization',
                            data: counts,
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            borderColor: '#3498db',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/lab-incident-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentPostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Lab Incident - Post Categorization',
                            data: counts,
                            backgroundColor: 'rgba(46, 204, 113, 0.2)',
                            borderColor: '#2ecc71',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/lab-incident-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeLabIncidentLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeLabIncidentLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Lab Incident - On Time vs Delayed',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: 'rgba(244, 67, 54, 0.2)',
                            borderColor: '#f44336',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/lab-incident-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderLabIncidentSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Lab Incident - Site Records',
                            data: counts,
                            backgroundColor: 'rgba(255, 193, 7, 0.2)',
                            borderColor: '#ffc107',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/lab-incident-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelLabIncidentLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelLabIncidentLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Lab Incident - Priority Levels',
                            data: counts,
                            backgroundColor: 'rgba(156, 39, 176, 0.2)',
                            borderColor: '#9c27b0',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/lab-incident-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderLabIncidentStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Lab Incident - Status Records',
                            data: counts,
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            borderColor: '#42a5f5',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Initial Categorization
        fetch('/api/lab-incident-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((label, index) => ({
                    x: index + 1,
                    y: data[label]
                }));

                document.getElementById('loaderLabIncidentInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Lab Incident - Initial Categorization',
                            data: scatterData,
                            backgroundColor: '#3498db',
                            borderColor: '#2980b9',
                            pointRadius: 6,
                            pointHoverRadius: 8,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/lab-incident-post-categorization')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((label, index) => ({
                    x: index + 1,
                    y: data[label]
                }));

                document.getElementById('loaderLabIncidentPostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Lab Incident - Post Categorization',
                            data: scatterData,
                            backgroundColor: '#2ecc71',
                            borderColor: '#27ae60',
                            pointRadius: 6,
                            pointHoverRadius: 8,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/lab-incident-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = [{
                        x: 1,
                        y: data['On Time']
                    },
                    {
                        x: 2,
                        y: data['Delayed']
                    }
                ];

                document.getElementById('loaderDelayedOntimeLabIncidentScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeLabIncidentScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Lab Incident - On Time vs Delayed',
                            data: scatterData,
                            backgroundColor: '#f44336',
                            borderColor: '#d32f2f',
                            pointRadius: 6,
                            pointHoverRadius: 8,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/lab-incident-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = data.map((item, index) => ({
                    x: index + 1,
                    y: item.count
                }));

                document.getElementById('loaderLabIncidentSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Lab Incident - Site Records',
                            data: scatterData,
                            backgroundColor: '#ff9800',
                            borderColor: '#ef6c00',
                            pointRadius: 6,
                            pointHoverRadius: 8,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/lab-incident-priority-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((label, index) => ({
                    x: index + 1,
                    y: data[label]
                }));

                document.getElementById('loaderPriorityLevelLabIncidentScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelLabIncidentScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Lab Incident - Priority Levels',
                            data: scatterData,
                            backgroundColor: '#9c27b0',
                            borderColor: '#7b1fa2',
                            pointRadius: 6,
                            pointHoverRadius: 8,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/lab-incident-status-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = Object.keys(data).map((label, index) => ({
                    x: index + 1,
                    y: data[label]
                }));

                document.getElementById('loaderLabIncidentStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('LabIncidentStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Lab Incident - Status Records',
                            data: scatterData,
                            backgroundColor: '#42a5f5',
                            borderColor: '#1e88e5',
                            pointRadius: 6,
                            pointHoverRadius: 8,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

    }
</script>

<!-- Lab Incident Records -->
<div id="labincidentTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="labincidentTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Priority</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleLabIncidentTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchlabincidentRecords() {
        $.ajax({
            url: '{{ route('api.records.labincident') }}', // labincident records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#labincidentTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, labincident) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + labincident.id + '</td>';
                    row += '<td>' + labincident.record + '</td>';
                    row += '<td>' + labincident.intiation_date + '</td>';
                    row += '<td>' + labincident.Initiator_Group + '</td>';
                    row += '<td>' + labincident.severity_level2 + '</td>';
                    row += '<td>' + labincident.priority_data + '</td>';
                    row += '<td>' + labincident.short_desc + '</td>';
                    row += '<td>' + labincident.due_date + '</td>';
                    row += '<td>' + labincident.closure_completed_on + '</td>';
                    row += '<td>' + labincident.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the labincident table
    function toggleLabIncidentTable() {
        var table = document.getElementById("labincidentTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchlabincidentRecords(); // Fetch and display the labincident records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Lab Incident Records -->
<!-- Lab Incident  Graph Ends -->



<!-- Internal Audit Graph Starts -->
 <br>

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Internal Audit Section -->
  <div id="internal-audit-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleInternalAuditGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-search" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Internal Audit
  </div>

  <!-- Internal Audit Graphs Toggle Button -->
  <div id="internal-audit-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleInternalAuditTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Internal Audit Table
  </div>

</div>


<div id="chartInternalButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barInternalButton" class="btn btn-primary" onclick="showBarInternalChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieInternalButton" class="btn btn-primary" onclick="showPieInternalChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineInternalButton" class="btn btn-primary" onclick="showLineInternalChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterInternalButton" class="btn btn-primary"
        onclick="showScatterInternalChart()"><i class="bi bi-cloud"></i></button>

</div>
<div id="InternalAudit" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditInitialCategorization" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Internal Audit</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditPostCategorization" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeInternalAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeInternalAudit" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Site</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelInternalAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelInternalAudit" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Status</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditStatusRecords" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="InternalAuditPie" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditInitialCategorizationPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Internal Audit</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditPostCategorizationPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeInternalAuditPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeInternalAuditPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Site</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditSiteRecordsPie" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelInternalAuditPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelInternalAuditPie" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Status</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditStatusRecordsPie" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="InternalAuditLine" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Internal Audit</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditPostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeInternalAuditLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeInternalAuditLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Site</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelInternalAuditLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelInternalAuditLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Status</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
</div>


<div id="InternalAuditScatter" style="display: none;">
    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditInitialCategorizationScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Internal Audit</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditPostCategorizationScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit Delay and On Time</h4>
            <!-- Loader -->
            <div id="loaderDelayedOntimeInternalAuditScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeInternalAuditScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Site</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <!-- Loader -->
            <div id="loaderPriorityLevelInternalAuditScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelInternalAuditScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Internal Audit by Status</h4>
            <!-- Loader -->
            <div id="loaderInternalAuditStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="InternalAuditStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>


<script>
    let chartsInternalAudit = false;

function toggleInternalAuditGraphs() {
    const graphContainers = [
        document.getElementById('InternalAudit'),
        document.getElementById('InternalAuditPie'),
        document.getElementById('InternalAuditLine'),
        document.getElementById('InternalAuditScatter') // Additional graph types
    ];
    const chartInternalButtons = document.getElementById('chartInternalButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartInternalButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to InternalAudit
        chartInternalButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsInternalAudit) {
            initializeInternalAuditCharts();
            chartsInternalAudit = true;
        }
    }
}

    // Function to show Bar Chart
    function showBarInternalChart() {
        const barChartContainer = document.getElementById('InternalAudit');
        const pieChartContainer = document.getElementById('InternalAuditPie');
        const lineChartContainer = document.getElementById('InternalAuditLine');
        const scatterChartContainer = document.getElementById(
        'InternalAuditScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barInternalButton').classList.add('btn-active');
        document.getElementById('pieInternalButton').classList.remove('btn-active');
        document.getElementById('lineInternalButton').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterInternalButton').classList.remove('btn-active'); // Deactivate scatter button
    }

    // Function to show Pie Chart
    function showPieInternalChart() {
        const barChartContainer = document.getElementById('InternalAudit');
        const pieChartContainer = document.getElementById('InternalAuditPie');
        const lineChartContainer = document.getElementById('InternalAuditLine');
        const scatterChartContainer = document.getElementById('InternalAuditScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barInternalButton').classList.remove('btn-active');
        document.getElementById('pieInternalButton').classList.add('btn-active');
        document.getElementById('lineInternalButton').classList.remove('btn-active');
        document.getElementById('scatterInternalButton').classList.remove('btn-active');
    }

    function showLineInternalChart() {
        const barChartContainer = document.getElementById('InternalAudit');
        const pieChartContainer = document.getElementById('InternalAuditPie');
        const lineChartContainer = document.getElementById('InternalAuditLine');
        const scatterChartContainer = document.getElementById('InternalAuditScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barInternalButton').classList.remove('btn-active');
        document.getElementById('pieInternalButton').classList.remove('btn-active');
        document.getElementById('lineInternalButton').classList.add('btn-active');
        document.getElementById('scatterInternalButton').classList.remove('btn-active');
    }

    // Function to show Scatter Chart
    function showScatterInternalChart() {
        const barChartContainer = document.getElementById('InternalAudit');
        const pieChartContainer = document.getElementById('InternalAuditPie');
        const lineChartContainer = document.getElementById('InternalAuditLine');
        const scatterChartContainer = document.getElementById('InternalAuditScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block';

        // Style the active button
        document.getElementById('barInternalButton').classList.remove('btn-active');
        document.getElementById('pieInternalButton').classList.remove('btn-active');
        document.getElementById('lineInternalButton').classList.remove('btn-active');
        document.getElementById('scatterInternalButton').classList.add('btn-active');
    }


    function initializeInternalAuditCharts() {
        // Initial Categorization
        fetch('/api/internal-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditInitialCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditInitialCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization
        fetch('/api/internal-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditPostCategorization').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditPostCategorization');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time
        fetch('/api/internal-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeInternalAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeInternalAudit');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Internal Audit',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records
        fetch('/api/internal-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderInternalAuditSiteRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditSiteRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels
        fetch('/api/internal-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelInternalAudit').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelInternalAudit');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records
        fetch('/api/internal-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditStatusRecords').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditStatusRecords');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'bar',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        fetch('/api/internal-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditInitialCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditInitialCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#9b59b6',
                                '#e74c3c'],
                            borderColor: ['#ffffff'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Post Categorization Pie Chart
        fetch('/api/internal-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditPostCategorizationPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditPostCategorizationPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#9b59b6',
                                '#e74c3c'],
                            borderColor: ['#ffffff'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Delayed and On Time Pie Chart
        fetch('/api/internal-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeInternalAuditPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeInternalAuditPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Internal Audit',
                            data: [data['On Time'], data['Delayed']],
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderColor: ['#ffffff'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Site Records Pie Chart
        fetch('/api/internal-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderInternalAuditSiteRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditSiteRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#8e44ad',
                                '#c0392b'],
                            borderColor: ['#ffffff'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Priority Levels Pie Chart
        fetch('/api/internal-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelInternalAuditPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelInternalAuditPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#9b59b6',
                                '#e74c3c'],
                            borderColor: ['#ffffff'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        // Status Records Pie Chart
        fetch('/api/internal-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditStatusRecordsPie').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditStatusRecordsPie');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'pie',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#8e44ad',
                                '#c0392b'],
                            borderColor: ['#ffffff'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // This will allow the chart to scale
                        aspectRatio: 1,
                    }
                });
            });

        fetch('/api/internal-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditInitialCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditInitialCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Post Categorization Line Chart
        fetch('/api/internal-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditPostCategorizationLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditPostCategorizationLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            borderColor: '#2ecc71',
                            backgroundColor: 'rgba(46, 204, 113, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Delayed and On Time Line Chart
        fetch('/api/internal-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {

                document.getElementById('loaderDelayedOntimeInternalAuditLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeInternalAuditLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: ['On Time', 'Delayed'],
                        datasets: [{
                            label: 'Internal Audit',
                            data: [data['On Time'], data['Delayed']],
                            borderColor: '#f44336',
                            backgroundColor: 'rgba(244, 67, 54, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Site Records Line Chart
        fetch('/api/internal-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const divisions = data.map(item => item.division_name);
                const counts = data.map(item => item.count);

                document.getElementById('loaderInternalAuditSiteRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditSiteRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: divisions,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#ffa726',
                            backgroundColor: 'rgba(255, 167, 38, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Priority Levels Line Chart
        fetch('/api/internal-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderPriorityLevelInternalAuditLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelInternalAuditLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: categories,
                        datasets: [{
                            label: 'Internal Audit',
                            data: counts,
                            borderColor: '#9b59b6',
                            backgroundColor: 'rgba(155, 89, 182, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        // Status Records Line Chart
        fetch('/api/internal-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                document.getElementById('loaderInternalAuditStatusRecordsLine').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditStatusRecordsLine');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'line',
                    data: {
                        labels: statuses,
                        datasets: [{
                            label: 'Records',
                            data: counts,
                            borderColor: '#42a5f5',
                            backgroundColor: 'rgba(66, 165, 245, 0.2)',
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            });

        fetch('/api/internal-audit-initial-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                // Convert data to scatter chart format
                const scatterData = categories.map((category, index) => ({
                    x: category,
                    y: counts[index]
                }));

                document.getElementById('loaderInternalAuditInitialCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditInitialCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Initial Categorization',
                            data: scatterData,
                            backgroundColor: '#3498db',
                            borderColor: '#1e88e5',
                            borderWidth: 1,
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Category'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Post Categorization Scatter Chart
        fetch('/api/internal-audit-post-categorization')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = categories.map((category, index) => ({
                    x: category,
                    y: counts[index]
                }));

                document.getElementById('loaderInternalAuditPostCategorizationScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditPostCategorizationScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Post Categorization',
                            data: scatterData,
                            backgroundColor: '#2ecc71',
                            borderColor: '#43a047',
                            borderWidth: 1,
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Category'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Delayed and On Time Scatter Chart
        fetch('/api/internal-audit-ontime-delayed-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = [{
                        x: 'On Time',
                        y: data['On Time']
                    },
                    {
                        x: 'Delayed',
                        y: data['Delayed']
                    }
                ];

                document.getElementById('loaderDelayedOntimeInternalAuditScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('delayedOntimeInternalAuditScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'On Time vs Delayed',
                            data: scatterData,
                            backgroundColor: ['#4caf50', '#f44336'],
                            borderColor: ['#388e3c', '#d32f2f'],
                            borderWidth: 1,
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Status'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Site Records Scatter Chart
        fetch('/api/internal-audit-sitewise-records')
            .then(response => response.json())
            .then(data => {
                const scatterData = data.map(item => ({
                    x: item.division_name,
                    y: item.count
                }));

                document.getElementById('loaderInternalAuditSiteRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditSiteRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Site Records',
                            data: scatterData,
                            backgroundColor: '#ffa726',
                            borderColor: '#fb8c00',
                            borderWidth: 1,
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Division'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Priority Levels Scatter Chart
        fetch('/api/internal-audit-priority-records')
            .then(response => response.json())
            .then(data => {
                const categories = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = categories.map((category, index) => ({
                    x: category,
                    y: counts[index]
                }));

                document.getElementById('loaderPriorityLevelInternalAuditScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('priorityLevelInternalAuditScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Priority Levels',
                            data: scatterData,
                            backgroundColor: '#9b59b6',
                            borderColor: '#8e44ad',
                            borderWidth: 1,
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Priority'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });

        // Status Records Scatter Chart
        fetch('/api/internal-audit-status-records')
            .then(response => response.json())
            .then(data => {
                const statuses = Object.keys(data);
                const counts = Object.values(data);

                const scatterData = statuses.map((status, index) => ({
                    x: status,
                    y: counts[index]
                }));

                document.getElementById('loaderInternalAuditStatusRecordsScatter').style.display = 'none'; // Updated loader ID
                const chartElement = document.getElementById('InternalAuditStatusRecordsScatter');
                chartElement.style.display = 'block';

                new Chart(chartElement, {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Status Records',
                            data: scatterData,
                            backgroundColor: '#42a5f5',
                            borderColor: '#1e88e5',
                            borderWidth: 1,
                            pointRadius: 6,
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Status'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Count'
                                }
                            }
                        }
                    }
                });
            });
    }
</script>



<!-- Internal Audit Records  -->
<div id="internalauditTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="internalauditTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleInternalAuditTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchinternalauditRecords() {
        $.ajax({
            url: '{{ route('api.records.internalaudit') }}', // internalaudit records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#internalauditTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, internalaudit) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + internalaudit.id + '</td>';
                    row += '<td>' + internalaudit.record + '</td>';
                    row += '<td>' + internalaudit.initiation_date + '</td>';
                    row += '<td>' + internalaudit.Initiator_Group + '</td>';
                    row += '<td>' + internalaudit.incident_category + '</td>';
                    row += '<td>' + internalaudit.short_description + '</td>';
                    row += '<td>' + internalaudit.due_date + '</td>';
                    row += '<td>' + internalaudit.audit_lead_more_info_reqd_on + '</td>';
                    row += '<td>' + internalaudit.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the internalaudit table
    function toggleInternalAuditTable() {
        var table = document.getElementById("internalauditTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchinternalauditRecords(); // Fetch and display the internalaudit records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Internal Audit Records  -->

<!-- Internal Audit  Graph Ends -->



<!-- Incident Graph Starts -->
 <br>

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Incident Section -->
  <div id="incident-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleIncidentGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-exclamation-triangle" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Incident
  </div>

  <!-- Incident Graphs Toggle Button -->
  <div id="incident-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleIncidentTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Incident Table
  </div>

</div>


<div id="chartIncidentButtons" style="display: none; text-align: center; margin-bottom: 20px;">
    <button id="barIncidentButton" class="btn btn-primary" onclick="showBarIncidentChart()"><i class="fas fa-chart-bar"></i></button>
    <button id="pieIncidentButton" class="btn btn-primary" onclick="showPieIncidentChart()"><i class="fas fa-chart-pie"></i></button>
    <button id="lineIncidentButton" class="btn btn-primary" onclick="showLineIncidentChart()"><i class="fas fa-chart-line"></i></button>
    <button id="scatterIncidentButton" class="btn btn-primary"
        onclick="showScatterIncidentChart()"><i class="bi bi-cloud"></i></button>

</div>

<div id="Incident" style="display: none;">
      <div
          style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
          <div style="width: 45%; height: 400px; position: relative;">
              <h4 style="text-align: center;">Initial Categorization</h4>
              <div class="spinner-container" id="loaderIncidentInitialCategorization" 
                  style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                  <div class="spinner-border" role="status">
                      <span class="visually-hidden">Loading...</span>
                  </div>
              </div>
              <canvas id="IncidentInitialCategorization" style="display: none;"></canvas>
          </div>

          <div style="width: 45%; height: 400px; position: relative;">
              <h4 style="text-align: center;">Post Categorization of Incident</h4>
              <div class="spinner-container" id="loaderIncidentPostCategorization" 
                  style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                  <div class="spinner-border" role="status">
                      <span class="visually-hidden">Loading...</span>
                  </div>
              </div>
              <canvas id="IncidentPostCategorization" style="display: none;"></canvas>
          </div>
      </div>

      <div
    style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Incident Delay and On Time</h4>
        <div class="spinner-container" id="loaderdelayedOntimeIncident" 
             style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="delayedOntimeIncident" style="display: none;"></canvas>
    </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Incident by Site</h4>
            <div class="spinner-container" id="loaderIncidentSiteRecords" 
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentSiteRecords" style="display: none;"></canvas>
        </div>
    </div>

    <div
        style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderpriorityLevelIncident" 
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelIncident" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Incident by Status</h4>
            <div class="spinner-container" id="loaderIncidentStatusRecords" 
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentStatusRecords" style="display: none;"></canvas>
        </div>


    </div>
</div>

<div id="IncidentPie" style="display: none;">
<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Initial Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Initial Categorization</h4>
        <div class="spinner-container" id="loaderIncidentInitialCategorizationPie"
            style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="IncidentInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Post Categorization of Incident</h4>
        <div class="spinner-container" id="loaderIncidentPostCategorizationPie"
            style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="IncidentPostCategorizationPie" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Incident Delay and On Time -->
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Incident Delay and On Time</h4>
        <div class="spinner-container" id="loaderDelayedOntimeIncidentPie"
            style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="delayedOntimeIncidentPie" style="display: none;"></canvas>
    </div>

    <!-- Incident by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Incident by Site</h4>
        <div class="spinner-container" id="loaderIncidentSiteRecordsPie"
            style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="IncidentSiteRecordsPie" style="display: none;"></canvas>
    </div>
</div>

<div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <!-- Priority Levels -->
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Priority Levels</h4>
        <div class="spinner-container" id="loaderPriorityLevelIncidentPie"
            style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="priorityLevelIncidentPie" style="display: none;"></canvas>
    </div>

    <!-- Incident by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
        <h4 style="text-align: center;">Incident by Status</h4>
        <div class="spinner-container" id="loaderIncidentStatusRecordsPie"
            style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <canvas id="IncidentStatusRecordsPie" style="display: none;"></canvas>
    </div>
    </div>
</div>

<div id="IncidentLine" style="display: none;">
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Initial Categorization</h4>
            <div class="spinner-container" id="loaderInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentInitialCategorizationLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px; position: relative;">
            <h4 style="text-align: center;">Post Categorization of Incident</h4>
            <div class="spinner-container" id="loaderPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentPostCategorizationLine" style="display: none;"></canvas>
        </div>
    </div>
    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Incident Delay and On Time</h4>
            <div class="spinner-container" id="loaderDelayedOntimeIncidentLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeIncidentLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Incident by Site</h4>
            <div class="spinner-container" id="loaderIncidentSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentSiteRecordsLine" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderPriorityLevelIncidentLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelIncidentLine" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Incident by Status</h4>
            <div class="spinner-container" id="loaderIncidentStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentStatusRecordsLine" style="display: none;"></canvas>
        </div>
    </div>
  </div>


   <div id="IncidentScatter" style="display: none;">
      <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
          <div style="width: 45%; height: 400px;">
              <h4 style="text-align: center;">Initial Categorization</h4>
              <div class="spinner-container" id="loaderInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                  <div class="spinner-border" role="status">
                      <span class="visually-hidden">Loading...</span>
                  </div>
              </div>
              <canvas id="IncidentInitialCategorizationScatter" style="display: none;"></canvas>
          </div>

          <div style="width: 45%; height: 400px;">
              <h4 style="text-align: center;">Post Categorization of Incident</h4>
              <div class="spinner-container" id="loaderPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                  <div class="spinner-border" role="status">
                      <span class="visually-hidden">Loading...</span>
                  </div>
              </div>
              <canvas id="IncidentPostCategorizationScatter" style="display: none;"></canvas>
          </div>
      </div>

      <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Incident Delay and On Time</h4>
            <div class="spinner-container" id="loaderDelayedOntimeIncidentScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="delayedOntimeIncidentScatter" style="display: none;"></canvas>
        </div>

        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Incident by Site</h4>
            <div class="spinner-container" id="loaderIncidentSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentSiteRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>

    <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
        <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Priority Levels</h4>
            <div class="spinner-container" id="loaderPriorityLevelIncidentScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="priorityLevelIncidentScatter" style="display: none;"></canvas>
        </div>

         <div style="width: 45%; height: 400px;">
            <h4 style="text-align: center;">Incident by Status</h4>
            <div class="spinner-container" id="loaderIncidentStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <canvas id="IncidentStatusRecordsScatter" style="display: none;"></canvas>
        </div>
    </div>
</div>

<script>
    let chartsIncident = false;

function toggleIncidentGraphs() {
    const graphContainers = [
        document.getElementById('Incident'),
        document.getElementById('IncidentPie'),
        document.getElementById('IncidentLine'),
        document.getElementById('IncidentScatter') // Additional graph types
    ];
    const chartIncidentButtons = document.getElementById('chartIncidentButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartIncidentButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to Incident
        chartIncidentButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsIncident) {
            initializeIncidentCharts();
            chartsIncident = true;
        }
    }
}


    function showBarIncidentChart() {
        const barChartContainer = document.getElementById('Incident');
        const pieChartContainer = document.getElementById('IncidentPie');
        const lineChartContainer = document.getElementById('IncidentLine');
        const scatterChartContainer = document.getElementById(
        'IncidentScatter'); // Corrected: Add scatter chart container

        // Toggle visibility
        barChartContainer.style.display = 'block';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none'; // Hide line chart
        scatterChartContainer.style.display = 'none'; // Hide Scatter chart

        // Style the active button
        document.getElementById('barIncidentButton').classList.add('btn-active');
        document.getElementById('pieIncidentButton').classList.remove('btn-active');
        document.getElementById('lineIncidentButton').classList.remove('btn-active'); // Deactivate line button
        document.getElementById('scatterIncidentButton').classList.remove('btn-active'); // Deactivate scatter button
    }


    function showPieIncidentChart() {
        const barChartContainer = document.getElementById('Incident');
        const pieChartContainer = document.getElementById('IncidentPie');
        const lineChartContainer = document.getElementById('IncidentLine');
        const scatterChartContainer = document.getElementById('IncidentScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'block'; // Show pie chart
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barIncidentButton').classList.remove('btn-active');
        document.getElementById('pieIncidentButton').classList.add('btn-active'); // Activate pie button
        document.getElementById('lineIncidentButton').classList.remove('btn-active');
        document.getElementById('scatterIncidentButton').classList.remove('btn-active');
    }

    function showLineIncidentChart() {
        const barChartContainer = document.getElementById('Incident');
        const pieChartContainer = document.getElementById('IncidentPie');
        const lineChartContainer = document.getElementById('IncidentLine');
        const scatterChartContainer = document.getElementById('IncidentScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'block'; // Show line chart
        scatterChartContainer.style.display = 'none';

        // Style the active button
        document.getElementById('barIncidentButton').classList.remove('btn-active');
        document.getElementById('pieIncidentButton').classList.remove('btn-active');
        document.getElementById('lineIncidentButton').classList.add('btn-active'); // Activate line button
        document.getElementById('scatterIncidentButton').classList.remove('btn-active');
    }


    function showScatterIncidentChart() {
        const barChartContainer = document.getElementById('Incident');
        const pieChartContainer = document.getElementById('IncidentPie');
        const lineChartContainer = document.getElementById('IncidentLine');
        const scatterChartContainer = document.getElementById('IncidentScatter');

        // Toggle visibility
        barChartContainer.style.display = 'none';
        pieChartContainer.style.display = 'none';
        lineChartContainer.style.display = 'none';
        scatterChartContainer.style.display = 'block'; // Show scatter chart

        // Style the active button
        document.getElementById('barIncidentButton').classList.remove('btn-active');
        document.getElementById('pieIncidentButton').classList.remove('btn-active');
        document.getElementById('lineIncidentButton').classList.remove('btn-active');
        document.getElementById('scatterIncidentButton').classList.add('btn-active'); // Activate scatter button
    }

    function initializeIncidentCharts() {
          // Initial Categorization
          fetch('/api/incident-initial-categorization')
              .then(response => response.json())
              .then(data => {

                
                  const categories = Object.keys(data);
                  const counts = Object.values(data);
                  // Hide loader and show the chart
                  document.getElementById('loaderIncidentInitialCategorization').style.display = 'none';
                  const chartElement = document.getElementById('IncidentInitialCategorization');
                  chartElement.style.display = 'block';

                  new Chart(chartElement, {
                      type: 'bar',
                      data: {
                          labels: categories,
                          datasets: [{
                              label: 'Incident',
                              data: counts,
                              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                              borderWidth: 1,
                          }]
                      },
                      options: {
                          responsive: true,
                          scales: {
                              y: {
                                  beginAtZero: true
                              }
                          }
                      }
                  });
              });

          // Post Categorization
          fetch('/api/incident-post-categorization')
              .then(response => response.json())
              .then(data => {
                  const categories = Object.keys(data);
                  const counts = Object.values(data);
                  // Hide loader and show the chart
                  document.getElementById('loaderIncidentPostCategorization').style.display = 'none';
                  const chartElement = document.getElementById('IncidentPostCategorization');
                  chartElement.style.display = 'block';

                  new Chart(chartElement, {
                      type: 'bar',
                      data: {
                          labels: categories,
                          datasets: [{
                              label: 'Incident',
                              data: counts,
                              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
                              borderWidth: 1,
                          }]
                      },
                      options: {
                          responsive: true,
                          scales: {
                              y: {
                                  beginAtZero: true
                              }
                          }
                      }
                  });
              });

          // Delayed and On Time
      fetch('/api/incident-ontime-delayed-records')
          .then(response => response.json())
          .then(data => {
              document.getElementById('loaderdelayedOntimeIncident').style.display = 'none';
              const chartElement = document.getElementById('delayedOntimeIncident');
              chartElement.style.display = 'block';

              new Chart(chartElement, {
                  type: 'bar',
                  data: {
                      labels: ['On Time', 'Delayed'],
                      datasets: [{
                          label: 'Incident',
                          data: [data['On Time'], data['Delayed']],
                          backgroundColor: ['#4caf50', '#f44336'],
                          borderWidth: 1,
                      }]
                  },
                  options: {
                      responsive: true,
                      scales: {
                          y: {
                              beginAtZero: true
                          }
                      }
                  }
              });
          });

      // Site Records
      fetch('/api/incident-sitewise-records')
          .then(response => response.json())
          .then(data => {
              const divisions = data.map(item => item.division_name);
              const counts = data.map(item => item.count);
              document.getElementById('loaderIncidentSiteRecords').style.display = 'none';
              const chartElement = document.getElementById('IncidentSiteRecords');
              chartElement.style.display = 'block';

              new Chart(chartElement, {
                  type: 'bar',
                  data: {
                      labels: divisions,
                      datasets: [{
                          label: 'Records',
                          data: counts,
                          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                          borderWidth: 1,
                      }]
                  },
                  options: {
                      responsive: true,
                      scales: {
                          y: {
                              beginAtZero: true
                          }
                      }
                  }
              });
          });

      // Priority Levels
      fetch('/api/incident-priority-records')
          .then(response => response.json())
          .then(data => {
              const categories = Object.keys(data);
              const counts = Object.values(data);
              document.getElementById('loaderpriorityLevelIncident').style.display = 'none';
              const chartElement = document.getElementById('priorityLevelIncident');
              chartElement.style.display = 'block';

              new Chart(chartElement, {
                  type: 'bar',
                  data: {
                      labels: categories,
                      datasets: [{
                          label: 'Incident',
                          data: counts,
                          backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                          borderWidth: 1,
                      }]
                  },
                  options: {
                      responsive: true,
                      scales: {
                          y: {
                              beginAtZero: true
                          }
                      }
                  }
              });
          });

      // Status Records
      fetch('/api/incident-status-records')
          .then(response => response.json())
          .then(data => {
              const statuses = Object.keys(data);
              const counts = Object.values(data);
              document.getElementById('loaderIncidentStatusRecords').style.display = 'none';
              const chartElement = document.getElementById('IncidentStatusRecords');
              chartElement.style.display = 'block';

              new Chart(chartElement, {
                  type: 'bar',
                  data: {
                      labels: statuses,
                      datasets: [{
                          label: 'Records',
                          data: counts,
                          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                          borderWidth: 1,
                      }]
                  },
                  options: {
                      responsive: true,
                      scales: {
                          y: {
                              beginAtZero: true
                          }
                      }
                  }
              });
          });




        // Initial Categorization for pie
     // Initial Categorization with Loader
fetch('/api/incident-initial-categorization')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderIncidentInitialCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('IncidentInitialCategorizationPie');
        chartElement.style.display = 'block';

        // Create the chart
        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Incident',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // This will allow the chart to scale
                aspectRatio: 1,
            }
        });
    })
    .catch(error => {
        console.error('Error loading initial categorization:', error);
        document.getElementById('loaderIncidentInitialCategorizationPie').style.display = 'none';
    });

// Post Categorization with Loader
fetch('/api/incident-post-categorization')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderIncidentPostCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('IncidentPostCategorizationPie');
        chartElement.style.display = 'block';

        // Create the chart
        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Incident',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // This will allow the chart to scale
                aspectRatio: 1,
            }
        });
    })
    .catch(error => {
        console.error('Error loading post categorization:', error);
        document.getElementById('loaderIncidentPostCategorizationPie').style.display = 'none';
    });

// Delayed and On Time with Loader
fetch('/api/incident-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderDelayedOntimeIncidentPie').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeIncidentPie');
        chartElement.style.display = 'block';

        // Create the chart
        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Incident',
                    data: [data['On Time'], data['Delayed']],
                    backgroundColor: ['#4caf50', '#f44336'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // This will allow the chart to scale
                aspectRatio: 1,
            }
        });
    })
    .catch(error => {
        console.error('Error loading delayed/on-time records:', error);
        document.getElementById('loaderDelayedOntimeIncidentPie').style.display = 'none';
    });

// Site Records with Loader
fetch('/api/incident-sitewise-records')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderIncidentSiteRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('IncidentSiteRecordsPie');
        chartElement.style.display = 'block';

        // Create the chart
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // This will allow the chart to scale
                aspectRatio: 1,
            }
        });
    })
    .catch(error => {
        console.error('Error loading site records:', error);
        document.getElementById('loaderIncidentSiteRecordsPie').style.display = 'none';
    });

// Priority Levels with Loader
fetch('/api/incident-priority-records')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderPriorityLevelIncidentPie').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelIncidentPie');
        chartElement.style.display = 'block';

        // Create the chart
        const categories = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Incident',
                    data: counts,
                    backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // This will allow the chart to scale
                aspectRatio: 1,
            }
        });
    })
    .catch(error => {
        console.error('Error loading priority records:', error);
        document.getElementById('loaderPriorityLevelIncidentPie').style.display = 'none';
    });

// Status Records with Loader
fetch('/api/incident-status-records')
    .then(response => response.json())
    .then(data => {
        // Hide the loader and show the chart
        document.getElementById('loaderIncidentStatusRecordsPie').style.display = 'none';
        const chartElement = document.getElementById('IncidentStatusRecordsPie');
        chartElement.style.display = 'block';

        // Create the chart
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        new Chart(chartElement, {
            type: 'pie',
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // This will allow the chart to scale
                aspectRatio: 1,
            }
        });
    })
    .catch(error => {
        console.error('Error loading status records:', error);
        document.getElementById('loaderIncidentStatusRecordsPie').style.display = 'none';
    });


//initial Categorization for Linw

// Initial Categorization for line
fetch('/api/incident-initial-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        

        // Hide loader and show the chart
        const loader = document.getElementById('loaderInitialCategorizationLine');
        const chartElement = document.getElementById('IncidentInitialCategorizationLine');

        // Hide the loader
        loader.style.display = 'none';
        // Show the chart
        chartElement.style.display = 'block';

        // Create the chart
        new Chart(chartElement, {
            type: 'line',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Incident',
                    data: counts,
                    borderColor: '#3498db',
                    backgroundColor: 'rgba(52, 152, 219, 0.2)',
                    fill: true,
                    borderWidth: 2,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching initial categorization data:', error);
        // Optionally hide the loader if there's an error
        document.getElementById('loaderInitialCategorizationLine').style.display = 'none';
    });

// Post Categorization for line
fetch('/api/incident-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        const loader = document.getElementById('loaderPostCategorizationLine');
        const chartElement = document.getElementById('IncidentPostCategorizationLine');

        // Hide the loader
        loader.style.display = 'none';
        // Show the chart
        chartElement.style.display = 'block';

        // Create the chart
        new Chart(chartElement, {
            type: 'line',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Incident',
                    data: counts,
                    borderColor: '#2ecc71',
                    backgroundColor: 'rgba(46, 204, 113, 0.2)',
                    fill: true,
                    borderWidth: 2,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching post categorization data:', error);
        // Optionally hide the loader if there's an error
        document.getElementById('loaderPostCategorizationLine').style.display = 'none';
    });

  
// Delayed and On Time
fetch('/api/incident-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderDelayedOntimeIncidentLine');
        const chartElement = document.getElementById('delayedOntimeIncidentLine');

        // Hide the loader and show the chart
        loader.style.display = 'none';
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'line',
            data: {
                labels: ['On Time', 'Delayed'],
                datasets: [{
                    label: 'Incident',
                    data: [data['On Time'], data['Delayed']],
                    borderColor: '#4caf50',
                    backgroundColor: 'rgba(76, 175, 80, 0.2)',
                    fill: true,
                    borderWidth: 2,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching delayed and on time incident data:', error);
        document.getElementById('loaderDelayedOntimeIncidentLine').style.display = 'none';
    });

// Site Records
fetch('/api/incident-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        const loader = document.getElementById('loaderIncidentSiteRecordsLine');
        const chartElement = document.getElementById('IncidentSiteRecordsLine');

        // Hide the loader and show the chart
        loader.style.display = 'none';
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'line',
            data: {
                labels: divisions,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    borderColor: '#42a5f5',
                    backgroundColor: 'rgba(66, 165, 245, 0.2)',
                    fill: true,
                    borderWidth: 2,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching site records data:', error);
        document.getElementById('loaderIncidentSiteRecordsLine').style.display = 'none';
    });

// Priority Levels
fetch('/api/incident-priority-records')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        const loader = document.getElementById('loaderPriorityLevelIncidentLine');
        const chartElement = document.getElementById('priorityLevelIncidentLine');

        // Hide the loader and show the chart
        loader.style.display = 'none';
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'line',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Incident',
                    data: counts,
                    borderColor: '#f39c12',
                    backgroundColor: 'rgba(243, 156, 18, 0.2)',
                    fill: true,
                    borderWidth: 2,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching priority level data:', error);
        document.getElementById('loaderPriorityLevelIncidentLine').style.display = 'none';
    });

// Status Records
fetch('/api/incident-status-records')
    .then(response => response.json())
    .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        const loader = document.getElementById('loaderIncidentStatusRecordsLine');
        const chartElement = document.getElementById('IncidentStatusRecordsLine');

        // Hide the loader and show the chart
        loader.style.display = 'none';
        chartElement.style.display = 'block';

        new Chart(chartElement, {
            type: 'line',
            data: {
                labels: statuses,
                datasets: [{
                    label: 'Records',
                    data: counts,
                    borderColor: '#ffa726',
                    backgroundColor: 'rgba(255, 167, 38, 0.2)',
                    fill: true,
                    borderWidth: 2,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching incident status data:', error);
        document.getElementById('loaderIncidentStatusRecordsLine').style.display = 'none';
    });

    fetch('/api/incident-initial-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        const loader = document.getElementById('loaderInitialCategorization');
        const chartElement = document.getElementById('IncidentInitialCategorizationScatter');

        loader.style.display = 'none'; // Hide loader
        chartElement.style.display = 'block'; // Show chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Incident',
                    data: categories.map((category, index) => ({ x: index + 1, y: counts[index] })),
                    borderColor: '#3498db',
                    backgroundColor: '#3498db',
                    borderWidth: 1,
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching initial categorization data:', error);
        document.getElementById('loaderInitialCategorization').style.display = 'none';
    });

// Post Categorization scatter
fetch('/api/incident-post-categorization')
    .then(response => response.json())
    .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        const loader = document.getElementById('loaderPostCategorization');
        const chartElement = document.getElementById('IncidentPostCategorizationScatter');

        loader.style.display = 'none'; // Hide loader
        chartElement.style.display = 'block'; // Show chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Incident',
                    data: categories.map((category, index) => ({ x: index + 1, y: counts[index] })),
                    borderColor: '#2ecc71',
                    backgroundColor: '#2ecc71',
                    borderWidth: 1,
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching post categorization data:', error);
        document.getElementById('loaderPostCategorization').style.display = 'none';
    });

// Delayed and On Time
fetch('/api/incident-ontime-delayed-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderDelayedOntimeIncidentScatter');
        const chartElement = document.getElementById('delayedOntimeIncidentScatter');

        loader.style.display = 'none'; // Hide loader
        chartElement.style.display = 'block'; // Show chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Incident',
                    data: [
                        { x: 1, y: data['On Time'] },
                        { x: 2, y: data['Delayed'] }
                    ],
                    borderColor: '#4caf50',
                    backgroundColor: '#4caf50',
                    borderWidth: 1,
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching delayed and on time incident data:', error);
        document.getElementById('loaderDelayedOntimeIncidentScatter').style.display = 'none';
    });

// Incident Site Records
fetch('/api/incident-sitewise-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderIncidentSiteRecordsScatter');
        const chartElement = document.getElementById('IncidentSiteRecordsScatter');

        loader.style.display = 'none'; // Hide loader
        chartElement.style.display = 'block'; // Show chart

        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Incident Site Records',
                    data: data.map((item, index) => ({ x: index + 1, y: item.count })),
                    borderColor: '#42a5f5',
                    backgroundColor: '#42a5f5',
                    borderWidth: 1,
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching site records data:', error);
        document.getElementById('loaderIncidentSiteRecordsScatter').style.display = 'none';
    });
// Priority Levels
fetch('/api/incident-priority-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderPriorityLevelIncidentScatter');
        const chartElement = document.getElementById('priorityLevelIncidentScatter');
        
        loader.style.display = 'none';
        chartElement.style.display = 'block';
        
        // Create the chart
        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Priority Levels',
                    data: Object.keys(data).map((category, index) => ({
                        x: index + 1,
                        y: data[category]
                    })),
                    borderColor: '#f39c12',
                    backgroundColor: '#f39c12',
                    borderWidth: 1,
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching priority level data:', error);
        document.getElementById('loaderPriorityLevelIncidentScatter').style.display = 'none';
    });

// Incident Status Records
fetch('/api/incident-status-records')
    .then(response => response.json())
    .then(data => {
        const loader = document.getElementById('loaderIncidentStatusRecordsScatter');
        const chartElement = document.getElementById('IncidentStatusRecordsScatter');
        
        loader.style.display = 'none';
        chartElement.style.display = 'block';
        
        // Create the chart
        new Chart(chartElement, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Incident Status Records',
                    data: Object.keys(data).map((status, index) => ({
                        x: index + 1,
                        y: data[status]
                    })),
                    borderColor: '#ffa726',
                    backgroundColor: '#ffa726',
                    borderWidth: 1,
                    pointRadius: 5,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: { beginAtZero: true },
                    y: { beginAtZero: true }
                }
            }
        });
    })
    .catch(error => {
        console.error('Error fetching incident status data:', error);
        document.getElementById('loaderIncidentStatusRecordsScatter').style.display = 'none';
    });

    }
</script>


<!-- Incident Records -->
<div id="IncidentTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="IncidentTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleIncidentTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchIncidentRecords() {
        $.ajax({
            url: '{{ route('api.records.Incident') }}', // Incident records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#IncidentTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, Incident) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + Incident.id + '</td>';
                    row += '<td>' + Incident.record + '</td>';
                    row += '<td>' + Incident.intiation_date + '</td>';
                    row += '<td>' + Incident.Initiator_Group + '</td>';
                    row += '<td>' + Incident.Justification_for_categorization + '</td>';
                    row += '<td>' + Incident.short_description + '</td>';
                    row += '<td>' + Incident.due_date + '</td>';
                    row += '<td>' + Incident.QA_final_approved_on + '</td>';
                    row += '<td>' + Incident.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the Incident table
    function toggleIncidentTable() {
        var table = document.getElementById("IncidentTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchIncidentRecords(); // Fetch and display the Incident records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Incident Records -->

<!-- Incident  Graph Ends -->



<!-- External Audit Graph Starts -->
 <br>

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- External Audit Section -->
  <div id="external-audit-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleExternalAuditGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-search" style="margin-right: 8px;"></i> <!-- Icon Added -->
       External Audit
  </div>

  <!-- External Audit Graphs Toggle Button -->
  <div id="external-audit-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleExternalAuditTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> External Audit Table
  </div>

</div>


<!-- Container for the Buttons (Initially Hidden) -->
<div id="chartButtonsExternal" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="barButtonExternal" class="btn btn-primary" onclick="showExternalaBarChart()"><i class="fas fa-chart-bar"></i></button>
  <button id="pieButtonExternal" class="btn btn-primary" onclick="showExternalPieChart()"><i class="fas fa-chart-pie"></i></button>
  <button id="lineButtonExternal" class="btn btn-primary" onclick="showLineExternalChart()"><i class="fas fa-chart-line"></i></button>
  <button id="scatterButtonExternal" class="btn btn-primary" onclick="showScatterExternalChart()"><i class="bi bi-cloud"></i></button>
</div>

<div id="ExternalAudit" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderExternalAuditInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of External Audit</h4>
      <div class="spinner-container" id="loaderExternalAuditPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeExternalAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeExternalAudit" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit by Site</h4>
      <div class="spinner-container" id="loaderExternalAuditSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelExternalAudit" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelExternalAudit" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit by Status</h4>
      <div class="spinner-container" id="loaderExternalAuditStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ExternalAuditPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderExternalAuditInitialCategorizationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditInitialCategorizationpie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of External Audit</h4>
      <div class="spinner-container" id="loaderExternalAuditPostCategorizationpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditPostCategorizationpie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeExternalAuditpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeExternalAuditpie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit by Site</h4>
      <div class="spinner-container" id="loaderExternalAuditSiteRecordspie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditSiteRecordspie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelExternalAuditpie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelExternalAuditpie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit by Status</h4>
      <div class="spinner-container" id="loaderExternalAuditStatusRecordspie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditStatusRecordspie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ExternalAuditLine" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization Over Time</h4>
      <div class="spinner-container" id="loaderExternalAuditInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of External Audit Over Time</h4>
      <div class="spinner-container" id="loaderExternalAuditPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit Delay and On-Time Trends</h4>
      <div class="spinner-container" id="loaderDelayedOntimeExternalAuditLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeExternalAuditLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit by Site Over Time</h4>
      <div class="spinner-container" id="loaderExternalAuditSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels Over Time</h4>
      <div class="spinner-container" id="loaderPriorityLevelExternalAuditLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelExternalAuditLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">External Audit by Status Over Time</h4>
      <div class="spinner-container" id="loaderExternalAuditStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ExternalAuditScatter" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization Distribution</h4>
      <div class="spinner-container" id="loaderExternalAuditInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization Distribution</h4>
      <div class="spinner-container" id="loaderExternalAuditPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Delay vs. On-Time Scatter</h4>
      <div class="spinner-container" id="loaderDelayedOntimeExternalAuditScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeExternalAuditScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Distribution by Site</h4>
      <div class="spinner-container" id="loaderExternalAuditSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditSiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Level Distribution</h4>
      <div class="spinner-container" id="loaderPriorityLevelExternalAuditScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelExternalAuditScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Audit Status Scatter</h4>
      <div class="spinner-container" id="loaderExternalAuditStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ExternalAuditStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>

<script>
  let chartsExternalAudit = false;

function toggleExternalAuditGraphs() {
    const graphContainers = [
        document.getElementById('ExternalAudit'),
        document.getElementById('ExternalAuditPie'),
        document.getElementById('ExternalAuditLine'),
        document.getElementById('ExternalAuditScatter') // Additional graph types if needed
    ];
    const chartButtonsExternal = document.getElementById('chartButtonsExternal');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartButtonsExternal.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to ExternalAudit
        chartButtonsExternal.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsExternalAudit) {
            initializeExternalAuditCharts();
            chartsExternalAudit = true;
        }
    }
}

// Function to show Bar Chart
function showExternalaBarChart() {
  const barChartContainer = document.getElementById('ExternalAudit');
  const pieChartContainer = document.getElementById('ExternalAuditPie');
  const lineChartContainer = document.getElementById('ExternalAuditLine');  
  const scatterChartContainer = document.getElementById('ExternalAuditScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barButtonExternal').classList.add('btn-active');
  document.getElementById('pieButtonExternal').classList.remove('btn-active');
  document.getElementById('lineButtonExternal').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtonExternal').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showExternalPieChart() {
  const barChartContainer = document.getElementById('ExternalAudit');
  const pieChartContainer = document.getElementById('ExternalAuditPie');
  const lineChartContainer = document.getElementById('ExternalAuditLine');  
  const scatterChartContainer = document.getElementById('ExternalAuditScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieButtonExternal').classList.add('btn-active');
  document.getElementById('barButtonExternal').classList.remove('btn-active');
  document.getElementById('lineButtonExternal').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtonExternal').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showLineExternalChart() {
  const barChartContainer = document.getElementById('ExternalAudit');
  const pieChartContainer = document.getElementById('ExternalAuditPie');
  const lineChartContainer = document.getElementById('ExternalAuditLine');  
  const scatterChartContainer = document.getElementById('ExternalAuditScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('lineButtonExternal').classList.add('btn-active');
  document.getElementById('barButtonExternal').classList.remove('btn-active');
  document.getElementById('pieButtonExternal').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('scatterButtonExternal').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showScatterExternalChart() {
  const scatterChartContainer = document.getElementById('ExternalAuditScatter');  
  const barChartContainer = document.getElementById('ExternalAudit');
  const pieChartContainer = document.getElementById('ExternalAuditPie');
  const lineChartContainer = document.getElementById('ExternalAuditLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterButtonExternal').classList.add('btn-active');
  document.getElementById('barButtonExternal').classList.remove('btn-active');
  document.getElementById('pieButtonExternal').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('lineButtonExternal').classList.remove('btn-active'); // Deactivate line button
}

  function initializeExternalAuditCharts() {
    // Initial Categorization
    fetch('/api/external-audit-initial-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderExternalAuditInitialCategorization').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditInitialCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'External Audit',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Post Categorization
    fetch('/api/external-audit-post-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderExternalAuditPostCategorization').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditPostCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'External Audit',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Delayed and On Time
    fetch('/api/external-audit-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {
        // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimeExternalAudit').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeExternalAudit');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'External Audit',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#4caf50', '#f44336'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/external-audit-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        // Hide loader and show the chart
        document.getElementById('loaderExternalAuditSiteRecords').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditSiteRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/external-audit-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderPriorityLevelExternalAudit').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelExternalAudit');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'External Audit',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/external-audit-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderExternalAuditStatusRecords').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'External Audit',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });


      // Initialize Pie Charts
  fetch('/api/external-audit-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

              // Hide loader and show the chart
        document.getElementById('loaderExternalAuditInitialCategorizationpie').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditInitialCategorizationpie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'External Audit',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6'],
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, // This will allow the chart to scale
          aspectRatio: 1,
         }
      });
    });

  fetch('/api/external-audit-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

              // Hide loader and show the chart
              document.getElementById('loaderExternalAuditPostCategorizationpie').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditPostCategorizationpie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'External Audit',
            data: counts,
            backgroundColor: [
              '#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6', 
              '#1abc9c', '#34495e', '#f1c40f', '#e67e22', '#e84393'
            ],
            borderColor: '#fff',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

  fetch('/api/external-audit-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

            // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimeExternalAuditpie').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeExternalAuditpie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'External Audit',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#4caf50', '#f44336'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/external-audit-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

            // Hide loader and show the chart
        document.getElementById('loaderExternalAuditSiteRecordspie').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditSiteRecordspie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#9b59b6', '#f39c12'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/external-audit-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
        document.getElementById('loaderPriorityLevelExternalAuditpie').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelExternalAuditpie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts,
          backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });


  fetch('/api/external-audit-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
        document.getElementById('loaderExternalAuditStatusRecordspie').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditStatusRecordspie');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

// Audit proigram for line chart 
// Initialize Line Charts
fetch('/api/external-audit-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditInitialCategorizationLine').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditInitialCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts,
          backgroundColor: 'rgba(52, 152, 219, 0.2)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/external-audit-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditPostCategorizationLine').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditPostCategorizationLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts,
          backgroundColor: 'rgba(46, 204, 113, 0.2)', // Light green
          borderColor: '#2ecc71', // Green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/external-audit-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

            // Hide loader and show the chart
            document.getElementById('loaderDelayedOntimeExternalAuditLine').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeExternalAuditLine');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'External Audit',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgba(76, 175, 80, 0.2)', // Light green
          borderColor: '#4caf50', // Green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/external-audit-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditSiteRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditSiteRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(66, 165, 245, 0.2)', // Light blue
          borderColor: '#42a5f5', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/external-audit-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderPriorityLevelExternalAuditLine').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelExternalAuditLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts,
          backgroundColor: 'rgba(243, 156, 18, 0.2)', // Light orange
          borderColor: '#f39c12', // Orange
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/external-audit-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditStatusRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditStatusRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(255, 87, 34, 0.2)', // Light red
          borderColor: '#f44336', // Red
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Audit program for Scatter chart 
// Initialize Scatter Charts
fetch('/api/external-audit-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditInitialCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditInitialCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(52, 152, 219, 0.6)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/external-audit-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditPostCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditPostCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(46, 204, 113, 0.6)', // Light green
          borderColor: '#2ecc71', // Green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/external-audit-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

            // Hide loader and show the chart
            document.getElementById('loaderDelayedOntimeExternalAuditScatter').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeExternalAuditScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'External Audit',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgba(76, 175, 80, 0.6)', // Light green
          borderColor: '#4caf50', // Green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/external-audit-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditSiteRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditSiteRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(66, 165, 245, 0.6)', // Light blue
          borderColor: '#42a5f5', // Blue
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/external-audit-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderPriorityLevelExternalAuditScatter').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelExternalAuditScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'External Audit',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(243, 156, 18, 0.6)', // Light orange
          borderColor: '#f39c12', // Orange
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/external-audit-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderExternalAuditStatusRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('ExternalAuditStatusRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(255, 87, 34, 0.6)', // Light red
          borderColor: '#f44336', // Red
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });




  }
</script>


<div id="externalauditTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="externalauditTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Severity Level</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleExternalAuditTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetchexternalauditRecords() {
        $.ajax({
            url: '{{ route('api.records.externalaudit') }}', // externalaudit records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#externalauditTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, externalaudit) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + externalaudit.id + '</td>';
                    row += '<td>' + externalaudit.record + '</td>';
                    row += '<td>' + externalaudit.intiation_date + '</td>';
                    row += '<td>' + externalaudit.Initiator_Group + '</td>';
                    row += '<td>' + externalaudit.severity_level + '</td>';
                    row += '<td>' + externalaudit.short_description + '</td>';
                    row += '<td>' + externalaudit.due_date + '</td>';
                    row += '<td>' + externalaudit.audit_lead_more_info_reqd_on + '</td>';
                    row += '<td>' + externalaudit.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the externalaudit table
    function toggleExternalAuditTable() {
        var table = document.getElementById("externalauditTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchexternalauditRecords(); // Fetch and display the externalaudit records
        } else {
            table.style.display = "none";
        }
    }
</script>

<!-- External Audit  Graph Ends -->



<!-- Errata -->
 <br>

<div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">

  <!-- Errata Section -->
  <div id="errata-control" 
       style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
       onclick="toggleErrataGraphs()" 
       onmouseover="this.style.color='#000';" 
       onmouseout="this.style.color='#eca035';">
       <i class="fas fa-pencil-alt" style="margin-right: 8px;"></i> <!-- Icon Added -->
       Errata
  </div>

  <!-- Errata Graphs Toggle Button -->
  <div id="errata-graphs-toggle" 
       style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
       onclick="toggleErrataTable()" 
       onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
       onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
       <span style="margin-right: 8px; font-size: 20px;">📋</span> Errata Table
  </div>

</div>


<!-- Container for the Buttons (Initially Hidden) -->
<div id="chartButtonsErrata" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="barButtonErrata" class="btn btn-primary" onclick="showErrataBarChart()"><i class="fas fa-chart-bar"></i></button>
  <button id="pieButtonErrata" class="btn btn-primary" onclick="showErrataPieChart()"><i class="fas fa-chart-pie"></i></button>
  <button id="lineButtonErrata" class="btn btn-primary" onclick="showLineErrataChart()"><i class="fas fa-chart-line"></i></button>
  <button id="scatterButtonErrata" class="btn btn-primary" onclick="showScatterErrataChart()"><i class="bi bi-cloud"></i></button>
</div>

<div id="Errata" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderErrataInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Errata</h4>
      <div class="spinner-container" id="loaderErrataPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeErrata" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeErrata" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Site</h4>
      <div class="spinner-container" id="loaderErrataSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelErrata" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelErrata" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Status</h4>
      <div class="spinner-container" id="loaderErrataStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ErrataPie" style="display: none;">
  <!-- First Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderErrataInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <div class="spinner-container" id="loaderErrataPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Second Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeErrataPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeErrataPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Site</h4>
      <div class="spinner-container" id="loaderErrataSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataSiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Third Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelErrataPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelErrataPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Status</h4>
      <div class="spinner-container" id="loaderErrataStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ErrataLine" style="display: none;">
  <!-- First Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderErrataInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <div class="spinner-container" id="loaderErrataPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Second Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeErrataLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeErrataLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Site</h4>
      <div class="spinner-container" id="loaderErrataSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Third Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelErrataLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelErrataLine" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Status</h4>
      <div class="spinner-container" id="loaderErrataStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ErrataScatter" style="display: none;">
  <!-- First Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderErrataInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <div class="spinner-container" id="loaderErrataPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Second Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeErrataScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeErrataScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Site</h4>
      <div class="spinner-container" id="loaderErrataSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataSiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Third Row -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelErrataScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelErrataScatter" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Errata by Status</h4>
      <div class="spinner-container" id="loaderErrataStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ErrataStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>

<script>
  let chartsErrata = false;

function toggleErrataGraphs() {
    const graphContainers = [
        document.getElementById('Errata'),
        document.getElementById('ErrataPie'),
        document.getElementById('ErrataLine'),
        document.getElementById('ErrataScatter') // Additional graph types if needed
    ];
    const chartButtonsErrata = document.getElementById('chartButtonsErrata');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        chartButtonsErrata.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to Errata
        chartButtonsErrata.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsErrata) {
            initializeErrataCharts();
            chartsErrata = true;
        }
    }
}

  // Function to show Bar Chart
  function showErrataBarChart() {
  const barChartContainer = document.getElementById('Errata');
  const pieChartContainer = document.getElementById('ErrataPie');
  const lineChartContainer = document.getElementById('ErrataLine');  
  const scatterChartContainer = document.getElementById('ErrataScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('barButtonErrata').classList.add('btn-active');
  document.getElementById('pieButtonErrata').classList.remove('btn-active');
  document.getElementById('lineButtonErrata').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtonErrata').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showErrataPieChart() {
  const barChartContainer = document.getElementById('Errata');
  const pieChartContainer = document.getElementById('ErrataPie');
  const lineChartContainer = document.getElementById('ErrataLine');  
  const scatterChartContainer = document.getElementById('ErrataScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('pieButtonErrata').classList.add('btn-active');
  document.getElementById('barButtonErrata').classList.remove('btn-active');
  document.getElementById('lineButtonErrata').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('scatterButtonErrata').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showLineErrataChart() {
  const barChartContainer = document.getElementById('Errata');
  const pieChartContainer = document.getElementById('ErrataPie');
  const lineChartContainer = document.getElementById('ErrataLine');  
  const scatterChartContainer = document.getElementById('ErrataScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('lineButtonErrata').classList.add('btn-active');
  document.getElementById('barButtonErrata').classList.remove('btn-active');
  document.getElementById('pieButtonErrata').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('scatterButtonErrata').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showScatterErrataChart() {
  const scatterChartContainer = document.getElementById('ErrataScatter');  
  const barChartContainer = document.getElementById('Errata');
  const pieChartContainer = document.getElementById('ErrataPie');
  const lineChartContainer = document.getElementById('ErrataLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('scatterButtonErrata').classList.add('btn-active');
  document.getElementById('barButtonErrata').classList.remove('btn-active');
  document.getElementById('pieButtonErrata').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('lineButtonErrata').classList.remove('btn-active'); // Deactivate line button
}

  function initializeErrataCharts() {
    // Initial Categorization
    fetch('/api/errata-initial-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderErrataInitialCategorization').style.display = 'none';
        const chartElement = document.getElementById('ErrataInitialCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Errata',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Post Categorization
    fetch('/api/errata-post-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderErrataPostCategorization').style.display = 'none';
        const chartElement = document.getElementById('ErrataPostCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Errata',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Delayed and On Time
    fetch('/api/errata-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {
        // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimeErrata').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeErrata');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'Errata',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#4caf50', '#f44336'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/errata-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        // Hide loader and show the chart
        document.getElementById('loaderErrataSiteRecords').style.display = 'none';
        const chartElement = document.getElementById('ErrataSiteRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/errata-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderPriorityLevelErrata').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelErrata');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Errata',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/errata-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderErrataStatusRecords').style.display = 'none';
        const chartElement = document.getElementById('ErrataStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'Errata',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

      
  // Initialize Pie Charts
  fetch('/api/errata-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

      // Hide loader and show the chart
      document.getElementById('loaderErrataInitialCategorizationPie').style.display = 'none';
      const chartElement = document.getElementById('ErrataInitialCategorizationPie');
      chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Errata',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6'],
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, // This will allow the chart to scale
          aspectRatio: 1,
         }
      });
    });

  fetch('/api/errata-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

              // Hide loader and show the chart
        document.getElementById('loaderErrataPostCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('ErrataPostCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Errata',
            data: counts,
            backgroundColor: [
              '#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6', 
              '#1abc9c', '#34495e', '#f1c40f', '#e67e22', '#e84393'
            ],
            borderColor: '#fff',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

    fetch('/api/errata-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

            // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeErrataPie').style.display = 'none';
    const chartElement = document.getElementById('delayedOntimeErrataPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Errata',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#4caf50', '#f44336'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/errata-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

            // Hide loader and show the chart
    document.getElementById('loaderErrataSiteRecordsPie').style.display = 'none';
    const chartElement = document.getElementById('ErrataSiteRecordsPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#9b59b6', '#f39c12'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/errata-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
    document.getElementById('loaderPriorityLevelErrataPie').style.display = 'none';
    const chartElement = document.getElementById('priorityLevelErrataPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts,
          backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });


  fetch('/api/errata-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
    document.getElementById('loaderErrataStatusRecordsPie').style.display = 'none';
    const chartElement = document.getElementById('ErrataStatusRecordsPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

// Audit proigram for line chart 
// Initialize Line Charts
fetch('/api/errata-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

      // Hide loader and show the chart
    document.getElementById('loaderErrataInitialCategorizationLine').style.display = 'none';
    const chartElement = document.getElementById('ErrataInitialCategorizationLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts,
          backgroundColor: 'rgba(52, 152, 219, 0.2)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/errata-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
    document.getElementById('loaderErrataPostCategorizationLine').style.display = 'none';
    const chartElement = document.getElementById('ErrataPostCategorizationLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts,
          backgroundColor: 'rgba(46, 204, 113, 0.2)', // Light green
          borderColor: '#2ecc71', // Green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/errata-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

            // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeErrataLine').style.display = 'none';
    const chartElement = document.getElementById('delayedOntimeErrataLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Errata',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgba(76, 175, 80, 0.2)', // Light green
          borderColor: '#4caf50', // Green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/errata-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

            // Hide loader and show the chart
    document.getElementById('loaderErrataSiteRecordsLine').style.display = 'none';
    const chartElement = document.getElementById('ErrataSiteRecordsLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(66, 165, 245, 0.2)', // Light blue
          borderColor: '#42a5f5', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/errata-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderPriorityLevelErrataLine').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelErrataLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts,
          backgroundColor: 'rgba(243, 156, 18, 0.2)', // Light orange
          borderColor: '#f39c12', // Orange
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/errata-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderErrataStatusRecordsLine').style.display = 'none';
        const chartElement = document.getElementById('ErrataStatusRecordsLine');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(255, 87, 34, 0.2)', // Light red
          borderColor: '#f44336', // Red
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

// Audit program for Scatter chart 
// Initialize Scatter Charts
fetch('/api/errata-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderErrataInitialCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('ErrataInitialCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(52, 152, 219, 0.6)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/errata-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderErrataPostCategorizationScatter').style.display = 'none';
        const chartElement = document.getElementById('ErrataPostCategorizationScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(46, 204, 113, 0.6)', // Light green
          borderColor: '#2ecc71', // Green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/errata-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

            // Hide loader and show the chart
            document.getElementById('loaderDelayedOntimeErrataScatter').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeErrataScatter');
        chartElement.style.display = 'block';
    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Errata',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgba(76, 175, 80, 0.6)', // Light green
          borderColor: '#4caf50', // Green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/errata-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

            // Hide loader and show the chart
            document.getElementById('loaderErrataSiteRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('ErrataSiteRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(66, 165, 245, 0.6)', // Light blue
          borderColor: '#42a5f5', // Blue
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/errata-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderPriorityLevelErrataScatter').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelErrataScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Errata',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(243, 156, 18, 0.6)', // Light orange
          borderColor: '#f39c12', // Orange
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/errata-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

            // Hide loader and show the chart
            document.getElementById('loaderErrataStatusRecordsScatter').style.display = 'none';
        const chartElement = document.getElementById('ErrataStatusRecordsScatter');
        chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(255, 87, 34, 0.6)', // Light red
          borderColor: '#f44336', // Red
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });


  }
</script>

<!-- Errat records  -->
<div id="errataTable" style="display: none; margin-top: 20px;">
  <div class="table-wrapper">
    <table id="errataTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
      <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
        <tr>
          <th>Sr No.</th>
          <th>Unique Id.</th>
          <th>Record No.</th>
          <th>Initiation Date</th>
          <th>Department</th>
          <th>Short Description</th>
          <th>Due Date</th>
          <th>Closed on</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be dynamically added here -->
      </tbody>
    </table>
  </div>
  <button onclick="toggleErrataTable()" id="animatedExitButton">
    <span class="icon">&#10006;</span>
  </button>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Function to fetch and display the Audit Program records
    function fetcherrataRecords() {
        $.ajax({
            url: '{{ route('api.records.errata') }}', // errata records route
            method: 'GET', 
            success: function(response) {
                var tableBody = $('#errataTableControl tbody');
                tableBody.empty();

                $.each(response, function(index, errata) {
                    var row = '<tr>';
                    row += '<td>' + (index + 1) + '</td>';
                    row += '<td>' + errata.id + '</td>';
                    row += '<td>' + errata.record + '</td>';
                    row += '<td>' + errata.intiation_date + '</td>';
                    row += '<td>' + errata.Department + '</td>';
                    row += '<td>' + errata.short_description + '</td>';
                    row += '<td>' + errata.due_date + '</td>';
                    row += '<td>' + errata.qa_head_approval_completed_on + '</td>';
                    row += '<td>' + errata.status + '</td>';
                    row += '</tr>';
                    tableBody.append(row);
                });
            },
            error: function(xhr, status, error) {
                console.log('Error:', error); 
            }
        });
    }

    // Function to toggle the visibility of the errata table
    function toggleErrataTable() {
        var table = document.getElementById("errataTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetcherrataRecords(); // Fetch and display the errata records
        } else {
            table.style.display = "none";
        }
    }
</script>
<!-- Errat records  -->

<!-- Errata  Graph Ends -->


<!-- Complaint Management Graph Starts -->
 <br>

 <div style="display: flex; justify-content: space-between; width: 100%; padding: 20px; background-color: #f9f9f9; border: 1px solid #000; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); height: 65px;">
    <div id="complaint-management-control" 
         style="font-size: 18px; font-weight: bold; color: #eca035; cursor: pointer; transition: color 0.3s; display: flex; align-items: center;" 
         onclick="toggleComplaintManagementGraphs()" 
         onmouseover="this.style.color='#000';" 
         onmouseout="this.style.color='#eca035';">
         <i class="fas fa-comments" style="margin-right: 8px;"></i> Complaint Management
    </div>

    <div id="complaint-management-option" 
     style="cursor: pointer; background-color: #eca035; color: #000; padding: 10px 25px; font-size: 16px; font-weight: bold; text-align: center; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); transition: transform 0.2s, background-color 0.3s;" 
     onclick="toggleComplaintManagement()" 
     onmouseover="this.style.backgroundColor='#eca035'; this.style.color='#fff'; this.style.transform='scale(1.05)';" 
     onmouseout="this.style.backgroundColor='#eca035'; this.style.color='#000'; this.style.transform='scale(1)';">
     <span style="margin-right: 8px; font-size: 20px;">📋</span> Complaint Management Table
</div>

<button id="downloadPDFBtn" 
        class="btn" 
        style="display:none; padding: 10px 25px; font-size: 16px; font-weight: bold; border-radius: 50px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); background-color: #eca035; color: #000; border: none; transition: transform 0.2s, background-color 0.3s;" 
        onclick="downloadPdf()">Generate PDF</button> 

        
<script>
  function toggleComplaintManagement() {
      // Toggle the display of the button
      const btn = document.getElementById('downloadPDFBtn');
      const isVisible = btn.style.display === 'block';
      btn.style.display = isVisible ? 'none' : 'block'; // Toggle visibility


      // If you want to perform other actions like toggling a table or different view, call your function here
      toggleComplaintManagementTable();
  }

  function toggleComplaintManagementTable() {
      // Logic to toggle the complaint management table can go here
      console.log("Complaint Management Table toggled.");
  }

  function downloadPdf() {
      // Your download PDF logic here
      console.log("Downloading PDF...");
  
  }
</script>

</div>


 <!-- Container for the Buttons (Initially Hidden) -->
<div id="cmchartButtons" style="display: none; text-align: center; margin-bottom: 20px;">
  <button id="cmbarButton" class="btn btn-primary" onclick="showcmBarChart()"><i class="fas fa-chart-bar"></i></button>
  <button id="cmpieButton" class="btn btn-primary" onclick="showcmPieChart()"><i class="fas fa-chart-pie"></i></button>
  <button id="cmlineButton" class="btn btn-primary" onclick="showcmLineChart()"><i class="fas fa-chart-line"></i></button>
  <button id="cmscatterButton" class="btn btn-primary" onclick="showcmScatterChart()"><i class="bi bi-cloud"></i></button>
</div>

<div id="ComplaintManagement" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementInitialCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementInitialCategorization" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization of Complaint Management</h4>
      <div class="spinner-container" id="loaderComplaintManagementPostCategorization" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementPostCategorization" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeComplaintManagement" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeComplaintManagement" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Site</h4>
      <div class="spinner-container" id="loaderComplaintManagementSiteRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementSiteRecords" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelComplaintManagement" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelComplaintManagement" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Status</h4>
      <div class="spinner-container" id="loaderComplaintManagementStatusRecords" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementStatusRecords" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ComplaintManagementPie" style="display: none;">
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementInitialCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementInitialCategorizationPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementPostCategorizationPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementPostCategorizationPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeComplaintManagementPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeComplaintManagementPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Site</h4>
      <div class="spinner-container" id="loaderComplaintManagementSiteRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementSiteRecordsPie" style="display: none;"></canvas>
    </div>
  </div>

  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelComplaintManagementPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelComplaintManagementPie" style="display: none;"></canvas>
    </div>

    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Status</h4>
      <div class="spinner-container" id="loaderComplaintManagementStatusRecordsPie" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementStatusRecordsPie" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ComplaintManagementLine" style="display: none;">
  <!-- Initial Categorization -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementInitialCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementInitialCategorizationLine" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementPostCategorizationLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementPostCategorizationLine" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Complaint Delay and On Time -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeComplaintManagementLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeComplaintManagementLine" style="display: none;"></canvas>
    </div>

    <!-- Complaint Management by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Site</h4>
      <div class="spinner-container" id="loaderComplaintManagementSiteRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementSiteRecordsLine" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Priority Levels -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelComplaintManagementLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelComplaintManagementLine" style="display: none;"></canvas>
    </div>

    <!-- Complaint Management by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Status</h4>
      <div class="spinner-container" id="loaderComplaintManagementStatusRecordsLine" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementStatusRecordsLine" style="display: none;"></canvas>
    </div>
  </div>
</div>

<div id="ComplaintManagementScatter" style="display: none;">
  <!-- Initial Categorization -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Initial Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementInitialCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementInitialCategorizationScatter" style="display: none;"></canvas>
    </div>

    <!-- Post Categorization -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Post Categorization</h4>
      <div class="spinner-container" id="loaderComplaintManagementPostCategorizationScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementPostCategorizationScatter" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Complaint Delay and On Time -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Delay and On Time</h4>
      <div class="spinner-container" id="loaderDelayedOntimeComplaintManagementScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="delayedOntimeComplaintManagementScatter" style="display: none;"></canvas>
    </div>

    <!-- Complaint Management by Site -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Site</h4>
      <div class="spinner-container" id="loaderComplaintManagementSiteRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementSiteRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>

  <!-- Priority Levels -->
  <div style="display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; margin-bottom: 50px;">
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Priority Levels</h4>
      <div class="spinner-container" id="loaderPriorityLevelComplaintManagementScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="priorityLevelComplaintManagementScatter" style="display: none;"></canvas>
    </div>

    <!-- Complaint Management by Status -->
    <div style="width: 45%; height: 400px; position: relative;">
      <h4 style="text-align: center;">Complaint Management by Status</h4>
      <div class="spinner-container" id="loaderComplaintManagementStatusRecordsScatter" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <canvas id="ComplaintManagementStatusRecordsScatter" style="display: none;"></canvas>
    </div>
  </div>
</div>

<script>
  let chartsComplaintManagement = false;

function toggleComplaintManagementGraphs() {
    const graphContainers = [
        document.getElementById('ComplaintManagement'),
        document.getElementById('ComplaintManagementPie'),
        document.getElementById('ComplaintManagementLine'),
        document.getElementById('ComplaintManagementScatter') // Additional graph types if needed
    ];
    const cmchartButtons = document.getElementById('cmchartButtons');

    // Check if any of the graph containers are currently displayed
    const isVisible = graphContainers.some(container => container.style.display === 'block');

    if (isVisible) {
        // Hide all the graph containers and the buttons
        graphContainers.forEach(container => container.style.display = 'none');
        cmchartButtons.style.display = 'none'; // Hide the buttons when graphs are hidden
    } else {
        // Show the first graph container and the buttons
        graphContainers[0].style.display = 'block'; // Default to ComplaintManagement
        cmchartButtons.style.display = 'block'; // Show the buttons when charts are visible

        // Initialize charts if not already initialized
        if (!chartsComplaintManagement) {
            initializeComplaintManagementCharts();
            chartsComplaintManagement = true;
        }
    }
}

  // Function to show Bar Chart
function showcmBarChart() {
  const barChartContainer = document.getElementById('ComplaintManagement');
  const pieChartContainer = document.getElementById('ComplaintManagementPie');
  const lineChartContainer = document.getElementById('ComplaintManagementLine');  
  const scatterChartContainer = document.getElementById('ComplaintManagementScatter');  // Corrected: Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'block';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('cmbarButton').classList.add('btn-active');
  document.getElementById('cmpieButton').classList.remove('btn-active');
  document.getElementById('cmlineButton').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('cmscatterButton').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Pie Chart
function showcmPieChart() {
  const barChartContainer = document.getElementById('ComplaintManagement');
  const pieChartContainer = document.getElementById('ComplaintManagementPie');
  const lineChartContainer = document.getElementById('ComplaintManagementLine');  
  const scatterChartContainer = document.getElementById('ComplaintManagementScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'block';
  lineChartContainer.style.display = 'none';  // Hide line chart
  scatterChartContainer.style.display = 'none';  // Hide Scatter chart

  // Style the active button
  document.getElementById('cmpieButton').classList.add('btn-active');
  document.getElementById('cmbarButton').classList.remove('btn-active');
  document.getElementById('cmlineButton').classList.remove('btn-active'); // Deactivate line button
  document.getElementById('cmscatterButton').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Line Chart
function showcmLineChart() {
  const barChartContainer = document.getElementById('ComplaintManagement');
  const pieChartContainer = document.getElementById('ComplaintManagementPie');
  const lineChartContainer = document.getElementById('ComplaintManagementLine');  
  const scatterChartContainer = document.getElementById('ComplaintManagementScatter');  // Add scatter chart container

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'block';  // Show line chart
  scatterChartContainer.style.display = 'none';  // Hide scatter chart

  // Style the active button
  document.getElementById('cmlineButton').classList.add('btn-active');
  document.getElementById('cmbarButton').classList.remove('btn-active');
  document.getElementById('cmpieButton').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('cmscatterButton').classList.remove('btn-active'); // Deactivate scatter button
}

// Function to show Scatter Chart
function showcmScatterChart() {
  const scatterChartContainer = document.getElementById('ComplaintManagementScatter');  
  const barChartContainer = document.getElementById('ComplaintManagement');
  const pieChartContainer = document.getElementById('ComplaintManagementPie');
  const lineChartContainer = document.getElementById('ComplaintManagementLine');  

  // Toggle visibility
  barChartContainer.style.display = 'none';
  pieChartContainer.style.display = 'none';
  lineChartContainer.style.display = 'none';
  scatterChartContainer.style.display = 'block';  // Show scatter chart

  // Style the active button
  document.getElementById('cmscatterButton').classList.add('btn-active');
  document.getElementById('cmbarButton').classList.remove('btn-active');
  document.getElementById('cmpieButton').classList.remove('btn-active'); // Deactivate pie button
  document.getElementById('cmlineButton').classList.remove('btn-active'); // Deactivate line button
}

  
  function initializeComplaintManagementCharts() {
    // Initial Categorization
    fetch('/api/complaint-management-initial-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderComplaintManagementInitialCategorization').style.display = 'none';
        const chartElement = document.getElementById('ComplaintManagementInitialCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Complaint Management',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Post Categorization
    fetch('/api/complaint-management-post-categorization')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderComplaintManagementPostCategorization').style.display = 'none';
        const chartElement = document.getElementById('ComplaintManagementPostCategorization');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Complaint Management',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderColor: ['#388e3c', '#fbc02d', '#d32f2f'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Delayed and On Time
    fetch('/api/complaint-management-ontime-delayed-records')
      .then(response => response.json())
      .then(data => {
        // Hide loader and show the chart
        document.getElementById('loaderDelayedOntimeComplaintManagement').style.display = 'none';
        const chartElement = document.getElementById('delayedOntimeComplaintManagement');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: ['On Time', 'Delayed'],
            datasets: [{
              label: 'Complaint Management',
              data: [data['On Time'], data['Delayed']],
              backgroundColor: ['#4caf50', '#f44336'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Site Records
    fetch('/api/complaint-management-sitewise-records')
      .then(response => response.json())
      .then(data => {
        const divisions = data.map(item => item.division_name);
        const counts = data.map(item => item.count);

        // Hide loader and show the chart
        document.getElementById('loaderComplaintManagementSiteRecords').style.display = 'none';
        const chartElement = document.getElementById('ComplaintManagementSiteRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: divisions,
            datasets: [{
              label: 'Records',
              data: counts,
              backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Priority Levels
    fetch('/api/complaint-management-priority-records')
      .then(response => response.json())
      .then(data => {
        const categories = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderPriorityLevelComplaintManagement').style.display = 'none';
        const chartElement = document.getElementById('priorityLevelComplaintManagement');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: categories,
            datasets: [{
              label: 'Complaint Management',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

    // Status Records
    fetch('/api/complaint-management-status-records')
      .then(response => response.json())
      .then(data => {
        const statuses = Object.keys(data);
        const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderComplaintManagementStatusRecords').style.display = 'none';
        const chartElement = document.getElementById('ComplaintManagementStatusRecords');
        chartElement.style.display = 'block';

        new Chart(chartElement, {
          type: 'bar',
          data: {
            labels: statuses,
            datasets: [{
              label: 'Complaint Management',
              data: counts,
              backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
              borderWidth: 1,
            }]
          },
          options: { responsive: true, scales: { y: { beginAtZero: true } } }
        });
      });

      // Initialize Pie Charts
  fetch('/api/complaint-management-initial-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderComplaintManagementInitialCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('ComplaintManagementInitialCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Complaint Management',
            data: counts,
            backgroundColor: ['#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6'],
            borderWidth: 2,
          }]
        },
        options: { responsive: true,
          maintainAspectRatio: false, // This will allow the chart to scale
          aspectRatio: 1,
        }
      });
    });

  fetch('/api/complaint-management-post-categorization')
    .then(response => response.json())
    .then(data => {
      const categories = Object.keys(data);
      const counts = Object.values(data);

        // Hide loader and show the chart
        document.getElementById('loaderComplaintManagementPostCategorizationPie').style.display = 'none';
        const chartElement = document.getElementById('ComplaintManagementPostCategorizationPie');
        chartElement.style.display = 'block';

      new Chart(chartElement, {
        type: 'pie',
        data: {
          labels: categories,
          datasets: [{
            label: 'Complaint Management',
            data: counts,
            backgroundColor: [
              '#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6', 
              '#1abc9c', '#34495e', '#f1c40f', '#e67e22', '#e84393'
            ],
            borderColor: '#fff',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true, position: 'top' }
          }
        }
      });
    });

  fetch('/api/complaint-management-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

    // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeComplaintManagementPie').style.display = 'none';
    const chartElement = document.getElementById('delayedOntimeComplaintManagementPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Complaint Management',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: ['#4caf50', '#f44336'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,

       }
    });
  });

  fetch('/api/complaint-management-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementSiteRecordsPie').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementSiteRecordsPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726', '#9b59b6', '#f39c12'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });

  fetch('/api/complaint-management-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPriorityLevelComplaintManagementPie').style.display = 'none';
    const chartElement = document.getElementById('priorityLevelComplaintManagementPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts,
          backgroundColor: ['#3498db', '#2ecc71', '#f39c12'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1
       }
    });
  });


  fetch('/api/complaint-management-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementStatusRecordsPie').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementStatusRecordsPie');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'pie',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: ['#42a5f5', '#66bb6a', '#ffa726'],
          borderWidth: 2,
        }]
      },
      options: { responsive: true,
        maintainAspectRatio: false, // This will allow the chart to scale
        aspectRatio: 1,
       }
    });
  });


// Initialize Line Charts
fetch('/api/complaint-management-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementInitialCategorizationLine').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementInitialCategorizationLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts,
          backgroundColor: 'rgba(52, 152, 219, 0.2)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/complaint-management-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementPostCategorizationLine').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementPostCategorizationLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts,
          backgroundColor: 'rgba(46, 204, 113, 0.2)', // Light green
          borderColor: '#2ecc71', // Green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/complaint-management-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

    // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeComplaintManagementLine').style.display = 'none';
    const chartElement = document.getElementById('delayedOntimeComplaintManagementLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Complaint Management',
          data: [data['On Time'], data['Delayed']],
          backgroundColor: 'rgba(76, 175, 80, 0.2)', // Light green
          borderColor: '#4caf50', // Green
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/complaint-management-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementSiteRecordsLine').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementSiteRecordsLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(66, 165, 245, 0.2)', // Light blue
          borderColor: '#42a5f5', // Blue
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

fetch('/api/complaint-management-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPriorityLevelComplaintManagementLine').style.display = 'none';
    const chartElement = document.getElementById('priorityLevelComplaintManagementLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts,
          backgroundColor: 'rgba(243, 156, 18, 0.2)', // Light orange
          borderColor: '#f39c12', // Orange
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        }
      }
    });
  });

fetch('/api/complaint-management-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementStatusRecordsLine').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementStatusRecordsLine');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'line',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts,
          backgroundColor: 'rgba(255, 87, 34, 0.2)', // Light red
          borderColor: '#f44336', // Red
          borderWidth: 2,
          fill: true, // Fills the area under the line
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
      }
    });
  });

 
// Initialize Scatter Charts
fetch('/api/complaint-management-initial-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementInitialCategorizationScatter').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementInitialCategorizationScatter');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(52, 152, 219, 0.6)', // Light blue
          borderColor: '#3498db', // Blue
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/complaint-management-post-categorization')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementPostCategorizationScatter').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementPostCategorizationScatter');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(46, 204, 113, 0.6)', // Light green
          borderColor: '#2ecc71', // Green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/complaint-management-ontime-delayed-records')
  .then(response => response.json())
  .then(data => {

    // Hide loader and show the chart
    document.getElementById('loaderDelayedOntimeComplaintManagementScatter').style.display = 'none';
    const chartElement = document.getElementById('delayedOntimeComplaintManagementScatter');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: ['On Time', 'Delayed'],
        datasets: [{
          label: 'Complaint Management',
          data: [
            { x: 0, y: data['On Time'] },  // Scatter chart data format (x, y)
            { x: 1, y: data['Delayed'] }
          ],
          backgroundColor: 'rgba(76, 175, 80, 0.6)', // Light green
          borderColor: '#4caf50', // Green
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'On Time vs Delayed'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/complaint-management-sitewise-records')
  .then(response => response.json())
  .then(data => {
    const divisions = data.map(item => item.division_name);
    const counts = data.map(item => item.count);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementSiteRecordsScatter').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementSiteRecordsScatter');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: divisions,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(66, 165, 245, 0.6)', // Light blue
          borderColor: '#42a5f5', // Blue
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Divisions'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/complaint-management-priority-records')
  .then(response => response.json())
  .then(data => {
    const categories = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderPriorityLevelComplaintManagementScatter').style.display = 'none';
    const chartElement = document.getElementById('priorityLevelComplaintManagementScatter');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: categories,
        datasets: [{
          label: 'Complaint Management',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(243, 156, 18, 0.6)', // Light orange
          borderColor: '#f39c12', // Orange
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: { display: true, position: 'top' }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Categories'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

fetch('/api/complaint-management-status-records')
  .then(response => response.json())
  .then(data => {
    const statuses = Object.keys(data);
    const counts = Object.values(data);

    // Hide loader and show the chart
    document.getElementById('loaderComplaintManagementStatusRecordsScatter').style.display = 'none';
    const chartElement = document.getElementById('ComplaintManagementStatusRecordsScatter');
    chartElement.style.display = 'block';

    new Chart(chartElement, {
      type: 'scatter',
      data: {
        labels: statuses,
        datasets: [{
          label: 'Records',
          data: counts.map((count, index) => ({ x: index, y: count })),  // Scatter chart data format (x, y)
          backgroundColor: 'rgba(255, 87, 34, 0.6)', // Light red
          borderColor: '#f44336', // Red
          borderWidth: 2,
          pointRadius: 5,  // Size of the points
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1,
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Statuses'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Counts'
            }
          }
        }
      }
    });
  });

  }
</script>


<!-- Complaint Management Records -->
<div id="ComplaintManagementTable" style="display: none; margin-top: 20px;">
    <div class="table-wrapper">
        <table id="ComplaintManagementTableControl" border="1" style="width: 100%; border-collapse: collapse; text-align: left;">
            <thead style="background: linear-gradient(to right, #eca035, #eca035); color: white;">
                <tr>
                    <th>Sr No.</th>
                    <th>Unique Id.</th>
                    <th>Record No.</th>
                    <th>Initiation Date</th>
                    <th>Department</th>
                    <th>Categorization of Complaint</th>
                    <th>Short Description</th>
                    <th>Due Date</th>
                    <th>Closed on</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be dynamically added here -->
            </tbody>
        </table>
    </div>
    <button onclick="toggleComplaintManagementTable()" id="animatedExitButton">
        <span class="icon">&#10006;</span>
    </button>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Function to fetch and display the Complaint Management records
   // Function to fetch and display the Complaint Management records
function fetchComplaintManagementRecords() {
    $.ajax({
        url: '{{ route('api.records.ComplaintManagement') }}', // ComplaintManagement records route
        method: 'GET',
        success: function(response) {
            var tableBody = $('#ComplaintManagementTableControl tbody');
            tableBody.empty();

            $.each(response, function(index, ComplaintManagement) {
                var row = '<tr>';
                row += '<td>' + (index + 1) + '</td>';
                row += '<td>' + ComplaintManagement.id + '</td>';
                row += '<td>' + ComplaintManagement.record + '</td>';
                row += '<td>' + ComplaintManagement.intiation_date + '</td>';
                row += '<td>' + ComplaintManagement.initiator_group + '</td>';
                row += '<td>' + ComplaintManagement.categorization_of_complaint_gi + '</td>';
                row += '<td>' + ComplaintManagement.description_gi + '</td>';
                row += '<td>' + ComplaintManagement.due_date_gi + '</td>';
                row += '<td>' + ComplaintManagement.closed_done_on + '</td>';
                row += '<td>' + ComplaintManagement.status + '</td>';
                row += '</tr>';
                tableBody.append(row);
            });
            $('#downloadPDFBtn').show();  // Show the download button when records are fetched
        },
        error: function(xhr, status, error) {
            console.log('Error:', error);
        }
    });
}


    // Function to toggle the visibility of the Complaint Management table
    function toggleComplaintManagementTable() {
        var table = document.getElementById("ComplaintManagementTable");
        if (table.style.display === "none") {
            table.style.display = "block";
            fetchComplaintManagementRecords(); // Fetch and display the Complaint Management records
        } else {
            table.style.display = "none";
        }
    }

    // Function to download the PDF when the button is clicked
    function downloadPdf() {
        window.location.href = '/api/generate-pdf'; // This will trigger the PDF generation and download
    }
</script>

<!-- Complaint Management  Graph Ends -->






<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js"
  integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>

// Processes Charts start 
  function renderProcessChart(series, labels) {
    var options = {
      series,
      chart: {
        width: 450,
        type: 'pie',
      },
      labels,
      responsive: [{
        breakpoint: 480,
        options: {
          chart: {
            width: 200
          },
          legend: {
            position: 'bottom'
          }
        }
      }]
    };

    var processChart = new ApexCharts(document.querySelector("#processChart"), options);
    processChart.render();
  }

  async function prepareProcessChart() {
    $('#processChart > .spinner-border').show();

    try {
      const url = "{{ route('api.process.chart') }}"
      const res = await axios.get(url);




      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let series = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].classname)
          series.push(bodyData[key].count)
        }

        renderProcessChart(series, labels)
      }

    } catch (err) {
      console.log('Error in process chart', err.message);
    }

    $('#processChart > .spinner-border').hide();
  }
  // Processes Charts End

  // Document by status Charts Starts
  function renderDocumentCategoryChart(series, labels, chartType) {
  let options;

  // Check chart type and set options accordingly
  if (chartType === 'bar') {
    options = {
      series: [{
        name: 'Documents',
        data: series
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          distributed: true,
          borderRadius: 4,
          borderRadiusApplication: 'end',
          horizontal: true,
        }
      },
      dataLabels: {
        enabled: false
      },
      xaxis: {
        categories: labels,
      }
    };
  } else if (chartType === 'pie') {
    options = {
      series: series,
      chart: {
        width: 450,
        type: 'pie',
      },
      labels,
      responsive: [{
        breakpoint: 480,
        options: {
          chart: { width: 200 },
          legend: { position: 'bottom' }
        }
      }]
    };
  } else if (chartType === 'line') {
    options = {
      series: [{
        name: 'Documents',
        data: series
      }],
      chart: {
        type: 'line',
        height: 350
      },
      stroke: { width: 4 },
      xaxis: { categories: labels },
      yaxis: { title: { text: '# (documents)' } },
      tooltip: { y: { formatter: val => val + " documents" } }
    };
  } else if (chartType === 'scatter') {
    options = {
      series: [{
        name: 'Documents',
        data: series
      }],
      chart: {
        type: 'scatter',
        height: 350
      },
      xaxis: {
        categories: labels
      },
      yaxis: {
        title: { text: '# (documents)' }
      },
      tooltip: { y: { formatter: val => val + " documents" } }
    };
  }

  // Render the chart based on the selected tab
  const chartElement = document.querySelector(`#documentCategoryChart${chartType.charAt(0).toUpperCase() + chartType.slice(1)}`);
  const chart = new ApexCharts(chartElement, options);
  chart.render();
}

async function prepareDocumentCategoryChart() {
  $('#documentCategoryChartBar > .spinner-border').show();

  try {
    const url = "{{ route('api.document_by_status.chart') }}";
    const res = await axios.get(url);

    if (res.data.status == 'ok') {
      let bodyData = res.data.body;
      let series = [];
      let labels = [];

      for (const key in bodyData) {
        labels.push(key);
        series.push(bodyData[key]);
      }

      // Render all chart types
      renderDocumentCategoryChart(series, labels, 'bar');
      renderDocumentCategoryChart(series, labels, 'pie');
      renderDocumentCategoryChart(series, labels, 'line');
      renderDocumentCategoryChart(series, labels, 'scatter');
    }
  } catch (err) {
    console.log('Error in process chart', err.message);
  }

  $('#documentCategoryChartBar > .spinner-border').hide();
}

  // Document by status Charts End

  // Classification of deviation start
  function renderClassificationDeviationChart(minorData, majorData, criticalData, months) {
    var options = {
      series: [
        {
          name: 'Minor',
          data: minorData
        },
        {
          name: 'Major',
          data: majorData
        },
        {
          name: 'Critical',
          data: criticalData
        }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Deviations'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB', '#FFBD00', '#FF2C00']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations"
          }
        }
      }
    };

    var deviationClassificationChart = new ApexCharts(document.querySelector("#deviationClassificationChart"), options);
    deviationClassificationChart.render();
  }

  async function prepareClassificationDeviationChart() {
    $('#deviationClassificationChart > .spinner-border').show();

    try {
      const url = "{{ route('api.deviation.chart') }}"
      const res = await axios.get(url);




      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let minor = []
        let major = []
        let critical = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          minor.push(bodyData[key].minor)
          major.push(bodyData[key].major)
          critical.push(bodyData[key].critical)
        }

        renderClassificationDeviationChart(minor, major, critical, labels)
      }

    } catch (err) {
      console.log('Error in deviation chart', err.message);
    }

    $('#deviationClassificationChart > .spinner-border').hide();
  }
  // Classification of deviation end

  // Departments wise deviation start
  function renderDeviationDepartmentChart(seriesData, labels) {
    var options = {
      series: seriesData,
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          distributed: true,
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: labels,
      },
      yaxis: {
        title: {
          text: '# of Deviations'
        }
      },
      fill: {
        opacity: 1
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations"
          }
        }
      }
    };

    var deviationDepartmentChart = new ApexCharts(document.querySelector("#deviationDepartmentChart"), options);
    deviationDepartmentChart.render();
  }

  async function prepareDeviationDepartmentChart() {
    $('#deviationDepartmentChart > .spinner-border').show();

    try {
      const url = "{{ route('api.deviation_departments.chart') }}"
      const res = await axios.get(url);




      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let labels = []
        let seriesData = []

        for (const key in bodyData) {
          labels.push(key)
          seriesData[bodyData[key]['January']]
        }

        renderDeviationDepartmentChart(seriesData, labels)
      }

    } catch (err) {
      console.log('Error in deviation department chart', err.message);
    }

    $('#deviationDepartmentChart > .spinner-border').hide();
  }
  // Departments wise deviation end

  // Originator Distribution start
  function renderDocumentOriginatorChart(seriesData, labels, chartType) {
  let options;

  // Check chart type and set options accordingly
  if (chartType === 'bar') {
    options = {
      series: [{
        name: 'Documents',
        data: seriesData
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          distributed: true,
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        }
      },
      xaxis: {
        categories: labels,
      },
      yaxis: {
        title: { text: '# (documents)' }
      },
      tooltip: {
        y: { formatter: val => val + " documents" }
      }
    };
  } else if (chartType === 'pie') {
    options = {
      series: seriesData,
      chart: {
        type: 'pie',
        width: 450
      },
      labels: labels,
      responsive: [{
        breakpoint: 480,
        options: {
          chart: { width: 200 },
          legend: { position: 'bottom' }
        }
      }]
    };
  } else if (chartType === 'line') {
    options = {
      series: [{
        name: 'Documents',
        data: seriesData
      }],
      chart: {
        type: 'line',
        height: 350
      },
      stroke: { width: 4 },
      xaxis: { categories: labels },
      yaxis: { title: { text: '# (documents)' } },
      tooltip: { y: { formatter: val => val + " documents" } }
    };
  } else if (chartType === 'scatter') {
    options = {
      series: [{
        name: 'Documents',
        data: seriesData
      }],
      chart: {
        type: 'scatter',
        height: 350
      },
      xaxis: {
        categories: labels
      },
      yaxis: {
        title: { text: '# (documents)' }
      },
      tooltip: { y: { formatter: val => val + " documents" } }
    };
  }

  // Render the chart based on the selected tab
  const chartElement = document.querySelector(`#documentOriginatorDistribution${chartType.charAt(0).toUpperCase() + chartType.slice(1)}`);
  const chart = new ApexCharts(chartElement, options);
  chart.render();
}

async function prepareDocumentOriginatorChart() {
  // Show the spinner while loading the charts
  $('#documentOriginatorDistributionBar > .spinner-border').show();

  try {
    const url = "{{ route('api.document.originator.chart') }}";
    const res = await axios.get(url);

    if (res.data.status === 'ok') {
      let bodyData = res.data.body;
      let labels = [];
      let seriesData = [];

      // Prepare the labels and seriesData from the response
      for (const key in bodyData) {
        labels.push(bodyData[key]['originator_name']);
        seriesData.push(bodyData[key]['document_count']);
      }

      // Render all chart types
      renderDocumentOriginatorChart(seriesData, labels, 'bar');
      renderDocumentOriginatorChart(seriesData, labels, 'pie');
      renderDocumentOriginatorChart(seriesData, labels, 'line');
      renderDocumentOriginatorChart(seriesData, labels, 'scatter');
    }
  } catch (err) {
    console.log('Error in document originator', err.message);
  }

  // Hide the spinner after charts are rendered
  $('#documentOriginatorDistributionBar > .spinner-border').hide();
}

  // Originator distribution end

  // Type Distribution start
  function renderDocumentTypeChart(seriesData, labels) {
  // Bar Chart Options
  const barOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'bar', height: 350 },
    plotOptions: { bar: { columnWidth: '55%', endingShape: 'rounded' } },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    tooltip: { y: { formatter: val => `${val} documents` } }
  };

  // Pie Chart Options
  const pieOptions = {
    series: seriesData,
    chart: { type: 'pie', width: 450 },
    labels,
    responsive: [{ breakpoint: 480, options: { chart: { width: 200 }, legend: { position: 'bottom' } } }]
  };

  // Line Chart Options
  const lineOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'line', height: 350 },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    tooltip: { y: { formatter: val => `${val} documents` } }
  };

  // Scatter Chart Options
  const scatterOptions = {
    series: [{ name: 'Documents', data: seriesData.map((val, idx) => ({ x: labels[idx], y: val })) }],
    chart: { type: 'scatter', height: 350 },
    xaxis: { categories: labels, title: { text: 'Document Types' } },
    yaxis: { title: { text: '# (documents)' } },
    tooltip: { y: { formatter: val => `${val} documents` } }
  };

  // Render Charts
  new ApexCharts(document.querySelector("#documentTypeBar"), barOptions).render();
  new ApexCharts(document.querySelector("#documentTypePie"), pieOptions).render();
  new ApexCharts(document.querySelector("#documentTypeLine"), lineOptions).render();
  new ApexCharts(document.querySelector("#documentTypeScatter"), scatterOptions).render();
}

async function prepareDocumentTypeChart() {
  $('#documentTypeBar > .spinner-border').show();

  try {
    const url = "{{ route('api.document.type.chart') }}";
    const res = await axios.get(url);

    if (res.data.status === 'ok') {
      const bodyData = res.data.body;
      const labels = bodyData.map(item => item.document_type_name);
      const seriesData = bodyData.map(item => item.document_count);

      renderDocumentTypeChart(seriesData, labels);
    }
  } catch (err) {
    console.log('Error fetching document type data:', err.message);
  }

  $('#documentTypeBar > .spinner-border').hide();
}

  // Type distribution end

  // Review six month start
  function renderDocumentSixChart(seriesData, labels) {
    const barOptions = {
        series: [{ name: 'Documents', data: seriesData }],
        chart: { type: 'bar', height: 350 },
        xaxis: { categories: labels },
        yaxis: { title: { text: '# (documents)' } },
        plotOptions: { bar: { columnWidth: '55%' } },
        tooltip: { y: { formatter: val => `${val} documents` } }
    };

    const pieOptions = {
        series: seriesData,
        chart: { type: 'pie', height: 350 },
        labels,
        responsive: [{ breakpoint: 480, options: { chart: { width: 200 }, legend: { position: 'bottom' } } }]
    };

    const lineOptions = {
        series: [{ name: 'Documents', data: seriesData }],
        chart: { type: 'line', height: 350 },
        xaxis: { categories: labels },
        tooltip: { y: { formatter: val => `${val} documents` } }
    };

    const scatterOptions = {
        series: [{ name: 'Documents', data: seriesData.map((val, index) => ({ x: labels[index], y: val })) }],
        chart: { type: 'scatter', height: 350 },
        xaxis: { type: 'category', categories: labels },
        tooltip: { y: { formatter: val => `${val} documents` } }
    };

    // Render Charts
    new ApexCharts(document.querySelector("#documentReviewSixBar"), barOptions).render();
    new ApexCharts(document.querySelector("#documentReviewSixPie"), pieOptions).render();
    new ApexCharts(document.querySelector("#documentReviewSixLine"), lineOptions).render();
    new ApexCharts(document.querySelector("#documentReviewSixScatter"), scatterOptions).render();
}

async function prepareDocumentSixChart() {
    $('#documentReviewSixBar > .spinner-border').show();

    try {
        const url = "{{ route('api.document.review.chart', 6) }}";
        const res = await axios.get(url);

        if (res.data.status === 'ok') {
            const labels = [];
            const seriesData = [];
            res.data.body.forEach(data => {
                labels.push(data.next_review_date);
                seriesData.push(1); // Assuming count is 1 for each date
            });

            renderDocumentSixChart(seriesData, labels);
        }
    } catch (err) {
        console.error('Error in document review chart:', err.message);
    } finally {
        $('#documentReviewSixBar > .spinner-border').hide();
    }
}
  // Review six month end

  // Review one year start
  function renderDocumentOneChart(seriesData, labels) {
    const barOptions = {
      series: [
        {
          name: 'Documents',
          data: seriesData,
        },
      ],
      chart: {
        type: 'bar',
        height: 350,
      },
      xaxis: { categories: labels },
      yaxis: { title: { text: '# (documents)' } },
      tooltip: { y: { formatter: (val) => `${val} documents` } },
    };

    const pieOptions = {
      series: seriesData,
      chart: {
        type: 'pie',
        height: 350,
      },
      labels: labels,
    };

    const lineOptions = {
      series: [
        {
          name: 'Documents',
          data: seriesData,
        },
      ],
      chart: {
        type: 'line',
        height: 350,
      },
      xaxis: { categories: labels },
      tooltip: { y: { formatter: (val) => `${val} documents` } },
    };

    const scatterOptions = {
      series: [
        {
          name: 'Documents',
          data: seriesData.map((val, index) => ({ x: labels[index], y: val })),
        },
      ],
      chart: {
        type: 'scatter',
        height: 350,
      },
      xaxis: { type: 'category', categories: labels },
      tooltip: { y: { formatter: (val) => `${val} documents` } },
    };

    new ApexCharts(document.querySelector("#documentReviewOneBar"), barOptions).render();
    new ApexCharts(document.querySelector("#documentReviewOnePie"), pieOptions).render();
    new ApexCharts(document.querySelector("#documentReviewOneLine"), lineOptions).render();
    new ApexCharts(document.querySelector("#documentReviewOneScatter"), scatterOptions).render();
  }

  async function prepareDocumentOneChart() {
    $('.documentReviewOneBar > .spinner-border').show();

    try {
      const url = "{{ route('api.document.review.chart', 12) }}";
      const res = await axios.get(url);

      if (res.data.status === 'ok') {
        const labels = [];
        const seriesData = [];

        res.data.body.forEach((data) => {
          seriesData.push(1);
          labels.push(data.next_review_date);
        });

        renderDocumentOneChart(seriesData, labels);
      }
    } catch (err) {
      console.error('Error in document one', err.message);
    } finally {
      $('#documentReviewOneBar > .spinner-border').hide();
    }
  }
  

  // Review one year end

  // Review two year start
  function renderDocumentTwoCharts(seriesData, labels) {
  const barOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'bar', height: 350 },
    plotOptions: { bar: { distributed: true, horizontal: false, columnWidth: '55%' } },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    tooltip: { y: { formatter: (val) => `${val} documents to be reviewed by this date` } },
  };

  const pieOptions = {
    series: seriesData,
    chart: { width: 450, type: 'pie' },
    labels,
    responsive: [{ breakpoint: 480, options: { chart: { width: 200 }, legend: { position: 'bottom' } } }],
  };

  const lineOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'line', height: 350 },
    xaxis: { categories: labels },
    stroke: { curve: 'smooth' },
    tooltip: { y: { formatter: (val) => `${val} documents to be reviewed by this date` } },
  };

  const scatterOptions = {
    series: [{ name: 'Documents', data: seriesData.map((val, idx) => [idx, val]) }],
    chart: { type: 'scatter', height: 350 },
    xaxis: { categories: labels },
    tooltip: { y: { formatter: (val) => `${val} documents to be reviewed by this date` } },
  };

  new ApexCharts(document.querySelector("#documentReviewTwoBar"), barOptions).render();
  new ApexCharts(document.querySelector("#documentReviewTwoPie"), pieOptions).render();
  new ApexCharts(document.querySelector("#documentReviewTwoLine"), lineOptions).render();
  new ApexCharts(document.querySelector("#documentReviewTwoScatter"), scatterOptions).render();
}

async function prepareDocumentTwoCharts() {
  // Show the spinner while loading data
  $('#documentReviewTwoBar > .spinner-border').show();

  try {
    const url = "{{ route('api.document.review.chart', 24) }}";
    const res = await axios.get(url);

    if (res.data.status === 'ok') {
      const bodyData = res.data.body;
      const labels = bodyData.map(data => data.next_review_date);
      const seriesData = bodyData.map(() => 1);  // Assuming each item has 1 document for the review

      // Now, render the charts
      renderDocumentTwoCharts(seriesData, labels);
    } else {
      console.error("Failed to fetch chart data.");
    }
  } catch (err) {
    console.log('Error loading charts:', err.message);
  }

  // Hide the spinner after data is loaded
  $('#documentReviewTwoBar > .spinner-border').hide();
}

// Call the function to prepare the charts when the page is ready
$(document).ready(function () {
  prepareDocumentTwoCharts();
});

  // Review two year end

  // Pending Review Analysis start
  function renderPendingReviewerCharts(seriesData, labels) {
  const barOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'bar', height: 350 },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    plotOptions: { bar: { columnWidth: '55%', distributed: true } },
    tooltip: { y: { formatter: val => `${val} documents to be reviewed` } },
  };

  const pieOptions = {
    series: seriesData,
    chart: { type: 'pie', width: 450 },
    labels: labels,
    responsive: [{
      breakpoint: 480,
      options: { chart: { width: 200 }, legend: { position: 'bottom' } },
    }],
  };

  const lineOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'line', height: 350 },
    xaxis: { categories: labels },
    tooltip: { y: { formatter: val => `${val} documents to be reviewed` } },
  };

  const scatterOptions = {
    series: [{ name: 'Documents', data: seriesData.map((val, i) => [i, val]) }],
    chart: { type: 'scatter', height: 350 },
    xaxis: { categories: labels },
    tooltip: { y: { formatter: val => `${val} documents to be reviewed` } },
  };

  // Initialize ApexCharts for each chart type
  const pendingReviewBar = new ApexCharts(document.querySelector("#pendingReviewAnalysis"), barOptions);
  const pendingReviewPie = new ApexCharts(document.querySelector("#pendingReviewAnalysisPie"), pieOptions);
  const pendingReviewLine = new ApexCharts(document.querySelector("#pendingReviewAnalysisLine"), lineOptions);
  const pendingReviewScatter = new ApexCharts(document.querySelector("#pendingReviewAnalysisScatter"), scatterOptions);

  pendingReviewBar.render();
  pendingReviewPie.render();
  pendingReviewLine.render();
  pendingReviewScatter.render();
}

async function preparePendingReviewerCharts() {
  $('#pendingReviewAnalysis> .spinner-border').show();
  try {
    const url = "{{ route('api.document.pending.reviewers.chart') }}";
    const res = await axios.get(url);

    // Check if data is successfully received
    if (res.data.status === 'ok') {
      const bodyData = res.data.body;
      const labels = Object.keys(bodyData);
      const seriesData = Object.values(bodyData);

      // Log data to check if it's formatted correctly
      console.log(labels, seriesData);

      renderPendingReviewerCharts(seriesData, labels);
    } else {
      console.error("Error: No data found");
    }
  } catch (err) {
    console.error("Error fetching chart data", err);
  }
    // Hide the spinner after charts are rendered
    $('#pendingReviewAnalysis > .spinner-border').hide();
}

// Ensure spinner is hidden after chart is rendered
document.addEventListener('DOMContentLoaded', () => {
  preparePendingReviewerCharts();
});
  // Pending Review Analysis end

  // Pending Approval Analysis start
  function renderPendingApproverCharts(seriesData, labels) {
  const barOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'bar', height: 350 },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    tooltip: { y: { formatter: val => `${val} documents to be approved` } },
    plotOptions: { bar: { columnWidth: '55%', distributed: true } },
  };

  const pieOptions = {
    series: seriesData,
    chart: { type: 'pie', width: 450 },
    labels: labels,
    responsive: [{
      breakpoint: 480,
      options: { chart: { width: 200 }, legend: { position: 'bottom' } },
    }],
  };

  const lineOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'line', height: 350 },
    xaxis: { categories: labels },
    tooltip: { y: { formatter: val => `${val} documents to be approved` } },
  };

  const scatterOptions = {
    series: [{ name: 'Documents', data: seriesData.map((val, i) => [i, val]) }],
    chart: { type: 'scatter', height: 350 },
    xaxis: { categories: labels },
    tooltip: { y: { formatter: val => `${val} documents to be approved` } },
  };

  // Render charts after data is fetched and spinner is hidden
  const pendingApproveBar = new ApexCharts(document.querySelector("#pendingApproveAnalysis"), barOptions);
  const pendingApprovePie = new ApexCharts(document.querySelector("#pendingApproveAnalysisPie"), pieOptions);
  const pendingApproveLine = new ApexCharts(document.querySelector("#pendingApproveAnalysisLine"), lineOptions);
  const pendingApproveScatter = new ApexCharts(document.querySelector("#pendingApproveAnalysisScatter"), scatterOptions);

  // Render the charts
  pendingApproveBar.render();
  pendingApprovePie.render();
  pendingApproveLine.render();
  pendingApproveScatter.render();
}

async function preparePendingApproverCharts() {
  // Show the spinner while loading data
  $('#pendingApproveAnalysis > .spinner-border').show();

  try {
    // Replace this with your actual API endpoint
    const url = "{{ route('api.document.pending.approvers.chart') }}";
    const res = await axios.get(url);

    if (res.data.status === 'ok') {
      const bodyData = res.data.body;
      const labels = Object.keys(bodyData);
      const seriesData = Object.values(bodyData);

      // Call the function to render charts
      renderPendingApproverCharts(seriesData, labels);
    }
  } catch (err) {
    console.error("Error fetching chart data", err);
  }

  // Hide the spinner after charts are rendered
  $('#pendingApproveAnalysis > .spinner-border').hide();
}

$(document).ready(function() {
  // Initialize the chart data
  preparePendingApproverCharts();
});

  // Pending Approval Analysis end


  // Function to render the charts
function renderPendingHODChart(seriesData, labels) {
  // Bar Chart Options
  const barOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'bar', height: 350 },
    plotOptions: { bar: { distributed: true, horizontal: false, columnWidth: '55%', endingShape: 'rounded' } },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    fill: { opacity: 1 },
    tooltip: { y: { formatter: val => `${val} documents pending HOD review` } }
  };

  // Pie Chart Options
  const pieOptions = {
    series: seriesData,
    chart: { width: 450, type: 'pie' },
    labels,
    responsive: [{ breakpoint: 480, options: { chart: { width: 200 }, legend: { position: 'bottom' } } }]
  };

  // Line Chart Options
  const lineOptions = {
    series: [{ name: 'Documents', data: seriesData }],
    chart: { type: 'line', height: 350 },
    xaxis: { categories: labels },
    stroke: { curve: 'smooth', width: 2 },
    tooltip: { y: { formatter: val => `${val} documents pending HOD review` } }
  };

  // Scatter Chart Options
  const scatterOptions = {
    series: [{ name: 'Documents', data: seriesData.map((val, index) => [index, val]) }],
    chart: { type: 'scatter', height: 350 },
    xaxis: { categories: labels },
    yaxis: { title: { text: '# (documents)' } },
    tooltip: { y: { formatter: val => `${val} documents pending HOD review` } }
  };

  // Render Charts
  new ApexCharts(document.querySelector("#pendingHODAnalysis"), barOptions).render();
  new ApexCharts(document.querySelector("#pendingHODAnalysisPie"), pieOptions).render();
  new ApexCharts(document.querySelector("#pendingHODAnalysisLine"), lineOptions).render();
  new ApexCharts(document.querySelector("#pendingHODAnalysisScatter"), scatterOptions).render();
}

// Function to prepare and fetch data for charts
async function preparePendingHODChart() {
  // Show loader while data is being fetched
  $('#pendingHODAnalysis > .spinner-border').show();
  
  try {
    // Fetch data from the API
    const url = "{{ route('api.document.pending.hod.chart') }}";
    const res = await axios.get(url);

    if (res.data.status === 'ok') {
      const bodyData = res.data.body;
      console.log(bodyData); // Check data format

      const labels = Object.keys(bodyData); // Extract labels (keys)
      const seriesData = Object.values(bodyData); // Extract series data (values)

      // Render the charts with the fetched data
      renderPendingHODChart(seriesData, labels);
    } else {
      console.error("Error: API did not return valid data.");
    }
  } catch (err) {
    // Log errors if any
    console.error('Error in fetching document data:', err.message);
  }

  // Hide loader after rendering charts
  $('#pendingHODAnalysis > .spinner-border').hide();
}

// Initialize chart loading
preparePendingHODChart();

  // Pending Training Analysis start
  function renderPendingTrainingChart(seriesData, labels) {
  const barOptions = {
    series: [
      {
        name: 'Documents',
        data: seriesData,
      },
    ],
    chart: {
      type: 'bar',
      height: 350,
    },
    plotOptions: {
      bar: {
        distributed: true,
        horizontal: false,
        columnWidth: '55%',
        endingShape: 'rounded',
      },
    },
    xaxis: {
      categories: labels,
    },
    tooltip: {
      y: {
        formatter: (val) => `${val} documents pending review`,
      },
    },
  };

  const pieOptions = {
    series: seriesData,
    chart: {
      width: 450,
      type: 'pie',
    },
    labels: labels,
    responsive: [
      {
        breakpoint: 480,
        options: {
          chart: { width: 200 },
          legend: { position: 'bottom' },
        },
      },
    ],
  };

  const lineOptions = {
    series: [
      {
        name: 'Documents',
        data: seriesData,
      },
    ],
    chart: {
      type: 'line',
      height: 350,
    },
    xaxis: {
      categories: labels,
    },
    stroke: {
      curve: 'smooth',
    },
  };

  const scatterOptions = {
    series: [
      {
        name: 'Documents',
        data: seriesData.map((value, index) => [index, value]),
      },
    ],
    chart: {
      type: 'scatter',
      height: 350,
    },
    xaxis: {
      categories: labels,
    },
  };

  // Create charts
  new ApexCharts(document.querySelector("#pendingTrainingAnalysis"), barOptions).render();
  new ApexCharts(document.querySelector("#pendingTrainingAnalysisPie"), pieOptions).render();
  new ApexCharts(document.querySelector("#pendingTrainingAnalysisLine"), lineOptions).render();
  new ApexCharts(document.querySelector("#pendingTrainingAnalysisScatter"), scatterOptions).render();
}

async function preparePendingTrainingChart() {
  // Show spinner before fetching data
  $('#pendingTrainingAnalysis > .spinner-border').show();
  
  try {
    const url = "{{ route('api.document.pending.training.chart') }}"; // Ensure this URL is correct
    const res = await axios.get(url);

    if (res.data.status === 'ok') {
      const bodyData = res.data.body;
      console.log(bodyData); // Debugging data format

      const labels = Object.keys(bodyData); // Get the keys as labels
      const seriesData = Object.values(bodyData); // Get the values as data

      // Render charts
      renderPendingTrainingChart(seriesData, labels);
    } else {
      console.error('API Response Error: Status not ok');
    }
  } catch (err) {
    console.error('Error fetching data:', err.message);
  }

  // Hide spinner after rendering charts
  $('#pendingTrainingAnalysis > .spinner-border').hide();
}

// Call function to prepare charts after DOM content is fully loaded
document.addEventListener("DOMContentLoaded", () => {
  preparePendingTrainingChart();
});

  // Pending Training Analysis end

  // Severity Level start
  function renderSeverityChart(negligibleData, moderateData, majorData, fatalData, months) {
    var options = {
      series: [{
        name: 'Negligible',
        data: negligibleData
      },
      {
        name: 'Moderate',
        data: moderateData
      },
      {
        name: 'Major',
        data: majorData
      },
      {
        name: 'Fatal',
        data: fatalData
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Deviations'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB', '#00E396', '#FFBD00', '#FF2C00']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations"
          }
        }
      }
    };

    var deviationSeverityChart = new ApexCharts(document.querySelector("#deviationSeverityChart"), options);
    deviationSeverityChart.render();
  }

  async function prepareSeverityDeviationChart() {
    $('#deviationSeverityChart > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_severity.chart') }}"
      const res = await axios.get(url);

      console.log('res', res.data)


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let negligible = []
        let moderate = []
        let major = []
        let fatal = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          negligible.push(bodyData[key].negligible)
          moderate.push(bodyData[key].moderate)
          major.push(bodyData[key].major)
          fatal.push(bodyData[key].fatal)
        }

        renderSeverityChart(negligible, moderate, major, fatal, labels)
      }

    } catch (err) {
      console.log('Error in deviation chart', err.message);
    }

    $('#deviationSeverityChart > .spinner-border').hide();
  }
  // Severity Level deviation end

  // Priority Level start
  function renderPriorityLevelChart(lowData, mediumData, highData, months) {
    var options = {
      series: [{
        name: 'Low',
        data: lowData
      },
      {
        name: 'Medium',
        data: mediumData
      },
      {
        name: 'High',
        data: highData
      },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Risk Management'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " risk_managements"
          }
        }
      }
    };

    var priorityLevelChart = new ApexCharts(document.querySelector("#priorityLevelChart"), options);
    priorityLevelChart.render();
  }

  async function preparePriorityLevelChart() {
    $('#priorityLevelChart > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_priority.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let low = []
        let medium = []
        let high = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          low.push(bodyData[key].low)
          medium.push(bodyData[key].medium)
          high.push(bodyData[key].high)
        }

        renderPriorityLevelChart(low, medium, high, labels)
      }

    } catch (err) {
      console.log('Error in Risk Managment chart', err.message);
    }

    $('#priorityLevelChart > .spinner-border').hide();
  }
  // Priority Level deviation end



  // Priority Level Deviation start
  function renderDeviationPriorityLevelChart(lowData, mediumData, highData, months) {
    var options = {
      series: [{
        name: 'Low',
        data: lowData
      },
      {
        name: 'Medium',
        data: mediumData
      },
      {
        name: 'High',
        data: highData
      },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Deviation'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#FFBD00', '#FFBD00', '#FFBD00']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations"
          }
        }
      }
    };

    var priorityLevelChart = new ApexCharts(document.querySelector("#priorityLevelChartDeviation"), options);
    priorityLevelChart.render();
  }

  async function prepareDeviationPriorityLevelChart() {
    $('#priorityLevelChartDeviation > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_priority_deviation.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let low = []
        let medium = []
        let high = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          low.push(bodyData[key].low)
          medium.push(bodyData[key].medium)
          high.push(bodyData[key].high)
        }

        renderDeviationPriorityLevelChart(low, medium, high, labels)
      }

    } catch (err) {
      console.log('Error in Risk Managment chart', err.message);
    }

    $('#priorityLevelChartDeviation > .spinner-border').hide();
  }
  // Priority Level deviation end


  // Priority Level Change Control start
  function renderChangeControlPriorityLevelChart(lowData, mediumData, highData, months) {
    var options = {
      series: [{
        name: 'Low',
        data: lowData
      },
      {
        name: 'Medium',
        data: mediumData
      },
      {
        name: 'High',
        data: highData
      },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Change Control'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#FFBD00', '#FFBD00', '#FFBD00']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " Change Control"
          }
        }
      }
    };

    var priorityLevelChart = new ApexCharts(document.querySelector("#priorityLevelChartChangeControl"), options);
    priorityLevelChart.render();
  }

  async function prepareChangeControlPriorityLevelChart() {
    $('#priorityLevelChartChangeControl > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_priority_change_control.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let low = []
        let medium = []
        let high = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          low.push(bodyData[key].low)
          medium.push(bodyData[key].medium)
          high.push(bodyData[key].high)
        }

        renderChangeControlPriorityLevelChart(low, medium, high, labels)
      }

    } catch (err) {
      console.log('Error in Risk Managment chart', err.message);
    }

    $('#priorityLevelChartChangeControl > .spinner-border').hide();
  }
  // Priority Level Change Control end


  // Priority Level Change Change Control start
  function renderGlobalChangeControlPriorityLevelChart(lowData, mediumData, highData, months) {
    var options = {
      series: [{
        name: 'Low',
        data: lowData
      },
      {
        name: 'Medium',
        data: mediumData
      },
      {
        name: 'High',
        data: highData
      },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Global Change Control'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " Global Change Control"
          }
        }
      }
    };

    var priorityLevelChart = new ApexCharts(document.querySelector("#priorityLevelChartGlobalChangeControl"), options);
    priorityLevelChart.render();
  }

  async function prepareChangeGlobalControlPriorityLevelChart() {
    $('#priorityLevelChartGlobalChangeControl > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_priority_global_change_control.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let low = []
        let medium = []
        let high = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          low.push(bodyData[key].low)
          medium.push(bodyData[key].medium)
          high.push(bodyData[key].high)
        }

        renderGlobalChangeControlPriorityLevelChart(low, medium, high, labels)
      }

    } catch (err) {
      console.log('Error in Risk Managment chart', err.message);
    }

    $('#priorityLevelChartGlobalChangeControl > .spinner-border').hide();
  }
  // Priority Level Global Change Control end


  // Priority Level Action Item start
  function renderActionItemPriorityLevelChart(lowData, mediumData, highData, months) {
    var options = {
      series: [{
        name: 'Low',
        data: lowData
      },
      {
        name: 'Medium',
        data: mediumData
      },
      {
        name: 'High',
        data: highData
      },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Action Item'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#FFBD00', '#FFBD00', '#FFBD00']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " Action Item"
          }
        }
      }
    };

    var priorityLevelChart = new ApexCharts(document.querySelector("#priorityLevelChartActionItem"), options);
    priorityLevelChart.render();
  }

  async function prepareChangeActionItemPriorityLevelChart() {
    $('#priorityLevelChartActionItem > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_priority_action_item.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let low = []
        let medium = []
        let high = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          low.push(bodyData[key].low)
          medium.push(bodyData[key].medium)
          high.push(bodyData[key].high)
        }

        renderActionItemPriorityLevelChart(low, medium, high, labels)
      }

    } catch (err) {
      console.log('Error in Risk Managment chart', err.message);
    }

    $('#priorityLevelChartActionItem > .spinner-border').hide();
  }
  // Priority Level Action Item end


  // deviationStageDistribution start
  function renderDeviationStageDistributionChart(labels, series) {
    var options = {
      series: [{
        name: 'Deviation Stages',
        data: series
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: labels,
        title: {
          text: 'Deviation Stages'
        }
      },
      yaxis: {
        title: {
          text: '# of Deviation'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations";
          }
        }
      }
    };

    var deviationStageChart = new ApexCharts(document.querySelector("#deviationStageDistribution"), options);
    deviationStageChart.render();
  }

  async function prepareDeviationStageDistributionChart() {
    $('#deviationStageDistribution > .spinner-border').show();

    try {
      const url = "{{ route('api.deviationStageDistribution.chart') }}";
      const res = await axios.get(url);

      if (res.data.status === 'ok') {
        const bodyData = res.data.body;

        // Use the API's labels and series
        const labels = bodyData.labels;
        const series = bodyData.series;

        // Render the chart with the updated data
        renderDeviationStageDistributionChart(labels, series);
      } else {
        console.error("Error fetching data:", res.data.message);
      }
    } catch (err) {
      console.error("Error in deviation stage chart:", err.message);
    }

    $('#deviationStageDistribution > .spinner-border').hide();
  }
  // deviationStageDistribution end


  // changeStageDistribution start
  function renderChangeControlStageDistributionChart(labels, series) {
    var options = {
      series: [{
        name: 'Change Control Stages',
        data: series
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: labels,
        title: {
          text: 'Change Control Stages'
        }
      },
      yaxis: {
        title: {
          text: '# of Change Control'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " change controls";
          }
        }
      }
    };

    var deviationStageChart = new ApexCharts(document.querySelector("#changeControlStageDistribution"), options);
    deviationStageChart.render();
  }

  async function prepareChangeControlStageDistributionChart() {
    $('#changeControlStageDistribution > .spinner-border').show();

    try {
      const url = "{{ route('api.changeControlStageDistribution.chart') }}";
      const res = await axios.get(url);

      if (res.data.status === 'ok') {
        const bodyData = res.data.body;

        // Use the API's labels and series
        const labels = bodyData.labels;
        const series = bodyData.series;

        // Render the chart with the updated data
        renderChangeControlStageDistributionChart(labels, series);
      } else {
        console.error("Error fetching data:", res.data.message);
      }
    } catch (err) {
      console.error("Error in deviation stage chart:", err.message);
    }

    $('#changeControlStageDistribution > .spinner-border').hide();
  }
  // changeStageDistribution end


  // globalchangeStageDistribution start
  function renderGlobalChangeControlStageDistributionChart(labels, series) {
    var options = {
      series: [{
        name: 'Global Change Control Stages',
        data: series
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: labels,
        title: {
          text: 'Global Change Control Stages'
        }
      },
      yaxis: {
        title: {
          text: '# of Global Change Control'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " global change controls";
          }
        }
      }
    };

    var deviationStageChart = new ApexCharts(document.querySelector("#globalChangeControlStageDistribution"), options);
    deviationStageChart.render();
  }

  async function prepareGlobalChangeControlStageDistributionChart() {
    $('#globalChangeControlStageDistribution > .spinner-border').show();

    try {
      const url = "{{ route('api.globalChangeControlStageDistribution.chart') }}";
      const res = await axios.get(url);

      if (res.data.status === 'ok') {
        const bodyData = res.data.body;

        // Use the API's labels and series
        const labels = bodyData.labels;
        const series = bodyData.series;

        // Render the chart with the updated data
        renderGlobalChangeControlStageDistributionChart(labels, series);
      } else {
        console.error("Error fetching data:", res.data.message);
      }
    } catch (err) {
      console.error("Error in deviation stage chart:", err.message);
    }

    $('#globalChangeControlStageDistribution > .spinner-border').hide();
  }
  // globalchangeStageDistribution end


  // ActionItemDistribution start
  function renderActionItemStageDistributionChart(labels, series) {
    var options = {
      series: [{
        name: 'Action Item Stages',
        data: series
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: labels,
        title: {
          text: 'Action Item Stages'
        }
      },
      yaxis: {
        title: {
          text: '# of Action Item'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " Action Item";
          }
        }
      }
    };

    var deviationStageChart = new ApexCharts(document.querySelector("#actionItemStageDistribution"), options);
    deviationStageChart.render();
  }

  async function prepareActionItemStageDistributionChart() {
    $('#actionItemStageDistribution > .spinner-border').show();

    try {
      const url = "{{ route('api.actionItemStageDistribution.chart') }}";
      const res = await axios.get(url);

      if (res.data.status === 'ok') {
        const bodyData = res.data.body;

        // Use the API's labels and series
        const labels = bodyData.labels;
        const series = bodyData.series;

        // Render the chart with the updated data
        renderActionItemStageDistributionChart(labels, series);
      } else {
        console.error("Error fetching data:", res.data.message);
      }
    } catch (err) {
      console.error("Error in deviation stage chart:", err.message);
    }

    $('#actionItemStageDistribution > .spinner-border').hide();
  }
  // globalchangeStageDistribution end



  // Priority Level start

  function renderPriorityLevelChartRca(lowData, mediumData, highData, months) {
    var options = {
      series: [{
        name: 'Low',
        data: lowData
      },
      {
        name: 'Medium',
        data: mediumData
      },
      {
        name: 'High',
        data: highData
      },
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of RCA'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#66ccff', '#66ccff', '#66ccff', '#66ccff']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " root_cause_analysis"
          }
        }
      }
    };

    var priorityLevelChartRca = new ApexCharts(document.querySelector("#priorityLevelChartRca"), options);
    priorityLevelChartRca.render();
  }

  async function preparePriorityLevelChartRca() {
    $('#priorityLevelChartRca > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_priority_rca.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let low = []
        let medium = []
        let high = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          low.push(bodyData[key].low)
          medium.push(bodyData[key].medium)
          high.push(bodyData[key].high)
        }

        renderPriorityLevelChartRca(low, medium, high, labels)
      }

    } catch (err) {
      console.log('Error in RCA chart', err.message);
    }

    $('#priorityLevelChartRca > .spinner-border').hide();
  }
  // Priority Level deviation end


  // Delayed Data Chart Start

  function renderDelayedCharts(delayed, onTime, months) {
    var options = {
      series: [{
        name: 'Delay',
        data: delayed
      },
      {
        name: 'On Time',
        data: onTime
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Deviations'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations"
          }
        }
      }
    };

    var delayedCharts = new ApexCharts(document.querySelector("#delayedCharts"), options);
    delayedCharts.render();
  }

  async function preparedelayedCharts() {
    $('#delayedCharts > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_delayed.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let delayed = []
        let onTime = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          delayed.push(bodyData[key].delayed)
          onTime.push(bodyData[key].onTime)
        }

        renderDelayedCharts(delayed, onTime, labels)
      }

    } catch (err) {
      console.log('Error in RCA chart', err.message);
    }

    $('#delayedCharts > .spinner-border').hide();
  }

  // Delayed Data Chart Ends


  // ChangeControl Delayed Data Chart Start

  function renderChangeControlDelayedCharts(delayed, onTime, months) {
    var options = {
      series: [{
        name: 'Delay',
        data: delayed
      },
      {
        name: 'On Time',
        data: onTime
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Change Control'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB', '#008FFB']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " change controls"
          }
        }
      }
    };

    var delayedCharts = new ApexCharts(document.querySelector("#delayedChartsChangeControl"), options);
    delayedCharts.render();
  }

  async function prepareChangeControlDelayedCharts() {
    $('#delayedChartsChangeControl > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_delayedChangeControl.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let delayed = []
        let onTime = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          delayed.push(bodyData[key].delayed)
          onTime.push(bodyData[key].onTime)
        }

        renderChangeControlDelayedCharts(delayed, onTime, labels)
      }

    } catch (err) {
      console.log('Error in RCA chart', err.message);
    }

    $('#delayedChartsChangeControl > .spinner-border').hide();
  }

  // ChangeControl Delayed Data Chart Ends


  // GlobalChangeControl Delayed Data Chart Start

  function renderGlobalChangeControlDelayedCharts(delayed, onTime, months) {
    var options = {
      series: [{
        name: 'Delay',
        data: delayed
      },
      {
        name: 'On Time',
        data: onTime
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Global Change Control'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " Global change controls"
          }
        }
      }
    };


    var delayedCharts = new ApexCharts(document.querySelector("#delayedChartsGlobalChangeControl"), options);
    delayedCharts.render();
  }

  async function prepareGlobalChangeControlDelayedCharts() {
    $('#delayedChartsGlobalChangeControl > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_delayedGlobalChangeControl.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let delayed = []
        let onTime = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          delayed.push(bodyData[key].delayed)
          onTime.push(bodyData[key].onTime)
        }

        renderGlobalChangeControlDelayedCharts(delayed, onTime, labels)
      }

    } catch (err) {
      console.log('Error in RCA chart', err.message);
    }

    $('#delayedChartsGlobalChangeControl > .spinner-border').hide();
  }

  // GlobalChangeControl Delayed Data Chart Ends


  // Action Item Delayed Data Chart Start

  function renderActionItemDelayedCharts(delayed, onTime, months) {
    var options = {
      series: [{
        name: 'Delay',
        data: delayed
      },
      {
        name: 'On Time',
        data: onTime
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Action Item'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " Action Items"
          }
        }
      }
    };


    var delayedCharts = new ApexCharts(document.querySelector("#delayedChartsActionItem"), options);
    delayedCharts.render();
  }

  async function prepareActionItemDelayedCharts() {
    $('#delayedChartsActionItem > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_delayedActionItem.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let delayed = []
        let onTime = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          delayed.push(bodyData[key].delayed)
          onTime.push(bodyData[key].onTime)
        }

        renderActionItemDelayedCharts(delayed, onTime, labels)
      }

    } catch (err) {
      console.log('Error in RCA chart', err.message);
    }

    $('#delayedChartsActionItem > .spinner-border').hide();
  }

  // Action Item Delayed Data Chart Ends


  // Document by Site Chart Start

  function renderSiteCharts(corporateDate, plantData, months) {
    var options = {
      series: [{
        name: 'Corporate',
        data: corporateDate
      },
      {
        name: 'Plant',
        data: plantData
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of Deviations'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " deviations"
          }
        }
      }
    };

    var documentSiteCharts = new ApexCharts(document.querySelector("#documentSiteCharts"), options);
    documentSiteCharts.render();
  }

  async function prepareSiteCharts() {
    $('#documentSiteCharts > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_site.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let corporate = []
        let plant = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          corporate.push(bodyData[key].corporate)
          plant.push(bodyData[key].plant)
        }

        renderSiteCharts(corporate, plant, labels)
      }

    } catch (err) {
      console.log('Error in Deviations chart', err.message);
    }

    $('#documentSiteCharts > .spinner-border').hide();
  }


  // Document by Site change control Chart Start

  function renderSiteChangeControlCharts(corporateDate, plantData, months) {
    var options = {
      series: [{
        name: 'Corporate',
        data: corporateDate
      },
      {
        name: 'Plant',
        data: plantData
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of ChangeControl'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#00E396', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " ChangeControl"
          }
        }
      }
    };


    var documentSiteCharts = new ApexCharts(document.querySelector("#documentSiteChartsChangeControl"), options);
    documentSiteCharts.render();
  }

  async function prepareSiteChangeControlCharts() {
    $('#documentSiteChartsChangeControl > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_siteChangeControl.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let corporate = []
        let plant = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          corporate.push(bodyData[key].corporate)
          plant.push(bodyData[key].plant)
        }

        renderSiteChangeControlCharts(corporate, plant, labels)
      }

    } catch (err) {
      console.log('Error in Deviations chart', err.message);
    }

    $('#documentSiteChartsChangeControl > .spinner-border').hide();
  }

  // Document by Site change control Chart ends


  // Document by Site global change control Chart Start

  function renderSiteGlobalChangeControlCharts(corporateDate, plantData, months) {
    var options = {
      series: [{
        name: 'Corporate',
        data: corporateDate
      },
      {
        name: 'Plant',
        data: plantData
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of GlobalChangeControl'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " GlobalChangeControl"
          }
        }
      }
    };

    console.log('<<<<<<<<<', options);


    var documentSiteCharts = new ApexCharts(document.querySelector("#documentSiteChartsGlobalChangeControl"), options);
    documentSiteCharts.render();
  }

  async function prepareSiteGlobalChangeControlCharts() {
    $('#documentSiteChartsGlobalChangeControl > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_siteGlobalChangeControl.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let corporate = []
        let plant = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          corporate.push(bodyData[key].corporate)
          plant.push(bodyData[key].plant)
        }

        renderSiteGlobalChangeControlCharts(corporate, plant, labels)
      }

    } catch (err) {
      console.log('Error in Deviations chart', err.message);
    }

    $('#documentSiteChartsGlobalChangeControl > .spinner-border').hide();
  }

  // Document by Site change global control Chart ends


  // Document by Site ActionItem Chart Start

  function renderSiteActionItemCharts(corporateDate, plantData, months) {
    var options = {
      series: [{
        name: 'Corporate',
        data: corporateDate
      },
      {
        name: 'Plant',
        data: plantData
      }
      ],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          horizontal: false,
          columnWidth: '55%',
          endingShape: 'rounded'
        },
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
      },
      xaxis: {
        categories: months,
      },
      yaxis: {
        title: {
          text: '# of ActionItem'
        }
      },
      fill: {
        opacity: 1,
        colors: ['#008FFB', '#00E396']
      },
      tooltip: {
        y: {
          formatter: function (val) {
            return val + " ActionItem"
          }
        }
      }
    };

    console.log('<<<<<<<<<', options);


    var documentSiteCharts = new ApexCharts(document.querySelector("#documentSiteChartsActionItem"), options);
    documentSiteCharts.render();
  }

  async function prepareSiteActionItemCharts() {
    $('#documentSiteChartsActionItem > .spinner-border').show();

    try {
      const url = "{{ route('api.document_by_siteActionItem.chart') }}"
      const res = await axios.get(url);


      if (res.data.status == 'ok') {
        let bodyData = res.data.body;
        let corporate = []
        let plant = []
        let labels = []

        for (const key in bodyData) {
          labels.push(bodyData[key].month)
          corporate.push(bodyData[key].corporate)
          plant.push(bodyData[key].plant)
        }

        renderSiteActionItemCharts(corporate, plant, labels)
      }

    } catch (err) {
      console.log('Error in Deviations chart', err.message);
    }

    $('#documentSiteChartsActionItem > .spinner-border').hide();
  }

  // Document by Site ActionItem Chart ends

  function renderOverdueRecordDistributionChart(series, labels, chartType) {
  let options;

  // Check chart type and set options accordingly
  if (chartType === 'bar') {
    options = {
      series: [{
        name: 'Overdue Records',
        data: series
      }],
      chart: {
        type: 'bar',
        height: 350
      },
      plotOptions: {
        bar: {
          distributed: true,
          borderRadius: 4,
          borderRadiusApplication: 'end',
          horizontal: false,
        }
      },
      dataLabels: {
        enabled: false
      },
      xaxis: {
        categories: labels,
      },
      yaxis: {
        title: {
          text: 'Count'
        }
      }
    };
  } else if (chartType === 'pie') {
    options = {
      series: series,
      chart: {
        width: 450,
        type: 'pie',
      },
      labels,
      responsive: [{
        breakpoint: 480,
        options: {
          chart: { width: 200 },
          legend: { position: 'bottom' }
        }
      }]
    };
  } else if (chartType === 'line') {
    options = {
      series: [{
        name: 'Overdue Records',
        data: series
      }],
      chart: {
        type: 'line',
        height: 350
      },
      stroke: { width: 4 },
      xaxis: { categories: labels },
      yaxis: { title: { text: '# (overdue records)' } },
      tooltip: { y: { formatter: val => val + " records" } }
    };
  } else if (chartType === 'scatter') {
    options = {
      series: [{
        name: 'Overdue Records',
        data: series
      }],
      chart: {
        type: 'scatter',
        height: 350
      },
      xaxis: {
        categories: labels
      },
      yaxis: {
        title: { text: '# (overdue records)' }
      },
      tooltip: { y: { formatter: val => val + " records" } }
    };
  }

  // Render the chart based on the selected tab
  const chartElement = document.querySelector(`#overdueRecordDistributionChart${chartType.charAt(0).toUpperCase() + chartType.slice(1)}`);
  const chart = new ApexCharts(chartElement, options);
  chart.render();
}

async function prepareOverdueRecordDistributionChart() {
  $('#overdueRecordDistributionChartBar > .spinner-border').show();

  try {
    const url = "{{ route('api.overdue_records_by_process_chart.chart') }}";
    const res = await axios.get(url);

    if (res.data.status == 'ok') {
      let bodyData = res.data.body;
      let series = [];
      let labels = [];

      for (const key in bodyData) {
        labels.push(key);
        series.push(bodyData[key]);
      }

      // Render all chart types (Bar, Pie, Line, Scatter)
      renderOverdueRecordDistributionChart(series, labels, 'bar');
      renderOverdueRecordDistributionChart(series, labels, 'pie');
      renderOverdueRecordDistributionChart(series, labels, 'line');
      renderOverdueRecordDistributionChart(series, labels, 'scatter');
    }
  } catch (err) {
    console.log('Error in process chart', err.message);
  }

  $('#overdueRecordDistributionChartBar > .spinner-border').hide();
}
  // Document by status Charts End

  // prepareProcessChart()
  // prepareDocumentCategoryChart()
  prepareOverdueRecordDistributionChart();
  prepareProcessChart();
  prepareDocumentCategoryChart();
  prepareClassificationDeviationChart();
  prepareDeviationDepartmentChart();
  prepareDocumentOriginatorChart();
  prepareDocumentTypeChart();
  prepareDocumentSixChart();
  prepareDocumentOneChart();
  // prepareDocumentTwoChart();
  // preparePendingReviewerChart();
  // preparePendingApproverCharts();
  // preparePendingHODChart();
  // preparePendingTrainingChart();
  // prepareSeverityDeviationChart();
  preparePriorityLevelChart();
  // prepareDeviationPriorityLevelChart();
  // prepareDeviationStageDistributionChart();
  // prepareChangeControlStageDistributionChart();
  // prepareChangeControlPriorityLevelChart();
  preparePriorityLevelChartRca();
  // preparedelayedCharts();
  // prepareChangeControlDelayedCharts();
  // prepareGlobalChangeControlDelayedCharts();
  prepareSiteCharts();
  // prepareSiteChangeControlCharts();
  // prepareSiteGlobalChangeControlCharts();
  // prepareChangeGlobalControlPriorityLevelChart();
  // prepareChangeActionItemPriorityLevelChart();
  prepareGlobalChangeControlStageDistributionChart();
  // prepareActionItemStageDistributionChart();
  // prepareActionItemDelayedCharts();
  // prepareSiteActionItemCharts();
  // preparextensionPriorityLevelChart();
  // prepareextensionStageDistributionChart();
</script>
